
SZEZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000341c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003624  08003624  00013624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003630  08003630  00013630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08003634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001ac  20000004  08003638  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001b0  08003638  000201b0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   000165f9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003440  00000000  00000000  0003662d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008760  00000000  00000000  00039a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e68  00000000  00000000  000421d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001000  00000000  00000000  00043038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007bfb  00000000  00000000  00044038  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000516c  00000000  00000000  0004bc33  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00050d9f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000027f8  00000000  00000000  00050e1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800358c 	.word	0x0800358c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800358c 	.word	0x0800358c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <QSPI_AutoPollingMemReady.isra.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout: Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80004e8:	b500      	push	{lr}
 80004ea:	b095      	sub	sp, #84	; 0x54
{
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80004ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004f0:	930c      	str	r3, [sp, #48]	; 0x30
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80004f2:	2305      	movs	r3, #5
 80004f4:	9306      	str	r3, [sp, #24]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	930d      	str	r3, [sp, #52]	; 0x34
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80004fa:	930e      	str	r3, [sp, #56]	; 0x38
  sCommand.DataMode          = QSPI_DATA_1_LINE;
  sCommand.DummyCycles       = 0;
 80004fc:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80004fe:	9311      	str	r3, [sp, #68]	; 0x44
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000500:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000502:	9313      	str	r3, [sp, #76]	; 0x4c

  sConfig.Match           = 0;
 8000504:	9300      	str	r3, [sp, #0]
  sConfig.Mask            = N25Q128A_SR_WIP;
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8000506:	9304      	str	r3, [sp, #16]
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  sConfig.StatusBytesSize = 1;
  sConfig.Interval        = 0x10;
 800050c:	2310      	movs	r3, #16
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800050e:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfig.Interval        = 0x10;
 8000510:	9302      	str	r3, [sp, #8]
  sConfig.Mask            = N25Q128A_SR_WIP;
 8000512:	2201      	movs	r2, #1
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000514:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  sConfig.Mask            = N25Q128A_SR_WIP;
 8000518:	9201      	str	r2, [sp, #4]
  sConfig.StatusBytesSize = 1;
 800051a:	9203      	str	r2, [sp, #12]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800051c:	9305      	str	r3, [sp, #20]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 800051e:	466a      	mov	r2, sp
 8000520:	4603      	mov	r3, r0
 8000522:	a906      	add	r1, sp, #24
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <QSPI_AutoPollingMemReady.isra.0+0x50>)
 8000526:	f000 fdeb 	bl	8001100 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 800052a:	3000      	adds	r0, #0
 800052c:	bf18      	it	ne
 800052e:	2001      	movne	r0, #1
 8000530:	b015      	add	sp, #84	; 0x54
 8000532:	f85d fb04 	ldr.w	pc, [sp], #4
 8000536:	bf00      	nop
 8000538:	20000024 	.word	0x20000024

0800053c <QSPI_WriteEnable.isra.2>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800053c:	b500      	push	{lr}
 800053e:	b095      	sub	sp, #84	; 0x54
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000544:	930c      	str	r3, [sp, #48]	; 0x30
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8000546:	2306      	movs	r3, #6
 8000548:	9306      	str	r3, [sp, #24]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800054a:	f241 3288 	movw	r2, #5000	; 0x1388
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800054e:	2300      	movs	r3, #0
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000550:	a906      	add	r1, sp, #24
 8000552:	4815      	ldr	r0, [pc, #84]	; (80005a8 <QSPI_WriteEnable.isra.2+0x6c>)
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000554:	930d      	str	r3, [sp, #52]	; 0x34
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000556:	930e      	str	r3, [sp, #56]	; 0x38
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000558:	930f      	str	r3, [sp, #60]	; 0x3c
  sCommand.DummyCycles       = 0;
 800055a:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800055c:	9311      	str	r3, [sp, #68]	; 0x44
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800055e:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000560:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000562:	f000 fd89 	bl	8001078 <HAL_QSPI_Command>
 8000566:	b9e0      	cbnz	r0, 80005a2 <QSPI_WriteEnable.isra.2+0x66>
  sConfig.Match           = N25Q128A_SR_WREN;
 8000568:	2302      	movs	r3, #2
 800056a:	9300      	str	r3, [sp, #0]
  sConfig.Mask            = N25Q128A_SR_WREN;
 800056c:	9301      	str	r3, [sp, #4]
  sConfig.StatusBytesSize = 1;
 800056e:	2301      	movs	r3, #1
 8000570:	9303      	str	r3, [sp, #12]
  sConfig.Interval        = 0x10;
 8000572:	2310      	movs	r3, #16
 8000574:	9302      	str	r3, [sp, #8]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	9305      	str	r3, [sp, #20]
  sCommand.Instruction    = READ_STATUS_REG_CMD;
 800057c:	2305      	movs	r3, #5
 800057e:	9306      	str	r3, [sp, #24]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8000580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8000584:	9004      	str	r0, [sp, #16]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8000586:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000588:	466a      	mov	r2, sp
 800058a:	f241 3388 	movw	r3, #5000	; 0x1388
 800058e:	a906      	add	r1, sp, #24
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <QSPI_WriteEnable.isra.2+0x6c>)
 8000592:	f000 fdb5 	bl	8001100 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8000596:	3000      	adds	r0, #0
 8000598:	bf18      	it	ne
 800059a:	2001      	movne	r0, #1
}
 800059c:	b015      	add	sp, #84	; 0x54
 800059e:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 80005a2:	2001      	movs	r0, #1
 80005a4:	e7fa      	b.n	800059c <QSPI_WriteEnable.isra.2+0x60>
 80005a6:	bf00      	nop
 80005a8:	20000024 	.word	0x20000024

080005ac <BSP_QSPI_Init>:
{
 80005ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  QSPIHandle.Instance = QUADSPI;
 80005b0:	4c5c      	ldr	r4, [pc, #368]	; (8000724 <BSP_QSPI_Init+0x178>)
 80005b2:	4b5d      	ldr	r3, [pc, #372]	; (8000728 <BSP_QSPI_Init+0x17c>)
 80005b4:	6023      	str	r3, [r4, #0]
{
 80005b6:	b092      	sub	sp, #72	; 0x48
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80005b8:	4620      	mov	r0, r4
 80005ba:	f000 fd41 	bl	8001040 <HAL_QSPI_DeInit>
 80005be:	4605      	mov	r5, r0
 80005c0:	2800      	cmp	r0, #0
 80005c2:	d166      	bne.n	8000692 <BSP_QSPI_Init+0xe6>
  __HAL_RCC_QSPI_CLK_ENABLE();
 80005c4:	4b59      	ldr	r3, [pc, #356]	; (800072c <BSP_QSPI_Init+0x180>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c6:	485a      	ldr	r0, [pc, #360]	; (8000730 <BSP_QSPI_Init+0x184>)
  __HAL_RCC_QSPI_CLK_ENABLE();
 80005c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80005ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ce:	651a      	str	r2, [r3, #80]	; 0x50
 80005d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80005d2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80005d6:	9202      	str	r2, [sp, #8]
 80005d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_QSPI_FORCE_RESET();
 80005da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 80005e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005e8:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ec:	f042 0210 	orr.w	r2, r2, #16
 80005f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80005f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f4:	f003 0310 	and.w	r3, r3, #16
 80005f8:	9303      	str	r3, [sp, #12]
 80005fa:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin       = GPIO_PIN_11;
 80005fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000600:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000606:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800060a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800060c:	260a      	movs	r6, #10
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800060e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000610:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000612:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000614:	f000 fa22 	bl	8000a5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8000618:	f44f 4374 	mov.w	r3, #62464	; 0xf400
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800061c:	a904      	add	r1, sp, #16
 800061e:	4844      	ldr	r0, [pc, #272]	; (8000730 <BSP_QSPI_Init+0x184>)
  GPIO_InitStruct.Pin       = (GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8000620:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8000622:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000624:	f000 fa1a 	bl	8000a5c <HAL_GPIO_Init>
  QSPIHandle.Init.FifoThreshold      = 4;
 8000628:	2304      	movs	r3, #4
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 800062a:	6067      	str	r7, [r4, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 800062c:	60a3      	str	r3, [r4, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_NONE;
 800062e:	60e5      	str	r5, [r4, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000630:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
 8000634:	fa98 f3a8 	rbit	r3, r8
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8000638:	fab3 f383 	clz	r3, r3
 800063c:	3b01      	subs	r3, #1
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800063e:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8000640:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000642:	6165      	str	r5, [r4, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8000644:	61a5      	str	r5, [r4, #24]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8000646:	f000 fca3 	bl	8000f90 <HAL_QSPI_Init>
 800064a:	bb10      	cbnz	r0, 8000692 <BSP_QSPI_Init+0xe6>
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800064c:	f44f 7580 	mov.w	r5, #256	; 0x100
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8000650:	2366      	movs	r3, #102	; 0x66
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000652:	900b      	str	r0, [sp, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000654:	900c      	str	r0, [sp, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000656:	900d      	str	r0, [sp, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8000658:	9009      	str	r0, [sp, #36]	; 0x24
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800065a:	900f      	str	r0, [sp, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800065c:	9010      	str	r0, [sp, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800065e:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000660:	f241 3288 	movw	r2, #5000	; 0x1388
 8000664:	a904      	add	r1, sp, #16
 8000666:	4620      	mov	r0, r4
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000668:	950a      	str	r5, [sp, #40]	; 0x28
  sCommand.Instruction       = RESET_ENABLE_CMD;
 800066a:	9304      	str	r3, [sp, #16]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800066c:	f000 fd04 	bl	8001078 <HAL_QSPI_Command>
 8000670:	b968      	cbnz	r0, 800068e <BSP_QSPI_Init+0xe2>
  sCommand.Instruction = RESET_MEMORY_CMD;
 8000672:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000674:	f241 3288 	movw	r2, #5000	; 0x1388
 8000678:	a904      	add	r1, sp, #16
 800067a:	4620      	mov	r0, r4
  sCommand.Instruction = RESET_MEMORY_CMD;
 800067c:	9304      	str	r3, [sp, #16]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800067e:	f000 fcfb 	bl	8001078 <HAL_QSPI_Command>
 8000682:	b920      	cbnz	r0, 800068e <BSP_QSPI_Init+0xe2>
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8000684:	f241 3088 	movw	r0, #5000	; 0x1388
 8000688:	f7ff ff2e 	bl	80004e8 <QSPI_AutoPollingMemReady.isra.0>
 800068c:	b118      	cbz	r0, 8000696 <BSP_QSPI_Init+0xea>
    return QSPI_NOT_SUPPORTED;
 800068e:	2504      	movs	r5, #4
 8000690:	e044      	b.n	800071c <BSP_QSPI_Init+0x170>
    return QSPI_ERROR;
 8000692:	2501      	movs	r5, #1
 8000694:	e042      	b.n	800071c <BSP_QSPI_Init+0x170>
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 8000696:	2385      	movs	r3, #133	; 0x85
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000698:	900b      	str	r0, [sp, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800069a:	900c      	str	r0, [sp, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 800069c:	9009      	str	r0, [sp, #36]	; 0x24
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800069e:	900f      	str	r0, [sp, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80006a0:	9010      	str	r0, [sp, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80006a2:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80006a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80006a8:	a904      	add	r1, sp, #16
 80006aa:	4620      	mov	r0, r4
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80006ac:	950a      	str	r5, [sp, #40]	; 0x28
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 80006ae:	9304      	str	r3, [sp, #16]
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80006b0:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  sCommand.NbData            = 1;
 80006b4:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80006b6:	f000 fcdf 	bl	8001078 <HAL_QSPI_Command>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d1e7      	bne.n	800068e <BSP_QSPI_Init+0xe2>
  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80006be:	f241 3288 	movw	r2, #5000	; 0x1388
 80006c2:	f10d 0107 	add.w	r1, sp, #7
 80006c6:	4620      	mov	r0, r4
 80006c8:	f000 fe0c 	bl	80012e4 <HAL_QSPI_Receive>
 80006cc:	2800      	cmp	r0, #0
 80006ce:	d1de      	bne.n	800068e <BSP_QSPI_Init+0xe2>
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80006d0:	f7ff ff34 	bl	800053c <QSPI_WriteEnable.isra.2>
 80006d4:	4605      	mov	r5, r0
 80006d6:	2800      	cmp	r0, #0
 80006d8:	d1d9      	bne.n	800068e <BSP_QSPI_Init+0xe2>
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 80006da:	2381      	movs	r3, #129	; 0x81
 80006dc:	9304      	str	r3, [sp, #16]
 80006de:	23f0      	movs	r3, #240	; 0xf0
 80006e0:	fa93 f3a3 	rbit	r3, r3
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80006e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80006e8:	fab3 f383 	clz	r3, r3
 80006ec:	f002 020f 	and.w	r2, r2, #15
 80006f0:	fa06 f303 	lsl.w	r3, r6, r3
 80006f4:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80006f6:	a904      	add	r1, sp, #16
 80006f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80006fc:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80006fe:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000702:	f000 fcb9 	bl	8001078 <HAL_QSPI_Command>
 8000706:	2800      	cmp	r0, #0
 8000708:	d1c1      	bne.n	800068e <BSP_QSPI_Init+0xe2>
  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800070a:	f241 3288 	movw	r2, #5000	; 0x1388
 800070e:	f10d 0107 	add.w	r1, sp, #7
 8000712:	4620      	mov	r0, r4
 8000714:	f000 fd87 	bl	8001226 <HAL_QSPI_Transmit>
 8000718:	2800      	cmp	r0, #0
 800071a:	d1b8      	bne.n	800068e <BSP_QSPI_Init+0xe2>
}
 800071c:	4628      	mov	r0, r5
 800071e:	b012      	add	sp, #72	; 0x48
 8000720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000724:	20000024 	.word	0x20000024
 8000728:	a0001000 	.word	0xa0001000
 800072c:	40021000 	.word	0x40021000
 8000730:	48001000 	.word	0x48001000

08000734 <BSP_QSPI_Read>:
{
 8000734:	b510      	push	{r4, lr}
 8000736:	b08e      	sub	sp, #56	; 0x38
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073c:	9306      	str	r3, [sp, #24]
  sCommand.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800073e:	23eb      	movs	r3, #235	; 0xeb
 8000740:	9300      	str	r3, [sp, #0]
  sCommand.Address           = ReadAddr;
 8000742:	9101      	str	r1, [sp, #4]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000744:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 8000748:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 800074c:	9307      	str	r3, [sp, #28]
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 800074e:	9109      	str	r1, [sp, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8000754:	210a      	movs	r1, #10
{
 8000756:	4604      	mov	r4, r0
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000758:	9303      	str	r3, [sp, #12]
  sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 800075a:	9105      	str	r1, [sp, #20]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800075c:	2300      	movs	r3, #0
  sCommand.NbData            = Size;
 800075e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000760:	4669      	mov	r1, sp
 8000762:	f241 3288 	movw	r2, #5000	; 0x1388
 8000766:	480a      	ldr	r0, [pc, #40]	; (8000790 <BSP_QSPI_Read+0x5c>)
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000768:	9308      	str	r3, [sp, #32]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800076a:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800076c:	930c      	str	r3, [sp, #48]	; 0x30
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800076e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000770:	f000 fc82 	bl	8001078 <HAL_QSPI_Command>
 8000774:	b950      	cbnz	r0, 800078c <BSP_QSPI_Read+0x58>
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000776:	f241 3288 	movw	r2, #5000	; 0x1388
 800077a:	4621      	mov	r1, r4
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <BSP_QSPI_Read+0x5c>)
 800077e:	f000 fdb1 	bl	80012e4 <HAL_QSPI_Receive>
    return QSPI_ERROR;
 8000782:	3000      	adds	r0, #0
 8000784:	bf18      	it	ne
 8000786:	2001      	movne	r0, #1
}
 8000788:	b00e      	add	sp, #56	; 0x38
 800078a:	bd10      	pop	{r4, pc}
    return QSPI_ERROR;
 800078c:	2001      	movs	r0, #1
 800078e:	e7fb      	b.n	8000788 <BSP_QSPI_Read+0x54>
 8000790:	20000024 	.word	0x20000024

08000794 <BSP_QSPI_Write>:
{
 8000794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000798:	b08e      	sub	sp, #56	; 0x38
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800079a:	f44f 7380 	mov.w	r3, #256	; 0x100
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 800079e:	b2cc      	uxtb	r4, r1
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80007a0:	9306      	str	r3, [sp, #24]
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 80007a2:	2312      	movs	r3, #18
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 80007a4:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
  sCommand.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 80007a8:	9300      	str	r3, [sp, #0]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80007aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007ae:	4294      	cmp	r4, r2
 80007b0:	9307      	str	r3, [sp, #28]
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	bf28      	it	cs
 80007b8:	4614      	movcs	r4, r2
  end_addr = WriteAddr + Size;
 80007ba:	188d      	adds	r5, r1, r2
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80007bc:	9303      	str	r3, [sp, #12]
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80007be:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80007c2:	2300      	movs	r3, #0
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80007c4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000830 <BSP_QSPI_Write+0x9c>
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80007c8:	9308      	str	r3, [sp, #32]
{
 80007ca:	4607      	mov	r7, r0
 80007cc:	460e      	mov	r6, r1
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80007ce:	9209      	str	r2, [sp, #36]	; 0x24
  sCommand.DummyCycles       = 0;
 80007d0:	9305      	str	r3, [sp, #20]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80007d2:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80007d4:	930c      	str	r3, [sp, #48]	; 0x30
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80007d6:	930d      	str	r3, [sp, #52]	; 0x34
    sCommand.Address = current_addr;
 80007d8:	9601      	str	r6, [sp, #4]
    sCommand.NbData  = current_size;
 80007da:	940a      	str	r4, [sp, #40]	; 0x28
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80007dc:	f7ff feae 	bl	800053c <QSPI_WriteEnable.isra.2>
 80007e0:	b118      	cbz	r0, 80007ea <BSP_QSPI_Write+0x56>
      return QSPI_ERROR;
 80007e2:	2001      	movs	r0, #1
}
 80007e4:	b00e      	add	sp, #56	; 0x38
 80007e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80007ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80007ee:	4669      	mov	r1, sp
 80007f0:	480f      	ldr	r0, [pc, #60]	; (8000830 <BSP_QSPI_Write+0x9c>)
 80007f2:	f000 fc41 	bl	8001078 <HAL_QSPI_Command>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d1f3      	bne.n	80007e2 <BSP_QSPI_Write+0x4e>
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80007fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80007fe:	4639      	mov	r1, r7
 8000800:	4640      	mov	r0, r8
 8000802:	f000 fd10 	bl	8001226 <HAL_QSPI_Transmit>
 8000806:	2800      	cmp	r0, #0
 8000808:	d1eb      	bne.n	80007e2 <BSP_QSPI_Write+0x4e>
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800080a:	f241 3088 	movw	r0, #5000	; 0x1388
 800080e:	f7ff fe6b 	bl	80004e8 <QSPI_AutoPollingMemReady.isra.0>
 8000812:	2800      	cmp	r0, #0
 8000814:	d1e5      	bne.n	80007e2 <BSP_QSPI_Write+0x4e>
    current_addr += current_size;
 8000816:	4426      	add	r6, r4
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8000818:	f506 7380 	add.w	r3, r6, #256	; 0x100
 800081c:	429d      	cmp	r5, r3
    pData += current_size;
 800081e:	4427      	add	r7, r4
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8000820:	bf34      	ite	cc
 8000822:	1bac      	subcc	r4, r5, r6
 8000824:	f44f 7480 	movcs.w	r4, #256	; 0x100
  while (current_addr < end_addr);
 8000828:	42b5      	cmp	r5, r6
 800082a:	d8d5      	bhi.n	80007d8 <BSP_QSPI_Write+0x44>
 800082c:	e7da      	b.n	80007e4 <BSP_QSPI_Write+0x50>
 800082e:	bf00      	nop
 8000830:	20000024 	.word	0x20000024

08000834 <BSP_QSPI_Erase_Block>:
{
 8000834:	b500      	push	{lr}
 8000836:	b08f      	sub	sp, #60	; 0x3c
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083c:	9306      	str	r3, [sp, #24]
  sCommand.Instruction       = SUBSECTOR_ERASE_CMD;
 800083e:	2320      	movs	r3, #32
 8000840:	9300      	str	r3, [sp, #0]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8000842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000846:	9307      	str	r3, [sp, #28]
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084c:	9303      	str	r3, [sp, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800084e:	2300      	movs	r3, #0
  sCommand.Address           = BlockAddress;
 8000850:	9001      	str	r0, [sp, #4]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000852:	9308      	str	r3, [sp, #32]
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000854:	9309      	str	r3, [sp, #36]	; 0x24
  sCommand.DummyCycles       = 0;
 8000856:	9305      	str	r3, [sp, #20]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000858:	930b      	str	r3, [sp, #44]	; 0x2c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800085a:	930c      	str	r3, [sp, #48]	; 0x30
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800085c:	930d      	str	r3, [sp, #52]	; 0x34
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 800085e:	f7ff fe6d 	bl	800053c <QSPI_WriteEnable.isra.2>
 8000862:	b118      	cbz	r0, 800086c <BSP_QSPI_Erase_Block+0x38>
    return QSPI_ERROR;
 8000864:	2001      	movs	r0, #1
}
 8000866:	b00f      	add	sp, #60	; 0x3c
 8000868:	f85d fb04 	ldr.w	pc, [sp], #4
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800086c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000870:	4669      	mov	r1, sp
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <BSP_QSPI_Erase_Block+0x58>)
 8000874:	f000 fc00 	bl	8001078 <HAL_QSPI_Command>
 8000878:	2800      	cmp	r0, #0
 800087a:	d1f3      	bne.n	8000864 <BSP_QSPI_Erase_Block+0x30>
  if (QSPI_AutoPollingMemReady(&QSPIHandle, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 800087c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000880:	f7ff fe32 	bl	80004e8 <QSPI_AutoPollingMemReady.isra.0>
    return QSPI_ERROR;
 8000884:	3000      	adds	r0, #0
 8000886:	bf18      	it	ne
 8000888:	2001      	movne	r0, #1
 800088a:	e7ec      	b.n	8000866 <BSP_QSPI_Erase_Block+0x32>
 800088c:	20000024 	.word	0x20000024

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_InitTick+0x2c>)
{
 8000894:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089c:	fbb0 f0f3 	udiv	r0, r0, r3
 80008a0:	f000 f884 	bl	80009ac <HAL_SYSTICK_Config>
 80008a4:	4604      	mov	r4, r0
 80008a6:	b938      	cbnz	r0, 80008b8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80008a8:	4602      	mov	r2, r0
 80008aa:	4629      	mov	r1, r5
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 f83c 	bl	800092c <HAL_NVIC_SetPriority>
 80008b4:	4620      	mov	r0, r4
 80008b6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80008b8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80008ba:	bd38      	pop	{r3, r4, r5, pc}
 80008bc:	20000000 	.word	0x20000000

080008c0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <HAL_Init+0x28>)
 80008c2:	6813      	ldr	r3, [r2, #0]
 80008c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80008c8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ca:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ce:	f000 f81b 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff ffdc 	bl	8000890 <HAL_InitTick>
 80008d8:	4604      	mov	r4, r0
 80008da:	b918      	cbnz	r0, 80008e4 <HAL_Init+0x24>
    HAL_MspInit();
 80008dc:	f002 fd32 	bl	8003344 <HAL_MspInit>
}
 80008e0:	4620      	mov	r0, r4
 80008e2:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80008e4:	2401      	movs	r4, #1
 80008e6:	e7fb      	b.n	80008e0 <HAL_Init+0x20>
 80008e8:	40022000 	.word	0x40022000

080008ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80008ec:	4a02      	ldr	r2, [pc, #8]	; (80008f8 <HAL_IncTick+0xc>)
 80008ee:	6813      	ldr	r3, [r2, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000068 	.word	0x20000068

080008fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008fc:	4b01      	ldr	r3, [pc, #4]	; (8000904 <HAL_GetTick+0x8>)
 80008fe:	6818      	ldr	r0, [r3, #0]
}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000068 	.word	0x20000068

08000908 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800090a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000910:	041b      	lsls	r3, r3, #16
 8000912:	0c1b      	lsrs	r3, r3, #16
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000918:	0200      	lsls	r0, r0, #8
 800091a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000922:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000924:	60d3      	str	r3, [r2, #12]
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092e:	b530      	push	{r4, r5, lr}
 8000930:	68dc      	ldr	r4, [r3, #12]
 8000932:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000936:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	2b04      	cmp	r3, #4
 800093e:	bf28      	it	cs
 8000940:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000942:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 0501 	mov.w	r5, #1
 8000948:	fa05 f303 	lsl.w	r3, r5, r3
 800094c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000950:	bf8c      	ite	hi
 8000952:	3c03      	subhi	r4, #3
 8000954:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000956:	4019      	ands	r1, r3
 8000958:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095a:	fa05 f404 	lsl.w	r4, r5, r4
 800095e:	3c01      	subs	r4, #1
 8000960:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000962:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	ea42 0201 	orr.w	r2, r2, r1
 8000968:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	bfaf      	iteee	ge
 800096e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	f000 000f 	andlt.w	r0, r0, #15
 8000976:	4b06      	ldrlt	r3, [pc, #24]	; (8000990 <HAL_NVIC_SetPriority+0x64>)
 8000978:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	bfa5      	ittet	ge
 800097c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000980:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000988:	bd30      	pop	{r4, r5, pc}
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00
 8000990:	e000ed14 	.word	0xe000ed14

08000994 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000994:	0942      	lsrs	r2, r0, #5
 8000996:	2301      	movs	r3, #1
 8000998:	f000 001f 	and.w	r0, r0, #31
 800099c:	fa03 f000 	lsl.w	r0, r3, r0
 80009a0:	4b01      	ldr	r3, [pc, #4]	; (80009a8 <HAL_NVIC_EnableIRQ+0x14>)
 80009a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100

080009ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	3801      	subs	r0, #1
 80009ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009b2:	d20a      	bcs.n	80009ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	21f0      	movs	r1, #240	; 0xf0
 80009bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral handle */
  if(NULL == hdma)
 80009d8:	b1b8      	cbz	r0, 8000a0a <HAL_DMA_Abort+0x32>
  {
    return HAL_ERROR;
  }

  /* Disable DMA IT */
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009da:	6803      	ldr	r3, [r0, #0]

  /* Disable the channel */
  __HAL_DMA_DISABLE(hdma);

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80009dc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	f022 020e 	bic.w	r2, r2, #14
 80009e4:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE(hdma);
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	f022 0201 	bic.w	r2, r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80009ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80009f0:	2201      	movs	r2, #1
 80009f2:	f003 031c 	and.w	r3, r3, #28
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	604b      	str	r3, [r1, #4]

  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80009fc:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80009fe:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8000a02:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

  return status;
 8000a06:	4618      	mov	r0, r3
 8000a08:	4770      	bx	lr
    return HAL_ERROR;
 8000a0a:	2001      	movs	r0, #1
}
 8000a0c:	4770      	bx	lr

08000a0e <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a0e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8000a12:	2a02      	cmp	r2, #2
{
 8000a14:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a16:	d003      	beq.n	8000a20 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a18:	2204      	movs	r2, #4
 8000a1a:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a20:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000a22:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a24:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a26:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a28:	f021 010e 	bic.w	r1, r1, #14
 8000a2c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000a2e:	6811      	ldr	r1, [r2, #0]
 8000a30:	f021 0101 	bic.w	r1, r1, #1
 8000a34:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000a36:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000a38:	2101      	movs	r1, #1
 8000a3a:	f002 021c 	and.w	r2, r2, #28
 8000a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a42:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000a44:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000a46:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000a4a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8000a4e:	b113      	cbz	r3, 8000a56 <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 8000a50:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000a52:	4620      	mov	r0, r4
 8000a54:	bd10      	pop	{r4, pc}
 8000a56:	4618      	mov	r0, r3
    }
  }
  return status;
}
 8000a58:	bd10      	pop	{r4, pc}
	...

08000a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a60:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a62:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a64:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000c10 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a68:	4c67      	ldr	r4, [pc, #412]	; (8000c08 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000a6c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6e:	9a01      	ldr	r2, [sp, #4]
 8000a70:	40da      	lsrs	r2, r3
 8000a72:	d102      	bne.n	8000a7a <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000a74:	b005      	add	sp, #20
 8000a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a7a:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000a7c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a7e:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000a80:	ea12 0e06 	ands.w	lr, r2, r6
 8000a84:	f000 80b1 	beq.w	8000bea <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a88:	684a      	ldr	r2, [r1, #4]
 8000a8a:	f022 0710 	bic.w	r7, r2, #16
 8000a8e:	2f02      	cmp	r7, #2
 8000a90:	d116      	bne.n	8000ac0 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8000a92:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000a96:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a9a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000a9e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aa2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000aa6:	f04f 0c0f 	mov.w	ip, #15
 8000aaa:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000aae:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ab2:	690d      	ldr	r5, [r1, #16]
 8000ab4:	fa05 f50a 	lsl.w	r5, r5, sl
 8000ab8:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000abc:	f8c9 5020 	str.w	r5, [r9, #32]
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ac4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ac6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000aca:	fa05 f50c 	lsl.w	r5, r5, ip
 8000ace:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ad0:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ad4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ad8:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000adc:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ade:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000ae4:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae8:	d811      	bhi.n	8000b0e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000aea:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000aec:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000af0:	68cf      	ldr	r7, [r1, #12]
 8000af2:	fa07 f70c 	lsl.w	r7, r7, ip
 8000af6:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000afa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000afc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000afe:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b02:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000b06:	409f      	lsls	r7, r3
 8000b08:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000b0c:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b0e:	f1ba 0f03 	cmp.w	sl, #3
 8000b12:	d107      	bne.n	8000b24 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000b14:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b16:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000b1a:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000b1e:	409f      	lsls	r7, r3
 8000b20:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000b22:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000b24:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b26:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b28:	688e      	ldr	r6, [r1, #8]
 8000b2a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000b2e:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000b30:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b32:	00d5      	lsls	r5, r2, #3
 8000b34:	d559      	bpl.n	8000bea <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000b3a:	f045 0501 	orr.w	r5, r5, #1
 8000b3e:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000b42:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000b46:	f023 0603 	bic.w	r6, r3, #3
 8000b4a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000b4e:	f005 0501 	and.w	r5, r5, #1
 8000b52:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000b56:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b58:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b5e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b60:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b64:	270f      	movs	r7, #15
 8000b66:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b6a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b6e:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b72:	d03c      	beq.n	8000bee <HAL_GPIO_Init+0x192>
 8000b74:	4d25      	ldr	r5, [pc, #148]	; (8000c0c <HAL_GPIO_Init+0x1b0>)
 8000b76:	42a8      	cmp	r0, r5
 8000b78:	d03b      	beq.n	8000bf2 <HAL_GPIO_Init+0x196>
 8000b7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b7e:	42a8      	cmp	r0, r5
 8000b80:	d039      	beq.n	8000bf6 <HAL_GPIO_Init+0x19a>
 8000b82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b86:	42a8      	cmp	r0, r5
 8000b88:	d037      	beq.n	8000bfa <HAL_GPIO_Init+0x19e>
 8000b8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b8e:	42a8      	cmp	r0, r5
 8000b90:	d035      	beq.n	8000bfe <HAL_GPIO_Init+0x1a2>
 8000b92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b96:	42a8      	cmp	r0, r5
 8000b98:	d033      	beq.n	8000c02 <HAL_GPIO_Init+0x1a6>
 8000b9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b9e:	42a8      	cmp	r0, r5
 8000ba0:	bf14      	ite	ne
 8000ba2:	2507      	movne	r5, #7
 8000ba4:	2506      	moveq	r5, #6
 8000ba6:	fa05 f50c 	lsl.w	r5, r5, ip
 8000baa:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bac:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000bae:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000bb0:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb4:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8000bb6:	bf54      	ite	pl
 8000bb8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000bba:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8000bbe:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000bc0:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bc2:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8000bc4:	bf54      	ite	pl
 8000bc6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000bc8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000bcc:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8000bce:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd0:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8000bd2:	bf54      	ite	pl
 8000bd4:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000bd6:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000bda:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000bdc:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bde:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8000be0:	bf54      	ite	pl
 8000be2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000be4:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000be8:	60e5      	str	r5, [r4, #12]
    position++;
 8000bea:	3301      	adds	r3, #1
 8000bec:	e73f      	b.n	8000a6e <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bee:	2500      	movs	r5, #0
 8000bf0:	e7d9      	b.n	8000ba6 <HAL_GPIO_Init+0x14a>
 8000bf2:	2501      	movs	r5, #1
 8000bf4:	e7d7      	b.n	8000ba6 <HAL_GPIO_Init+0x14a>
 8000bf6:	2502      	movs	r5, #2
 8000bf8:	e7d5      	b.n	8000ba6 <HAL_GPIO_Init+0x14a>
 8000bfa:	2503      	movs	r5, #3
 8000bfc:	e7d3      	b.n	8000ba6 <HAL_GPIO_Init+0x14a>
 8000bfe:	2504      	movs	r5, #4
 8000c00:	e7d1      	b.n	8000ba6 <HAL_GPIO_Init+0x14a>
 8000c02:	2505      	movs	r5, #5
 8000c04:	e7cf      	b.n	8000ba6 <HAL_GPIO_Init+0x14a>
 8000c06:	bf00      	nop
 8000c08:	40010400 	.word	0x40010400
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000c18:	4c47      	ldr	r4, [pc, #284]	; (8000d38 <HAL_GPIO_DeInit+0x124>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000c1a:	f8df a124 	ldr.w	sl, [pc, #292]	; 8000d40 <HAL_GPIO_DeInit+0x12c>
 8000c1e:	f8df b124 	ldr.w	fp, [pc, #292]	; 8000d44 <HAL_GPIO_DeInit+0x130>
  uint32_t position = 0x00u;
 8000c22:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000c24:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000c28:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != 0x00u)
 8000c2c:	fa31 f203 	lsrs.w	r2, r1, r3
 8000c30:	d102      	bne.n	8000c38 <HAL_GPIO_DeInit+0x24>
      }
    }

    position++;
  }
}
 8000c32:	b003      	add	sp, #12
 8000c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000c38:	fa08 f603 	lsl.w	r6, r8, r3
    if (iocurrent != 0x00u)
 8000c3c:	ea11 0206 	ands.w	r2, r1, r6
 8000c40:	9201      	str	r2, [sp, #4]
 8000c42:	d06a      	beq.n	8000d1a <HAL_GPIO_DeInit+0x106>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000c44:	6807      	ldr	r7, [r0, #0]
 8000c46:	005a      	lsls	r2, r3, #1
 8000c48:	fa09 f202 	lsl.w	r2, r9, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000c4c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000c50:	4317      	orrs	r7, r2
 8000c52:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000c56:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000c58:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8000c5c:	f003 0e07 	and.w	lr, r3, #7
 8000c60:	463d      	mov	r5, r7
 8000c62:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c66:	270f      	movs	r7, #15
 8000c68:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000c6c:	ea25 0e0e 	bic.w	lr, r5, lr
 8000c70:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c74:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8000c78:	43d2      	mvns	r2, r2
 8000c7a:	ea0e 0e02 	and.w	lr, lr, r2
 8000c7e:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c82:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000c86:	43f6      	mvns	r6, r6
 8000c88:	ea0e 0e06 	and.w	lr, lr, r6
 8000c8c:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c90:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8000c94:	ea02 020e 	and.w	r2, r2, lr
 8000c98:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000c9a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000c9c:	4016      	ands	r6, r2
 8000c9e:	62c6      	str	r6, [r0, #44]	; 0x2c
 8000ca0:	f023 0603 	bic.w	r6, r3, #3
 8000ca4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000ca8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000cac:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8000cb0:	68b2      	ldr	r2, [r6, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000cb2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000cb6:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000cba:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000cbe:	ea02 0c07 	and.w	ip, r2, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000cc2:	d02c      	beq.n	8000d1e <HAL_GPIO_DeInit+0x10a>
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <HAL_GPIO_DeInit+0x128>)
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	d02b      	beq.n	8000d22 <HAL_GPIO_DeInit+0x10e>
 8000cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	d029      	beq.n	8000d26 <HAL_GPIO_DeInit+0x112>
 8000cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	d027      	beq.n	8000d2a <HAL_GPIO_DeInit+0x116>
 8000cda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	d025      	beq.n	8000d2e <HAL_GPIO_DeInit+0x11a>
 8000ce2:	4550      	cmp	r0, sl
 8000ce4:	d025      	beq.n	8000d32 <HAL_GPIO_DeInit+0x11e>
 8000ce6:	4558      	cmp	r0, fp
 8000ce8:	bf0c      	ite	eq
 8000cea:	2206      	moveq	r2, #6
 8000cec:	2207      	movne	r2, #7
 8000cee:	fa02 f20e 	lsl.w	r2, r2, lr
 8000cf2:	4594      	cmp	ip, r2
 8000cf4:	d111      	bne.n	8000d1a <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000cf6:	68b2      	ldr	r2, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 8000cf8:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000cfa:	ea22 0707 	bic.w	r7, r2, r7
 8000cfe:	60b7      	str	r7, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 8000d00:	6822      	ldr	r2, [r4, #0]
 8000d02:	43ed      	mvns	r5, r5
 8000d04:	402a      	ands	r2, r5
 8000d06:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000d08:	6862      	ldr	r2, [r4, #4]
 8000d0a:	402a      	ands	r2, r5
 8000d0c:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8000d0e:	68a2      	ldr	r2, [r4, #8]
 8000d10:	402a      	ands	r2, r5
 8000d12:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8000d14:	68e2      	ldr	r2, [r4, #12]
 8000d16:	4015      	ands	r5, r2
 8000d18:	60e5      	str	r5, [r4, #12]
    position++;
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	e786      	b.n	8000c2c <HAL_GPIO_DeInit+0x18>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000d1e:	2200      	movs	r2, #0
 8000d20:	e7e5      	b.n	8000cee <HAL_GPIO_DeInit+0xda>
 8000d22:	2201      	movs	r2, #1
 8000d24:	e7e3      	b.n	8000cee <HAL_GPIO_DeInit+0xda>
 8000d26:	2202      	movs	r2, #2
 8000d28:	e7e1      	b.n	8000cee <HAL_GPIO_DeInit+0xda>
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	e7df      	b.n	8000cee <HAL_GPIO_DeInit+0xda>
 8000d2e:	2204      	movs	r2, #4
 8000d30:	e7dd      	b.n	8000cee <HAL_GPIO_DeInit+0xda>
 8000d32:	2205      	movs	r2, #5
 8000d34:	e7db      	b.n	8000cee <HAL_GPIO_DeInit+0xda>
 8000d36:	bf00      	nop
 8000d38:	40010400 	.word	0x40010400
 8000d3c:	48000400 	.word	0x48000400
 8000d40:	48001400 	.word	0x48001400
 8000d44:	48001800 	.word	0x48001800

08000d48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d48:	b10a      	cbz	r2, 8000d4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d4a:	6181      	str	r1, [r0, #24]
 8000d4c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d4e:	6281      	str	r1, [r0, #40]	; 0x28
 8000d50:	4770      	bx	lr

08000d52 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000d52:	6943      	ldr	r3, [r0, #20]
 8000d54:	4059      	eors	r1, r3
 8000d56:	6141      	str	r1, [r0, #20]
 8000d58:	4770      	bx	lr
	...

08000d5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d5c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000d60:	6959      	ldr	r1, [r3, #20]
 8000d62:	4201      	tst	r1, r0
 8000d64:	d002      	beq.n	8000d6c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d66:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d68:	f002 f8c6 	bl	8002ef8 <HAL_GPIO_EXTI_Callback>
 8000d6c:	bd08      	pop	{r3, pc}
 8000d6e:	bf00      	nop
 8000d70:	40010400 	.word	0x40010400

08000d74 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d74:	4a02      	ldr	r2, [pc, #8]	; (8000d80 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000d76:	6813      	ldr	r3, [r2, #0]
 8000d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	4770      	bx	lr
 8000d80:	40007000 	.word	0x40007000

08000d84 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <HAL_PWREx_GetVoltageRange+0xc>)
 8000d86:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000d88:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40007000 	.word	0x40007000

08000d94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d96:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d98:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d9c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000da0:	d11c      	bne.n	8000ddc <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000da2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000da6:	d015      	beq.n	8000dd4 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000db2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000db4:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000db6:	6811      	ldr	r1, [r2, #0]
 8000db8:	2232      	movs	r2, #50	; 0x32
 8000dba:	434a      	muls	r2, r1
 8000dbc:	490f      	ldr	r1, [pc, #60]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000dbe:	fbb2 f2f1 	udiv	r2, r2, r1
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dc6:	6958      	ldr	r0, [r3, #20]
 8000dc8:	0540      	lsls	r0, r0, #21
 8000dca:	d500      	bpl.n	8000dce <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000dcc:	b922      	cbnz	r2, 8000dd8 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dce:	694b      	ldr	r3, [r1, #20]
 8000dd0:	055b      	lsls	r3, r3, #21
 8000dd2:	d40d      	bmi.n	8000df0 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	4770      	bx	lr
        wait_loop_index--;
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	e7f4      	b.n	8000dc6 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ddc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000de0:	bf1f      	itttt	ne
 8000de2:	681a      	ldrne	r2, [r3, #0]
 8000de4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000de8:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000dec:	601a      	strne	r2, [r3, #0]
 8000dee:	e7f1      	b.n	8000dd4 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000df0:	2003      	movs	r0, #3
}
 8000df2:	4770      	bx	lr
 8000df4:	40007000 	.word	0x40007000
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	000f4240 	.word	0x000f4240

08000e00 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8000e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e04:	4604      	mov	r4, r0
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8000e06:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000e08:	b138      	cbz	r0, 8000e1a <QSPI_Config+0x1a>
 8000e0a:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8000e0e:	bf1f      	itttt	ne
 8000e10:	6a8b      	ldrne	r3, [r1, #40]	; 0x28
 8000e12:	6825      	ldrne	r5, [r4, #0]
 8000e14:	f103 33ff 	addne.w	r3, r3, #4294967295
 8000e18:	612b      	strne	r3, [r5, #16]
 8000e1a:	f101 0318 	add.w	r3, r1, #24
 8000e1e:	e893 0308 	ldmia.w	r3, {r3, r8, r9}
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d04f      	beq.n	8000ec6 <QSPI_Config+0xc6>
 8000e26:	6824      	ldr	r4, [r4, #0]
 8000e28:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
 8000e2c:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
 8000e30:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8000e32:	680e      	ldr	r6, [r1, #0]
 8000e34:	694d      	ldr	r5, [r1, #20]
 8000e36:	4303      	orrs	r3, r0
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8000e38:	f1b9 0f00 	cmp.w	r9, #0
 8000e3c:	d023      	beq.n	8000e86 <QSPI_Config+0x86>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8000e3e:	6888      	ldr	r0, [r1, #8]
 8000e40:	61e0      	str	r0, [r4, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000e42:	4313      	orrs	r3, r2
 8000e44:	6908      	ldr	r0, [r1, #16]
 8000e46:	ea43 0309 	orr.w	r3, r3, r9
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8000e4a:	f1b8 0f00 	cmp.w	r8, #0
 8000e4e:	d00e      	beq.n	8000e6e <QSPI_Config+0x6e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000e50:	ea43 0308 	orr.w	r3, r3, r8
 8000e54:	ea43 030c 	orr.w	r3, r3, ip
 8000e58:	ea43 030e 	orr.w	r3, r3, lr
 8000e5c:	433b      	orrs	r3, r7
 8000e5e:	4303      	orrs	r3, r0
 8000e60:	68c8      	ldr	r0, [r1, #12]
 8000e62:	4303      	orrs	r3, r0
 8000e64:	4333      	orrs	r3, r6

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000e66:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
    {
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with only address ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000e6a:	6163      	str	r3, [r4, #20]
 8000e6c:	e01d      	b.n	8000eaa <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000e6e:	ea43 030c 	orr.w	r3, r3, ip
 8000e72:	ea43 030e 	orr.w	r3, r3, lr
 8000e76:	433b      	orrs	r3, r7
 8000e78:	4303      	orrs	r3, r0
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000e7a:	4333      	orrs	r3, r6
 8000e7c:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
      {
        /*---- Command with only data phase ----*/
        if (cmd->DataMode != QSPI_DATA_NONE)
        {
          /* Configure QSPI: CCR register with all communications parameters */
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000e80:	6163      	str	r3, [r4, #20]
 8000e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8000e86:	f1b8 0f00 	cmp.w	r8, #0
 8000e8a:	d015      	beq.n	8000eb8 <QSPI_Config+0xb8>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000e8c:	ea43 0002 	orr.w	r0, r3, r2
 8000e90:	ea40 0008 	orr.w	r0, r0, r8
 8000e94:	ea40 000c 	orr.w	r0, r0, ip
 8000e98:	68cb      	ldr	r3, [r1, #12]
 8000e9a:	ea40 000e 	orr.w	r0, r0, lr
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	4318      	orrs	r0, r3
 8000ea2:	4330      	orrs	r0, r6
 8000ea4:	ea40 4085 	orr.w	r0, r0, r5, lsl #18
 8000ea8:	6160      	str	r0, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8000eaa:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8000eae:	d0e8      	beq.n	8000e82 <QSPI_Config+0x82>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8000eb0:	684b      	ldr	r3, [r1, #4]
 8000eb2:	61a3      	str	r3, [r4, #24]
 8000eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000eb8:	4313      	orrs	r3, r2
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000eba:	ea43 030c 	orr.w	r3, r3, ip
 8000ebe:	ea43 030e 	orr.w	r3, r3, lr
 8000ec2:	433b      	orrs	r3, r7
 8000ec4:	e7d9      	b.n	8000e7a <QSPI_Config+0x7a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8000ec6:	f1b9 0f00 	cmp.w	r9, #0
 8000eca:	d01a      	beq.n	8000f02 <QSPI_Config+0x102>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8000ecc:	6824      	ldr	r4, [r4, #0]
 8000ece:	688b      	ldr	r3, [r1, #8]
 8000ed0:	61e3      	str	r3, [r4, #28]
 8000ed2:	ea40 0309 	orr.w	r3, r0, r9
 8000ed6:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
 8000eda:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
 8000ede:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8000ee0:	690e      	ldr	r6, [r1, #16]
 8000ee2:	694d      	ldr	r5, [r1, #20]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000ee4:	4313      	orrs	r3, r2
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8000ee6:	f1b8 0f00 	cmp.w	r8, #0
 8000eea:	d0e6      	beq.n	8000eba <QSPI_Config+0xba>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000eec:	ea43 0008 	orr.w	r0, r3, r8
 8000ef0:	ea40 030c 	orr.w	r3, r0, ip
 8000ef4:	ea43 030e 	orr.w	r3, r3, lr
 8000ef8:	433b      	orrs	r3, r7
 8000efa:	68c8      	ldr	r0, [r1, #12]
 8000efc:	4333      	orrs	r3, r6
 8000efe:	4303      	orrs	r3, r0
 8000f00:	e7b1      	b.n	8000e66 <QSPI_Config+0x66>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8000f02:	f1b8 0f00 	cmp.w	r8, #0
 8000f06:	d00f      	beq.n	8000f28 <QSPI_Config+0x128>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000f08:	ea40 0308 	orr.w	r3, r0, r8
 8000f0c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8000f0e:	6824      	ldr	r4, [r4, #0]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	4303      	orrs	r3, r0
 8000f14:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8000f16:	4303      	orrs	r3, r0
 8000f18:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8000f1a:	4303      	orrs	r3, r0
 8000f1c:	68c8      	ldr	r0, [r1, #12]
 8000f1e:	4303      	orrs	r3, r0
 8000f20:	6948      	ldr	r0, [r1, #20]
 8000f22:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 8000f26:	e7a0      	b.n	8000e6a <QSPI_Config+0x6a>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	d0aa      	beq.n	8000e82 <QSPI_Config+0x82>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8000f2c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000f2e:	6824      	ldr	r4, [r4, #0]
 8000f30:	4303      	orrs	r3, r0
 8000f32:	4313      	orrs	r3, r2
 8000f34:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000f36:	4313      	orrs	r3, r2
 8000f38:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	694a      	ldr	r2, [r1, #20]
 8000f3e:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8000f42:	e79d      	b.n	8000e80 <QSPI_Config+0x80>

08000f44 <QSPI_WaitFlagStateUntilTimeout>:
{
 8000f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f48:	9d06      	ldr	r5, [sp, #24]
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	460f      	mov	r7, r1
 8000f4e:	4616      	mov	r6, r2
 8000f50:	4698      	mov	r8, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8000f52:	6821      	ldr	r1, [r4, #0]
 8000f54:	688a      	ldr	r2, [r1, #8]
 8000f56:	423a      	tst	r2, r7
 8000f58:	bf14      	ite	ne
 8000f5a:	2201      	movne	r2, #1
 8000f5c:	2200      	moveq	r2, #0
 8000f5e:	42b2      	cmp	r2, r6
 8000f60:	d102      	bne.n	8000f68 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8000f62:	2000      	movs	r0, #0
}
 8000f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000f68:	1c6b      	adds	r3, r5, #1
 8000f6a:	d0f3      	beq.n	8000f54 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f6c:	f7ff fcc6 	bl	80008fc <HAL_GetTick>
 8000f70:	eba0 0008 	sub.w	r0, r0, r8
 8000f74:	4285      	cmp	r5, r0
 8000f76:	d301      	bcc.n	8000f7c <QSPI_WaitFlagStateUntilTimeout+0x38>
 8000f78:	2d00      	cmp	r5, #0
 8000f7a:	d1ea      	bne.n	8000f52 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8000f82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f90 <HAL_QSPI_Init>:
{
 8000f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff fcb2 	bl	80008fc <HAL_GetTick>
 8000f98:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8000f9a:	2c00      	cmp	r4, #0
 8000f9c:	d049      	beq.n	8001032 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8000f9e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d047      	beq.n	8001036 <HAL_QSPI_Init+0xa6>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8000fac:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000fb0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8000fb4:	b93a      	cbnz	r2, 8000fc6 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8000fb6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f002 f896 	bl	80030ec <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8000fc0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fc4:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8000fc6:	6820      	ldr	r0, [r4, #0]
 8000fc8:	68a1      	ldr	r1, [r4, #8]
 8000fca:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000fcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8000fce:	3901      	subs	r1, #1
 8000fd0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000fd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fd8:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000fda:	2120      	movs	r1, #32
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f7ff ffae 	bl	8000f44 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8000fe8:	b9f0      	cbnz	r0, 8001028 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8000fea:	6822      	ldr	r2, [r4, #0]
 8000fec:	6865      	ldr	r5, [r4, #4]
 8000fee:	6811      	ldr	r1, [r2, #0]
 8000ff0:	68e3      	ldr	r3, [r4, #12]
 8000ff2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ff6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8000ffa:	f021 0110 	bic.w	r1, r1, #16
 8000ffe:	430b      	orrs	r3, r1
 8001000:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001002:	69a1      	ldr	r1, [r4, #24]
 8001004:	6963      	ldr	r3, [r4, #20]
 8001006:	6855      	ldr	r5, [r2, #4]
 8001008:	430b      	orrs	r3, r1
 800100a:	6921      	ldr	r1, [r4, #16]
 800100c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001010:	490a      	ldr	r1, [pc, #40]	; (800103c <HAL_QSPI_Init+0xac>)
 8001012:	4029      	ands	r1, r5
 8001014:	430b      	orrs	r3, r1
 8001016:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001018:	6813      	ldr	r3, [r2, #0]
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8001020:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001022:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8001024:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8001028:	2300      	movs	r3, #0
 800102a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 800102e:	b003      	add	sp, #12
 8001030:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001032:	2001      	movs	r0, #1
 8001034:	e7fb      	b.n	800102e <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8001036:	2002      	movs	r0, #2
 8001038:	e7f9      	b.n	800102e <HAL_QSPI_Init+0x9e>
 800103a:	bf00      	nop
 800103c:	ffe0f8fe 	.word	0xffe0f8fe

08001040 <HAL_QSPI_DeInit>:
{
 8001040:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8001042:	4604      	mov	r4, r0
 8001044:	b1a0      	cbz	r0, 8001070 <HAL_QSPI_DeInit+0x30>
  __HAL_LOCK(hqspi);
 8001046:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800104a:	2b01      	cmp	r3, #1
 800104c:	d012      	beq.n	8001074 <HAL_QSPI_DeInit+0x34>
  __HAL_QSPI_DISABLE(hqspi);
 800104e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hqspi);
 8001050:	2301      	movs	r3, #1
 8001052:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_QSPI_DISABLE(hqspi);
 8001056:	6813      	ldr	r3, [r2, #0]
 8001058:	f023 0301 	bic.w	r3, r3, #1
 800105c:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 800105e:	f002 f87b 	bl	8003158 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001062:	2000      	movs	r0, #0
 8001064:	63e0      	str	r0, [r4, #60]	; 0x3c
  hqspi->State = HAL_QSPI_STATE_RESET;
 8001066:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 800106a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 800106e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001070:	2001      	movs	r0, #1
 8001072:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hqspi);
 8001074:	2002      	movs	r0, #2
}
 8001076:	bd10      	pop	{r4, pc}

08001078 <HAL_QSPI_Command>:
{
 8001078:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800107c:	4604      	mov	r4, r0
 800107e:	468a      	mov	sl, r1
 8001080:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8001082:	f7ff fc3b 	bl	80008fc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8001086:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800108a:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 800108c:	4680      	mov	r8, r0
  __HAL_LOCK(hqspi);
 800108e:	d035      	beq.n	80010fc <HAL_QSPI_Command+0x84>
 8001090:	2301      	movs	r3, #1
 8001092:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001096:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 800109a:	b2f6      	uxtb	r6, r6
 800109c:	429e      	cmp	r6, r3
 800109e:	f04f 0702 	mov.w	r7, #2
 80010a2:	d129      	bne.n	80010f8 <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80010a4:	2200      	movs	r2, #0
 80010a6:	63e2      	str	r2, [r4, #60]	; 0x3c
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80010a8:	4603      	mov	r3, r0
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80010aa:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80010ae:	f8cd 9000 	str.w	r9, [sp]
 80010b2:	2120      	movs	r1, #32
 80010b4:	4620      	mov	r0, r4
 80010b6:	f7ff ff45 	bl	8000f44 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80010ba:	4605      	mov	r5, r0
 80010bc:	b9a8      	cbnz	r0, 80010ea <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80010be:	4602      	mov	r2, r0
 80010c0:	4651      	mov	r1, sl
 80010c2:	4620      	mov	r0, r4
 80010c4:	f7ff fe9c 	bl	8000e00 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80010c8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80010cc:	b95b      	cbnz	r3, 80010e6 <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80010ce:	f8cd 9000 	str.w	r9, [sp]
 80010d2:	4643      	mov	r3, r8
 80010d4:	4632      	mov	r2, r6
 80010d6:	4639      	mov	r1, r7
 80010d8:	4620      	mov	r0, r4
 80010da:	f7ff ff33 	bl	8000f44 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80010de:	4605      	mov	r5, r0
 80010e0:	b918      	cbnz	r0, 80010ea <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	60df      	str	r7, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80010e6:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 80010ea:	2300      	movs	r3, #0
 80010ec:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80010f0:	4628      	mov	r0, r5
 80010f2:	b002      	add	sp, #8
 80010f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 80010f8:	463d      	mov	r5, r7
 80010fa:	e7f6      	b.n	80010ea <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 80010fc:	2502      	movs	r5, #2
 80010fe:	e7f7      	b.n	80010f0 <HAL_QSPI_Command+0x78>

08001100 <HAL_QSPI_AutoPolling>:
{
 8001100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001104:	4604      	mov	r4, r0
 8001106:	4698      	mov	r8, r3
 8001108:	4689      	mov	r9, r1
 800110a:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff fbf6 	bl	80008fc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8001110:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001114:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 8001116:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8001118:	d042      	beq.n	80011a0 <HAL_QSPI_AutoPolling+0xa0>
 800111a:	2301      	movs	r3, #1
 800111c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001120:	f894 5039 	ldrb.w	r5, [r4, #57]	; 0x39
 8001124:	b2ed      	uxtb	r5, r5
 8001126:	429d      	cmp	r5, r3
 8001128:	d138      	bne.n	800119c <HAL_QSPI_AutoPolling+0x9c>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800112a:	2342      	movs	r3, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800112c:	2200      	movs	r2, #0
 800112e:	63e2      	str	r2, [r4, #60]	; 0x3c
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001130:	f8cd 8000 	str.w	r8, [sp]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001134:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001138:	2120      	movs	r1, #32
 800113a:	4603      	mov	r3, r0
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff ff01 	bl	8000f44 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8001142:	bb28      	cbnz	r0, 8001190 <HAL_QSPI_AutoPolling+0x90>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	6832      	ldr	r2, [r6, #0]
 8001148:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800114a:	6872      	ldr	r2, [r6, #4]
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800114e:	68b2      	ldr	r2, [r6, #8]
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001152:	6819      	ldr	r1, [r3, #0]
 8001154:	6932      	ldr	r2, [r6, #16]
 8001156:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 800115a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
      cmd->NbData = cfg->StatusBytesSize;
 8001162:	68f3      	ldr	r3, [r6, #12]
 8001164:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001168:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800116c:	4649      	mov	r1, r9
 800116e:	4620      	mov	r0, r4
 8001170:	f7ff fe46 	bl	8000e00 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001174:	f8cd 8000 	str.w	r8, [sp]
 8001178:	463b      	mov	r3, r7
 800117a:	462a      	mov	r2, r5
 800117c:	2108      	movs	r1, #8
 800117e:	4620      	mov	r0, r4
 8001180:	f7ff fee0 	bl	8000f44 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8001184:	b920      	cbnz	r0, 8001190 <HAL_QSPI_AutoPolling+0x90>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	2208      	movs	r2, #8
 800118a:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800118c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8001190:	2300      	movs	r3, #0
 8001192:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8001196:	b003      	add	sp, #12
 8001198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800119c:	2002      	movs	r0, #2
 800119e:	e7f7      	b.n	8001190 <HAL_QSPI_AutoPolling+0x90>
  __HAL_LOCK(hqspi);
 80011a0:	2002      	movs	r0, #2
 80011a2:	e7f8      	b.n	8001196 <HAL_QSPI_AutoPolling+0x96>

080011a4 <HAL_QSPI_Abort>:
{
 80011a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80011a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff fba8 	bl	80008fc <HAL_GetTick>
 80011ac:	4605      	mov	r5, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80011ae:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80011b2:	f010 0002 	ands.w	r0, r0, #2
 80011b6:	d034      	beq.n	8001222 <HAL_QSPI_Abort+0x7e>
    __HAL_UNLOCK(hqspi);
 80011b8:	2300      	movs	r3, #0
 80011ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	0752      	lsls	r2, r2, #29
 80011c4:	d50b      	bpl.n	80011de <HAL_QSPI_Abort+0x3a>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80011c6:	681a      	ldr	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 80011c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80011ca:	f022 0204 	bic.w	r2, r2, #4
 80011ce:	601a      	str	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 80011d0:	f7ff fc02 	bl	80009d8 <HAL_DMA_Abort>
      if(status != HAL_OK)
 80011d4:	b118      	cbz	r0, 80011de <HAL_QSPI_Abort+0x3a>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80011d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80011de:	6822      	ldr	r2, [r4, #0]
 80011e0:	6813      	ldr	r3, [r2, #0]
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	6013      	str	r3, [r2, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80011e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	462b      	mov	r3, r5
 80011f0:	2102      	movs	r1, #2
 80011f2:	4620      	mov	r0, r4
 80011f4:	f7ff fea6 	bl	8000f44 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80011f8:	b998      	cbnz	r0, 8001222 <HAL_QSPI_Abort+0x7e>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	2202      	movs	r2, #2
 80011fe:	60da      	str	r2, [r3, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	4602      	mov	r2, r0
 8001206:	462b      	mov	r3, r5
 8001208:	2120      	movs	r1, #32
 800120a:	4620      	mov	r0, r4
 800120c:	f7ff fe9a 	bl	8000f44 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8001210:	b938      	cbnz	r0, 8001222 <HAL_QSPI_Abort+0x7e>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8001212:	6822      	ldr	r2, [r4, #0]
 8001214:	6953      	ldr	r3, [r2, #20]
 8001216:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800121a:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 800121c:	2301      	movs	r3, #1
 800121e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001222:	b003      	add	sp, #12
 8001224:	bd30      	pop	{r4, r5, pc}

08001226 <HAL_QSPI_Transmit>:
{
 8001226:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800122a:	4604      	mov	r4, r0
 800122c:	4688      	mov	r8, r1
 800122e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff fb64 	bl	80008fc <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8001234:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001238:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 800123a:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800123c:	d050      	beq.n	80012e0 <HAL_QSPI_Transmit+0xba>
 800123e:	2301      	movs	r3, #1
 8001240:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001244:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001248:	6825      	ldr	r5, [r4, #0]
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800124a:	b2c0      	uxtb	r0, r0
 800124c:	4298      	cmp	r0, r3
 800124e:	d145      	bne.n	80012dc <HAL_QSPI_Transmit+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001250:	2300      	movs	r3, #0
 8001252:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(pData != NULL )
 8001254:	f1b8 0f00 	cmp.w	r8, #0
 8001258:	d03b      	beq.n	80012d2 <HAL_QSPI_Transmit+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800125a:	2312      	movs	r3, #18
 800125c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001260:	692b      	ldr	r3, [r5, #16]
 8001262:	3301      	adds	r3, #1
 8001264:	6263      	str	r3, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001266:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8001268:	f8c4 801c 	str.w	r8, [r4, #28]
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800126c:	3301      	adds	r3, #1
 800126e:	6223      	str	r3, [r4, #32]
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001270:	696b      	ldr	r3, [r5, #20]
 8001272:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001276:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8001278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800127a:	b9b3      	cbnz	r3, 80012aa <HAL_QSPI_Transmit+0x84>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800127c:	9700      	str	r7, [sp, #0]
 800127e:	4633      	mov	r3, r6
 8001280:	2201      	movs	r2, #1
 8001282:	2102      	movs	r1, #2
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff fe5d 	bl	8000f44 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800128a:	b928      	cbnz	r0, 8001298 <HAL_QSPI_Transmit+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	2202      	movs	r2, #2
 8001290:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff ff86 	bl	80011a4 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8001298:	2301      	movs	r3, #1
 800129a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 800129e:	2300      	movs	r3, #0
 80012a0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80012a4:	b002      	add	sp, #8
 80012a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80012aa:	9700      	str	r7, [sp, #0]
 80012ac:	4633      	mov	r3, r6
 80012ae:	2201      	movs	r2, #1
 80012b0:	2104      	movs	r1, #4
 80012b2:	4620      	mov	r0, r4
 80012b4:	f7ff fe46 	bl	8000f44 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d1ed      	bne.n	8001298 <HAL_QSPI_Transmit+0x72>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80012bc:	69e3      	ldr	r3, [r4, #28]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 80012c4:	69e3      	ldr	r3, [r4, #28]
 80012c6:	3301      	adds	r3, #1
 80012c8:	61e3      	str	r3, [r4, #28]
        hqspi->TxXferCount--;
 80012ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012cc:	3b01      	subs	r3, #1
 80012ce:	6263      	str	r3, [r4, #36]	; 0x24
 80012d0:	e7d2      	b.n	8001278 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80012d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012d4:	f043 0308 	orr.w	r3, r3, #8
 80012d8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80012da:	e7e0      	b.n	800129e <HAL_QSPI_Transmit+0x78>
    status = HAL_BUSY;
 80012dc:	2002      	movs	r0, #2
 80012de:	e7de      	b.n	800129e <HAL_QSPI_Transmit+0x78>
  __HAL_LOCK(hqspi);
 80012e0:	2002      	movs	r0, #2
 80012e2:	e7df      	b.n	80012a4 <HAL_QSPI_Transmit+0x7e>

080012e4 <HAL_QSPI_Receive>:
{
 80012e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80012e8:	4604      	mov	r4, r0
 80012ea:	4617      	mov	r7, r2
 80012ec:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80012ee:	f7ff fb05 	bl	80008fc <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80012f2:	6825      	ldr	r5, [r4, #0]
 80012f4:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 80012f6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80012fa:	2b01      	cmp	r3, #1
  uint32_t tickstart = HAL_GetTick();
 80012fc:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 80012fe:	d052      	beq.n	80013a6 <HAL_QSPI_Receive+0xc2>
 8001300:	2301      	movs	r3, #1
 8001302:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001306:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 800130a:	b2c0      	uxtb	r0, r0
 800130c:	4298      	cmp	r0, r3
 800130e:	d148      	bne.n	80013a2 <HAL_QSPI_Receive+0xbe>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001310:	2300      	movs	r3, #0
 8001312:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(pData != NULL )
 8001314:	f1b8 0f00 	cmp.w	r8, #0
 8001318:	d03e      	beq.n	8001398 <HAL_QSPI_Receive+0xb4>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800131a:	2322      	movs	r3, #34	; 0x22
 800131c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001320:	692b      	ldr	r3, [r5, #16]
 8001322:	3301      	adds	r3, #1
 8001324:	6323      	str	r3, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001326:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8001328:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800132c:	3301      	adds	r3, #1
 800132e:	62e3      	str	r3, [r4, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001330:	696b      	ldr	r3, [r5, #20]
 8001332:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001336:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800133a:	616b      	str	r3, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800133c:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800133e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001340:	b9b3      	cbnz	r3, 8001370 <HAL_QSPI_Receive+0x8c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001342:	9700      	str	r7, [sp, #0]
 8001344:	4633      	mov	r3, r6
 8001346:	2201      	movs	r2, #1
 8001348:	2102      	movs	r1, #2
 800134a:	4620      	mov	r0, r4
 800134c:	f7ff fdfa 	bl	8000f44 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8001350:	b928      	cbnz	r0, 800135e <HAL_QSPI_Receive+0x7a>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001352:	6823      	ldr	r3, [r4, #0]
 8001354:	2202      	movs	r2, #2
 8001356:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8001358:	4620      	mov	r0, r4
 800135a:	f7ff ff23 	bl	80011a4 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 800135e:	2301      	movs	r3, #1
 8001360:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8001364:	2300      	movs	r3, #0
 8001366:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 800136a:	b002      	add	sp, #8
 800136c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001370:	9700      	str	r7, [sp, #0]
 8001372:	4633      	mov	r3, r6
 8001374:	2201      	movs	r2, #1
 8001376:	2106      	movs	r1, #6
 8001378:	4620      	mov	r0, r4
 800137a:	f7ff fde3 	bl	8000f44 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800137e:	2800      	cmp	r0, #0
 8001380:	d1ed      	bne.n	800135e <HAL_QSPI_Receive+0x7a>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001382:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001384:	f895 2020 	ldrb.w	r2, [r5, #32]
 8001388:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800138a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800138c:	3301      	adds	r3, #1
 800138e:	62a3      	str	r3, [r4, #40]	; 0x28
        hqspi->RxXferCount--;
 8001390:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001392:	3b01      	subs	r3, #1
 8001394:	6323      	str	r3, [r4, #48]	; 0x30
 8001396:	e7d2      	b.n	800133e <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001398:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	63e3      	str	r3, [r4, #60]	; 0x3c
 80013a0:	e7e0      	b.n	8001364 <HAL_QSPI_Receive+0x80>
    status = HAL_BUSY;
 80013a2:	2002      	movs	r0, #2
 80013a4:	e7de      	b.n	8001364 <HAL_QSPI_Receive+0x80>
  __HAL_LOCK(hqspi);
 80013a6:	2002      	movs	r0, #2
 80013a8:	e7df      	b.n	800136a <HAL_QSPI_Receive+0x86>
	...

080013ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80013ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80013ae:	4d1e      	ldr	r5, [pc, #120]	; (8001428 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80013b0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80013b2:	00da      	lsls	r2, r3, #3
{
 80013b4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80013b6:	d518      	bpl.n	80013ea <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80013b8:	f7ff fce4 	bl	8000d84 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80013c0:	d123      	bne.n	800140a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80013c2:	2c80      	cmp	r4, #128	; 0x80
 80013c4:	d929      	bls.n	800141a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80013c6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80013c8:	bf8c      	ite	hi
 80013ca:	2002      	movhi	r0, #2
 80013cc:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80013d0:	6813      	ldr	r3, [r2, #0]
 80013d2:	f023 0307 	bic.w	r3, r3, #7
 80013d6:	4303      	orrs	r3, r0
 80013d8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80013e0:	1a18      	subs	r0, r3, r0
 80013e2:	bf18      	it	ne
 80013e4:	2001      	movne	r0, #1
 80013e6:	b003      	add	sp, #12
 80013e8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	65ab      	str	r3, [r5, #88]	; 0x58
 80013f2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80013fc:	f7ff fcc2 	bl	8000d84 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001400:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001406:	65ab      	str	r3, [r5, #88]	; 0x58
 8001408:	e7d8      	b.n	80013bc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800140a:	2c80      	cmp	r4, #128	; 0x80
 800140c:	d807      	bhi.n	800141e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800140e:	d008      	beq.n	8001422 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001410:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001414:	4258      	negs	r0, r3
 8001416:	4158      	adcs	r0, r3
 8001418:	e7d9      	b.n	80013ce <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800141a:	2000      	movs	r0, #0
 800141c:	e7d7      	b.n	80013ce <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800141e:	2003      	movs	r0, #3
 8001420:	e7d5      	b.n	80013ce <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001422:	2002      	movs	r0, #2
 8001424:	e7d3      	b.n	80013ce <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	40022000 	.word	0x40022000

08001430 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001432:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001434:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001436:	f012 020c 	ands.w	r2, r2, #12
 800143a:	d005      	beq.n	8001448 <HAL_RCC_GetSysClockFreq+0x18>
 800143c:	2a0c      	cmp	r2, #12
 800143e:	d115      	bne.n	800146c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001440:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001444:	2901      	cmp	r1, #1
 8001446:	d118      	bne.n	800147a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001448:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800144a:	4820      	ldr	r0, [pc, #128]	; (80014cc <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800144c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800144e:	bf55      	itete	pl
 8001450:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001454:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001456:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800145a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800145e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001462:	b382      	cbz	r2, 80014c6 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001464:	2a0c      	cmp	r2, #12
 8001466:	d009      	beq.n	800147c <HAL_RCC_GetSysClockFreq+0x4c>
 8001468:	2000      	movs	r0, #0
  return sysclockfreq;
 800146a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800146c:	2a04      	cmp	r2, #4
 800146e:	d029      	beq.n	80014c4 <HAL_RCC_GetSysClockFreq+0x94>
 8001470:	2a08      	cmp	r2, #8
 8001472:	4817      	ldr	r0, [pc, #92]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001474:	bf18      	it	ne
 8001476:	2000      	movne	r0, #0
 8001478:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800147a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800147c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800147e:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001480:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001484:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001488:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800148a:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 800148e:	d005      	beq.n	800149c <HAL_RCC_GetSysClockFreq+0x6c>
 8001490:	2903      	cmp	r1, #3
 8001492:	d012      	beq.n	80014ba <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001494:	68d9      	ldr	r1, [r3, #12]
 8001496:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800149a:	e003      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800149c:	68d9      	ldr	r1, [r3, #12]
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014a0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80014a4:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014a6:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80014aa:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80014ae:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014b0:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80014b2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80014b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80014b8:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014ba:	68d9      	ldr	r1, [r3, #12]
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014be:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80014c2:	e7ef      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80014c6:	4770      	bx	lr
 80014c8:	40021000 	.word	0x40021000
 80014cc:	080035f4 	.word	0x080035f4
 80014d0:	007a1200 	.word	0x007a1200
 80014d4:	00f42400 	.word	0x00f42400

080014d8 <HAL_RCC_OscConfig>:
{
 80014d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80014dc:	4605      	mov	r5, r0
 80014de:	b918      	cbnz	r0, 80014e8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80014e0:	2001      	movs	r0, #1
}
 80014e2:	b003      	add	sp, #12
 80014e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e8:	4ca5      	ldr	r4, [pc, #660]	; (8001780 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ea:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ec:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ee:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014f0:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f2:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014fa:	d53c      	bpl.n	8001576 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014fc:	b11e      	cbz	r6, 8001506 <HAL_RCC_OscConfig+0x2e>
 80014fe:	2e0c      	cmp	r6, #12
 8001500:	d163      	bne.n	80015ca <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001502:	2f01      	cmp	r7, #1
 8001504:	d161      	bne.n	80015ca <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	0798      	lsls	r0, r3, #30
 800150a:	d502      	bpl.n	8001512 <HAL_RCC_OscConfig+0x3a>
 800150c:	69ab      	ldr	r3, [r5, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0e6      	beq.n	80014e0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	6a28      	ldr	r0, [r5, #32]
 8001516:	0719      	lsls	r1, r3, #28
 8001518:	bf56      	itet	pl
 800151a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800151e:	6823      	ldrmi	r3, [r4, #0]
 8001520:	091b      	lsrpl	r3, r3, #4
 8001522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001526:	4283      	cmp	r3, r0
 8001528:	d23a      	bcs.n	80015a0 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152a:	f7ff ff3f 	bl	80013ac <RCC_SetFlashLatencyFromMSIRange>
 800152e:	2800      	cmp	r0, #0
 8001530:	d1d6      	bne.n	80014e0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	6023      	str	r3, [r4, #0]
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	6a2a      	ldr	r2, [r5, #32]
 800153e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001542:	4313      	orrs	r3, r2
 8001544:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001546:	6863      	ldr	r3, [r4, #4]
 8001548:	69ea      	ldr	r2, [r5, #28]
 800154a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800154e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001552:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001554:	f7ff ff6c 	bl	8001430 <HAL_RCC_GetSysClockFreq>
 8001558:	68a3      	ldr	r3, [r4, #8]
 800155a:	4a8a      	ldr	r2, [pc, #552]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	40d8      	lsrs	r0, r3
 8001568:	4b87      	ldr	r3, [pc, #540]	; (8001788 <HAL_RCC_OscConfig+0x2b0>)
 800156a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff f98f 	bl	8000890 <HAL_InitTick>
        if(status != HAL_OK)
 8001572:	2800      	cmp	r0, #0
 8001574:	d1b5      	bne.n	80014e2 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	682b      	ldr	r3, [r5, #0]
 8001578:	07d8      	lsls	r0, r3, #31
 800157a:	d45d      	bmi.n	8001638 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157c:	682b      	ldr	r3, [r5, #0]
 800157e:	0799      	lsls	r1, r3, #30
 8001580:	f100 809c 	bmi.w	80016bc <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001584:	682b      	ldr	r3, [r5, #0]
 8001586:	0718      	lsls	r0, r3, #28
 8001588:	f100 80d0 	bmi.w	800172c <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	682b      	ldr	r3, [r5, #0]
 800158e:	0759      	lsls	r1, r3, #29
 8001590:	f100 80fc 	bmi.w	800178c <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001594:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 8165 	bne.w	8001866 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 800159c:	2000      	movs	r0, #0
 800159e:	e7a0      	b.n	80014e2 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	6023      	str	r3, [r4, #0]
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015ae:	4303      	orrs	r3, r0
 80015b0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b2:	6863      	ldr	r3, [r4, #4]
 80015b4:	69ea      	ldr	r2, [r5, #28]
 80015b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015be:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015c0:	f7ff fef4 	bl	80013ac <RCC_SetFlashLatencyFromMSIRange>
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d0c5      	beq.n	8001554 <HAL_RCC_OscConfig+0x7c>
 80015c8:	e78a      	b.n	80014e0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015ca:	69ab      	ldr	r3, [r5, #24]
 80015cc:	b31b      	cbz	r3, 8001616 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015d6:	f7ff f991 	bl	80008fc <HAL_GetTick>
 80015da:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	079a      	lsls	r2, r3, #30
 80015e0:	d511      	bpl.n	8001606 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	6023      	str	r3, [r4, #0]
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	6a2a      	ldr	r2, [r5, #32]
 80015ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015f2:	4313      	orrs	r3, r2
 80015f4:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f6:	6863      	ldr	r3, [r4, #4]
 80015f8:	69ea      	ldr	r2, [r5, #28]
 80015fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001602:	6063      	str	r3, [r4, #4]
 8001604:	e7b7      	b.n	8001576 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001606:	f7ff f979 	bl	80008fc <HAL_GetTick>
 800160a:	eba0 0008 	sub.w	r0, r0, r8
 800160e:	2802      	cmp	r0, #2
 8001610:	d9e4      	bls.n	80015dc <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8001612:	2003      	movs	r0, #3
 8001614:	e765      	b.n	80014e2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800161e:	f7ff f96d 	bl	80008fc <HAL_GetTick>
 8001622:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	079b      	lsls	r3, r3, #30
 8001628:	d5a5      	bpl.n	8001576 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800162a:	f7ff f967 	bl	80008fc <HAL_GetTick>
 800162e:	eba0 0008 	sub.w	r0, r0, r8
 8001632:	2802      	cmp	r0, #2
 8001634:	d9f6      	bls.n	8001624 <HAL_RCC_OscConfig+0x14c>
 8001636:	e7ec      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001638:	2e08      	cmp	r6, #8
 800163a:	d003      	beq.n	8001644 <HAL_RCC_OscConfig+0x16c>
 800163c:	2e0c      	cmp	r6, #12
 800163e:	d108      	bne.n	8001652 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001640:	2f03      	cmp	r7, #3
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	039a      	lsls	r2, r3, #14
 8001648:	d598      	bpl.n	800157c <HAL_RCC_OscConfig+0xa4>
 800164a:	686b      	ldr	r3, [r5, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d195      	bne.n	800157c <HAL_RCC_OscConfig+0xa4>
 8001650:	e746      	b.n	80014e0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001652:	686b      	ldr	r3, [r5, #4]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001658:	d110      	bne.n	800167c <HAL_RCC_OscConfig+0x1a4>
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001662:	f7ff f94b 	bl	80008fc <HAL_GetTick>
 8001666:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	039b      	lsls	r3, r3, #14
 800166c:	d486      	bmi.n	800157c <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166e:	f7ff f945 	bl	80008fc <HAL_GetTick>
 8001672:	eba0 0008 	sub.w	r0, r0, r8
 8001676:	2864      	cmp	r0, #100	; 0x64
 8001678:	d9f6      	bls.n	8001668 <HAL_RCC_OscConfig+0x190>
 800167a:	e7ca      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001680:	d104      	bne.n	800168c <HAL_RCC_OscConfig+0x1b4>
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001688:	6023      	str	r3, [r4, #0]
 800168a:	e7e6      	b.n	800165a <HAL_RCC_OscConfig+0x182>
 800168c:	6822      	ldr	r2, [r4, #0]
 800168e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001692:	6022      	str	r2, [r4, #0]
 8001694:	6822      	ldr	r2, [r4, #0]
 8001696:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800169a:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e0      	bne.n	8001662 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 80016a0:	f7ff f92c 	bl	80008fc <HAL_GetTick>
 80016a4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	0398      	lsls	r0, r3, #14
 80016aa:	f57f af67 	bpl.w	800157c <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ae:	f7ff f925 	bl	80008fc <HAL_GetTick>
 80016b2:	eba0 0008 	sub.w	r0, r0, r8
 80016b6:	2864      	cmp	r0, #100	; 0x64
 80016b8:	d9f5      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1ce>
 80016ba:	e7aa      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016bc:	2e04      	cmp	r6, #4
 80016be:	d003      	beq.n	80016c8 <HAL_RCC_OscConfig+0x1f0>
 80016c0:	2e0c      	cmp	r6, #12
 80016c2:	d110      	bne.n	80016e6 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80016c4:	2f02      	cmp	r7, #2
 80016c6:	d10e      	bne.n	80016e6 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	0559      	lsls	r1, r3, #21
 80016cc:	d503      	bpl.n	80016d6 <HAL_RCC_OscConfig+0x1fe>
 80016ce:	68eb      	ldr	r3, [r5, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f43f af05 	beq.w	80014e0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	6863      	ldr	r3, [r4, #4]
 80016d8:	692a      	ldr	r2, [r5, #16]
 80016da:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80016de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016e2:	6063      	str	r3, [r4, #4]
 80016e4:	e74e      	b.n	8001584 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e6:	68eb      	ldr	r3, [r5, #12]
 80016e8:	b17b      	cbz	r3, 800170a <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016f2:	f7ff f903 	bl	80008fc <HAL_GetTick>
 80016f6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	055a      	lsls	r2, r3, #21
 80016fc:	d4eb      	bmi.n	80016d6 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff f8fd 	bl	80008fc <HAL_GetTick>
 8001702:	1bc0      	subs	r0, r0, r7
 8001704:	2802      	cmp	r0, #2
 8001706:	d9f7      	bls.n	80016f8 <HAL_RCC_OscConfig+0x220>
 8001708:	e783      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001710:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001712:	f7ff f8f3 	bl	80008fc <HAL_GetTick>
 8001716:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	055b      	lsls	r3, r3, #21
 800171c:	f57f af32 	bpl.w	8001584 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff f8ec 	bl	80008fc <HAL_GetTick>
 8001724:	1bc0      	subs	r0, r0, r7
 8001726:	2802      	cmp	r0, #2
 8001728:	d9f6      	bls.n	8001718 <HAL_RCC_OscConfig+0x240>
 800172a:	e772      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800172c:	696b      	ldr	r3, [r5, #20]
 800172e:	b19b      	cbz	r3, 8001758 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001730:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800173c:	f7ff f8de 	bl	80008fc <HAL_GetTick>
 8001740:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001742:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001746:	079a      	lsls	r2, r3, #30
 8001748:	f53f af20 	bmi.w	800158c <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff f8d6 	bl	80008fc <HAL_GetTick>
 8001750:	1bc0      	subs	r0, r0, r7
 8001752:	2802      	cmp	r0, #2
 8001754:	d9f5      	bls.n	8001742 <HAL_RCC_OscConfig+0x26a>
 8001756:	e75c      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8001758:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001764:	f7ff f8ca 	bl	80008fc <HAL_GetTick>
 8001768:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800176a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800176e:	079b      	lsls	r3, r3, #30
 8001770:	f57f af0c 	bpl.w	800158c <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001774:	f7ff f8c2 	bl	80008fc <HAL_GetTick>
 8001778:	1bc0      	subs	r0, r0, r7
 800177a:	2802      	cmp	r0, #2
 800177c:	d9f5      	bls.n	800176a <HAL_RCC_OscConfig+0x292>
 800177e:	e748      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
 8001780:	40021000 	.word	0x40021000
 8001784:	080035da 	.word	0x080035da
 8001788:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800178c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800178e:	00d8      	lsls	r0, r3, #3
 8001790:	d429      	bmi.n	80017e6 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	65a3      	str	r3, [r4, #88]	; 0x58
 800179a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017a4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a8:	4f5d      	ldr	r7, [pc, #372]	; (8001920 <HAL_RCC_OscConfig+0x448>)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	05d9      	lsls	r1, r3, #23
 80017ae:	d51d      	bpl.n	80017ec <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b0:	68ab      	ldr	r3, [r5, #8]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d12b      	bne.n	800180e <HAL_RCC_OscConfig+0x336>
 80017b6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80017c2:	f7ff f89b 	bl	80008fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017ca:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80017d0:	079b      	lsls	r3, r3, #30
 80017d2:	d542      	bpl.n	800185a <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 80017d4:	f1b8 0f00 	cmp.w	r8, #0
 80017d8:	f43f aedc 	beq.w	8001594 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80017e4:	e6d6      	b.n	8001594 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 80017e6:	f04f 0800 	mov.w	r8, #0
 80017ea:	e7dd      	b.n	80017a8 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80017f4:	f7ff f882 	bl	80008fc <HAL_GetTick>
 80017f8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	05da      	lsls	r2, r3, #23
 80017fe:	d4d7      	bmi.n	80017b0 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001800:	f7ff f87c 	bl	80008fc <HAL_GetTick>
 8001804:	eba0 0009 	sub.w	r0, r0, r9
 8001808:	2802      	cmp	r0, #2
 800180a:	d9f6      	bls.n	80017fa <HAL_RCC_OscConfig+0x322>
 800180c:	e701      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800180e:	2b05      	cmp	r3, #5
 8001810:	d106      	bne.n	8001820 <HAL_RCC_OscConfig+0x348>
 8001812:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800181e:	e7ca      	b.n	80017b6 <HAL_RCC_OscConfig+0x2de>
 8001820:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800182c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001830:	f022 0204 	bic.w	r2, r2, #4
 8001834:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1c2      	bne.n	80017c2 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 800183c:	f7ff f85e 	bl	80008fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001844:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001846:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800184a:	0798      	lsls	r0, r3, #30
 800184c:	d5c2      	bpl.n	80017d4 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff f855 	bl	80008fc <HAL_GetTick>
 8001852:	1bc0      	subs	r0, r0, r7
 8001854:	4548      	cmp	r0, r9
 8001856:	d9f6      	bls.n	8001846 <HAL_RCC_OscConfig+0x36e>
 8001858:	e6db      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff f84f 	bl	80008fc <HAL_GetTick>
 800185e:	1bc0      	subs	r0, r0, r7
 8001860:	4548      	cmp	r0, r9
 8001862:	d9b3      	bls.n	80017cc <HAL_RCC_OscConfig+0x2f4>
 8001864:	e6d5      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001866:	2e0c      	cmp	r6, #12
 8001868:	f43f ae3a 	beq.w	80014e0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800186c:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001874:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001876:	d137      	bne.n	80018e8 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8001878:	f7ff f840 	bl	80008fc <HAL_GetTick>
 800187c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	0199      	lsls	r1, r3, #6
 8001882:	d42b      	bmi.n	80018dc <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001884:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001886:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001888:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800188c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800188e:	3a01      	subs	r2, #1
 8001890:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001894:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001896:	0912      	lsrs	r2, r2, #4
 8001898:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800189c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800189e:	0852      	lsrs	r2, r2, #1
 80018a0:	3a01      	subs	r2, #1
 80018a2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80018a6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80018a8:	0852      	lsrs	r2, r2, #1
 80018aa:	3a01      	subs	r2, #1
 80018ac:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80018b0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b8:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018ba:	68e3      	ldr	r3, [r4, #12]
 80018bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c0:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80018c2:	f7ff f81b 	bl	80008fc <HAL_GetTick>
 80018c6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	019a      	lsls	r2, r3, #6
 80018cc:	f53f ae66 	bmi.w	800159c <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff f814 	bl	80008fc <HAL_GetTick>
 80018d4:	1b40      	subs	r0, r0, r5
 80018d6:	2802      	cmp	r0, #2
 80018d8:	d9f6      	bls.n	80018c8 <HAL_RCC_OscConfig+0x3f0>
 80018da:	e69a      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f80e 	bl	80008fc <HAL_GetTick>
 80018e0:	1b80      	subs	r0, r0, r6
 80018e2:	2802      	cmp	r0, #2
 80018e4:	d9cb      	bls.n	800187e <HAL_RCC_OscConfig+0x3a6>
 80018e6:	e694      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018ee:	bf02      	ittt	eq
 80018f0:	68e3      	ldreq	r3, [r4, #12]
 80018f2:	f023 0303 	biceq.w	r3, r3, #3
 80018f6:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018f8:	68e3      	ldr	r3, [r4, #12]
 80018fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001904:	f7fe fffa 	bl	80008fc <HAL_GetTick>
 8001908:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	f57f ae45 	bpl.w	800159c <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7fe fff3 	bl	80008fc <HAL_GetTick>
 8001916:	1b40      	subs	r0, r0, r5
 8001918:	2802      	cmp	r0, #2
 800191a:	d9f6      	bls.n	800190a <HAL_RCC_OscConfig+0x432>
 800191c:	e679      	b.n	8001612 <HAL_RCC_OscConfig+0x13a>
 800191e:	bf00      	nop
 8001920:	40007000 	.word	0x40007000

08001924 <HAL_RCC_ClockConfig>:
{
 8001924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001928:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800192a:	4604      	mov	r4, r0
 800192c:	b910      	cbnz	r0, 8001934 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800192e:	2001      	movs	r0, #1
 8001930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4a40      	ldr	r2, [pc, #256]	; (8001a38 <HAL_RCC_ClockConfig+0x114>)
 8001936:	6813      	ldr	r3, [r2, #0]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	428b      	cmp	r3, r1
 800193e:	d329      	bcc.n	8001994 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	07d9      	lsls	r1, r3, #31
 8001944:	d431      	bmi.n	80019aa <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001946:	6821      	ldr	r1, [r4, #0]
 8001948:	078a      	lsls	r2, r1, #30
 800194a:	d45b      	bmi.n	8001a04 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194c:	4a3a      	ldr	r2, [pc, #232]	; (8001a38 <HAL_RCC_ClockConfig+0x114>)
 800194e:	6813      	ldr	r3, [r2, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	429e      	cmp	r6, r3
 8001956:	d35d      	bcc.n	8001a14 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	f011 0f04 	tst.w	r1, #4
 800195c:	4d37      	ldr	r5, [pc, #220]	; (8001a3c <HAL_RCC_ClockConfig+0x118>)
 800195e:	d164      	bne.n	8001a2a <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001960:	070b      	lsls	r3, r1, #28
 8001962:	d506      	bpl.n	8001972 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001964:	68ab      	ldr	r3, [r5, #8]
 8001966:	6922      	ldr	r2, [r4, #16]
 8001968:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800196c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001970:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001972:	f7ff fd5d 	bl	8001430 <HAL_RCC_GetSysClockFreq>
 8001976:	68ab      	ldr	r3, [r5, #8]
 8001978:	4a31      	ldr	r2, [pc, #196]	; (8001a40 <HAL_RCC_ClockConfig+0x11c>)
 800197a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800197e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	40d8      	lsrs	r0, r3
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <HAL_RCC_ClockConfig+0x120>)
 800198c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f7fe bf7e 	b.w	8000890 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001994:	6813      	ldr	r3, [r2, #0]
 8001996:	f023 0307 	bic.w	r3, r3, #7
 800199a:	430b      	orrs	r3, r1
 800199c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	6813      	ldr	r3, [r2, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4299      	cmp	r1, r3
 80019a6:	d1c2      	bne.n	800192e <HAL_RCC_ClockConfig+0xa>
 80019a8:	e7ca      	b.n	8001940 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	6862      	ldr	r2, [r4, #4]
 80019ac:	4d23      	ldr	r5, [pc, #140]	; (8001a3c <HAL_RCC_ClockConfig+0x118>)
 80019ae:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b2:	d11b      	bne.n	80019ec <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b8:	d0b9      	beq.n	800192e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019ba:	68ab      	ldr	r3, [r5, #8]
 80019bc:	f023 0303 	bic.w	r3, r3, #3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80019c4:	f7fe ff9a 	bl	80008fc <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80019cc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	68ab      	ldr	r3, [r5, #8]
 80019d0:	6862      	ldr	r2, [r4, #4]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019da:	d0b4      	beq.n	8001946 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7fe ff8e 	bl	80008fc <HAL_GetTick>
 80019e0:	1bc0      	subs	r0, r0, r7
 80019e2:	4540      	cmp	r0, r8
 80019e4:	d9f3      	bls.n	80019ce <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80019e6:	2003      	movs	r0, #3
}
 80019e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ec:	2a02      	cmp	r2, #2
 80019ee:	d102      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019f4:	e7e0      	b.n	80019b8 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019f6:	b912      	cbnz	r2, 80019fe <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019f8:	f013 0f02 	tst.w	r3, #2
 80019fc:	e7dc      	b.n	80019b8 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a02:	e7d9      	b.n	80019b8 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <HAL_RCC_ClockConfig+0x118>)
 8001a06:	68a0      	ldr	r0, [r4, #8]
 8001a08:	6893      	ldr	r3, [r2, #8]
 8001a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a0e:	4303      	orrs	r3, r0
 8001a10:	6093      	str	r3, [r2, #8]
 8001a12:	e79b      	b.n	800194c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a14:	6813      	ldr	r3, [r2, #0]
 8001a16:	f023 0307 	bic.w	r3, r3, #7
 8001a1a:	4333      	orrs	r3, r6
 8001a1c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	6813      	ldr	r3, [r2, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	429e      	cmp	r6, r3
 8001a26:	d182      	bne.n	800192e <HAL_RCC_ClockConfig+0xa>
 8001a28:	e796      	b.n	8001958 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a2a:	68ab      	ldr	r3, [r5, #8]
 8001a2c:	68e2      	ldr	r2, [r4, #12]
 8001a2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60ab      	str	r3, [r5, #8]
 8001a36:	e793      	b.n	8001960 <HAL_RCC_ClockConfig+0x3c>
 8001a38:	40022000 	.word	0x40022000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	080035da 	.word	0x080035da
 8001a44:	20000000 	.word	0x20000000

08001a48 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a4a:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a52:	5cd3      	ldrb	r3, [r2, r3]
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a56:	6810      	ldr	r0, [r2, #0]
 8001a58:	f003 031f 	and.w	r3, r3, #31
}
 8001a5c:	40d8      	lsrs	r0, r3
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000
 8001a64:	080035ea 	.word	0x080035ea
 8001a68:	20000000 	.word	0x20000000

08001a6c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a6e:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a7a:	6810      	ldr	r0, [r2, #0]
 8001a7c:	f003 031f 	and.w	r3, r3, #31
}
 8001a80:	40d8      	lsrs	r0, r3
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000
 8001a88:	080035ea 	.word	0x080035ea
 8001a8c:	20000000 	.word	0x20000000

08001a90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001a92:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <RCCEx_PLLSAI1_Config+0x118>)
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	f012 0f03 	tst.w	r2, #3
{
 8001a9a:	4605      	mov	r5, r0
 8001a9c:	460e      	mov	r6, r1
 8001a9e:	461c      	mov	r4, r3
 8001aa0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001aa2:	d02a      	beq.n	8001afa <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	f002 0203 	and.w	r2, r2, #3
 8001aaa:	4282      	cmp	r2, r0
 8001aac:	d13c      	bne.n	8001b28 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001aae:	2a00      	cmp	r2, #0
 8001ab0:	d03a      	beq.n	8001b28 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001ab2:	68db      	ldr	r3, [r3, #12]
       ||
 8001ab4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001ab6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001aba:	3301      	adds	r3, #1
       ||
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d133      	bne.n	8001b28 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ac6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac8:	f7fe ff18 	bl	80008fc <HAL_GetTick>
 8001acc:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	011a      	lsls	r2, r3, #4
 8001ad2:	d432      	bmi.n	8001b3a <RCCEx_PLLSAI1_Config+0xaa>
 8001ad4:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001ad6:	2e00      	cmp	r6, #0
 8001ad8:	d036      	beq.n	8001b48 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001ada:	2e01      	cmp	r6, #1
 8001adc:	d150      	bne.n	8001b80 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ade:	6922      	ldr	r2, [r4, #16]
 8001ae0:	6928      	ldr	r0, [r5, #16]
 8001ae2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001ae6:	0840      	lsrs	r0, r0, #1
 8001ae8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001aec:	3801      	subs	r0, #1
 8001aee:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001af2:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001af6:	6122      	str	r2, [r4, #16]
 8001af8:	e032      	b.n	8001b60 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001afa:	2802      	cmp	r0, #2
 8001afc:	d010      	beq.n	8001b20 <RCCEx_PLLSAI1_Config+0x90>
 8001afe:	2803      	cmp	r0, #3
 8001b00:	d014      	beq.n	8001b2c <RCCEx_PLLSAI1_Config+0x9c>
 8001b02:	2801      	cmp	r0, #1
 8001b04:	d110      	bne.n	8001b28 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	079f      	lsls	r7, r3, #30
 8001b0a:	d538      	bpl.n	8001b7e <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001b0c:	68e3      	ldr	r3, [r4, #12]
 8001b0e:	686a      	ldr	r2, [r5, #4]
 8001b10:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001b14:	3a01      	subs	r2, #1
 8001b16:	4318      	orrs	r0, r3
 8001b18:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001b1c:	60e0      	str	r0, [r4, #12]
 8001b1e:	e7cf      	b.n	8001ac0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001b26:	d1f1      	bne.n	8001b0c <RCCEx_PLLSAI1_Config+0x7c>
 8001b28:	2001      	movs	r0, #1
 8001b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	0391      	lsls	r1, r2, #14
 8001b30:	d4ec      	bmi.n	8001b0c <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001b38:	e7f5      	b.n	8001b26 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001b3a:	f7fe fedf 	bl	80008fc <HAL_GetTick>
 8001b3e:	1bc0      	subs	r0, r0, r7
 8001b40:	2802      	cmp	r0, #2
 8001b42:	d9c4      	bls.n	8001ace <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001b44:	2003      	movs	r0, #3
 8001b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b48:	6921      	ldr	r1, [r4, #16]
 8001b4a:	68eb      	ldr	r3, [r5, #12]
 8001b4c:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001b50:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001b54:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001b5e:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b66:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7fe fec8 	bl	80008fc <HAL_GetTick>
 8001b6c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	d513      	bpl.n	8001b9c <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001b74:	6923      	ldr	r3, [r4, #16]
 8001b76:	69aa      	ldr	r2, [r5, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	6123      	str	r3, [r4, #16]
 8001b7c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b80:	6923      	ldr	r3, [r4, #16]
 8001b82:	6968      	ldr	r0, [r5, #20]
 8001b84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001b88:	0840      	lsrs	r0, r0, #1
 8001b8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001b8e:	3801      	subs	r0, #1
 8001b90:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001b94:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001b98:	6123      	str	r3, [r4, #16]
 8001b9a:	e7e1      	b.n	8001b60 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001b9c:	f7fe feae 	bl	80008fc <HAL_GetTick>
 8001ba0:	1b80      	subs	r0, r0, r6
 8001ba2:	2802      	cmp	r0, #2
 8001ba4:	d9e3      	bls.n	8001b6e <RCCEx_PLLSAI1_Config+0xde>
 8001ba6:	e7cd      	b.n	8001b44 <RCCEx_PLLSAI1_Config+0xb4>
 8001ba8:	40021000 	.word	0x40021000

08001bac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <RCCEx_PLLSAI2_Config+0xf8>)
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	f012 0f03 	tst.w	r2, #3
{
 8001bb6:	4605      	mov	r5, r0
 8001bb8:	460e      	mov	r6, r1
 8001bba:	461c      	mov	r4, r3
 8001bbc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001bbe:	d028      	beq.n	8001c12 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	f002 0203 	and.w	r2, r2, #3
 8001bc6:	4282      	cmp	r2, r0
 8001bc8:	d13a      	bne.n	8001c40 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001bca:	2a00      	cmp	r2, #0
 8001bcc:	d038      	beq.n	8001c40 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001bce:	68db      	ldr	r3, [r3, #12]
       ||
 8001bd0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001bd2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001bd6:	3301      	adds	r3, #1
       ||
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d131      	bne.n	8001c40 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be4:	f7fe fe8a 	bl	80008fc <HAL_GetTick>
 8001be8:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	009a      	lsls	r2, r3, #2
 8001bee:	d430      	bmi.n	8001c52 <RCCEx_PLLSAI2_Config+0xa6>
 8001bf0:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001bf2:	2e00      	cmp	r6, #0
 8001bf4:	d034      	beq.n	8001c60 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001bf6:	6963      	ldr	r3, [r4, #20]
 8001bf8:	6929      	ldr	r1, [r5, #16]
 8001bfa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001bfe:	0849      	lsrs	r1, r1, #1
 8001c00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001c04:	3901      	subs	r1, #1
 8001c06:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001c0a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001c0e:	6163      	str	r3, [r4, #20]
 8001c10:	e032      	b.n	8001c78 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001c12:	2802      	cmp	r0, #2
 8001c14:	d010      	beq.n	8001c38 <RCCEx_PLLSAI2_Config+0x8c>
 8001c16:	2803      	cmp	r0, #3
 8001c18:	d014      	beq.n	8001c44 <RCCEx_PLLSAI2_Config+0x98>
 8001c1a:	2801      	cmp	r0, #1
 8001c1c:	d110      	bne.n	8001c40 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	079f      	lsls	r7, r3, #30
 8001c22:	d538      	bpl.n	8001c96 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001c24:	68e3      	ldr	r3, [r4, #12]
 8001c26:	686a      	ldr	r2, [r5, #4]
 8001c28:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001c2c:	3a01      	subs	r2, #1
 8001c2e:	4318      	orrs	r0, r3
 8001c30:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001c34:	60e0      	str	r0, [r4, #12]
 8001c36:	e7d1      	b.n	8001bdc <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001c3e:	d1f1      	bne.n	8001c24 <RCCEx_PLLSAI2_Config+0x78>
 8001c40:	2001      	movs	r0, #1
 8001c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	0391      	lsls	r1, r2, #14
 8001c48:	d4ec      	bmi.n	8001c24 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001c50:	e7f5      	b.n	8001c3e <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001c52:	f7fe fe53 	bl	80008fc <HAL_GetTick>
 8001c56:	1bc0      	subs	r0, r0, r7
 8001c58:	2802      	cmp	r0, #2
 8001c5a:	d9c6      	bls.n	8001bea <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001c60:	6962      	ldr	r2, [r4, #20]
 8001c62:	68eb      	ldr	r3, [r5, #12]
 8001c64:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001c68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c6c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001c76:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7fe fe3c 	bl	80008fc <HAL_GetTick>
 8001c84:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	d505      	bpl.n	8001c98 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001c8c:	6963      	ldr	r3, [r4, #20]
 8001c8e:	696a      	ldr	r2, [r5, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	6163      	str	r3, [r4, #20]
 8001c94:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001c98:	f7fe fe30 	bl	80008fc <HAL_GetTick>
 8001c9c:	1b80      	subs	r0, r0, r6
 8001c9e:	2802      	cmp	r0, #2
 8001ca0:	d9f1      	bls.n	8001c86 <RCCEx_PLLSAI2_Config+0xda>
 8001ca2:	e7db      	b.n	8001c5c <RCCEx_PLLSAI2_Config+0xb0>
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001ca8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cac:	6806      	ldr	r6, [r0, #0]
 8001cae:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001cb2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cb4:	d024      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001cb6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001cb8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001cbc:	d02c      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001cbe:	d802      	bhi.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001cc0:	b1c1      	cbz	r1, 8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001cc2:	2601      	movs	r6, #1
 8001cc4:	e01c      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001cc6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001cca:	d00d      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ccc:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001cd0:	d1f7      	bne.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cd2:	4a4d      	ldr	r2, [pc, #308]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001cd6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001cda:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ce4:	2600      	movs	r6, #0
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ce8:	4a47      	ldr	r2, [pc, #284]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cea:	68d3      	ldr	r3, [r2, #12]
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	60d3      	str	r3, [r2, #12]
      break;
 8001cf2:	e7ee      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cf4:	3004      	adds	r0, #4
 8001cf6:	f7ff fecb 	bl	8001a90 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cfa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	d0e8      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	04d8      	lsls	r0, r3, #19
 8001d04:	d506      	bpl.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001d06:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001d08:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001d0c:	d074      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001d0e:	d808      	bhi.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001d10:	b1a9      	cbz	r1, 8001d3e <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001d12:	2601      	movs	r6, #1
 8001d14:	4635      	mov	r5, r6
 8001d16:	e021      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d18:	2100      	movs	r1, #0
 8001d1a:	3020      	adds	r0, #32
 8001d1c:	f7ff ff46 	bl	8001bac <RCCEx_PLLSAI2_Config>
 8001d20:	e7eb      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001d22:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001d26:	d004      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001d28:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001d2c:	d1f1      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001d2e:	4635      	mov	r5, r6
 8001d30:	e009      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d32:	4a35      	ldr	r2, [pc, #212]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d34:	68d3      	ldr	r3, [r2, #12]
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3a:	60d3      	str	r3, [r2, #12]
 8001d3c:	e7f7      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d3e:	1d20      	adds	r0, r4, #4
 8001d40:	f7ff fea6 	bl	8001a90 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d44:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001d46:	2d00      	cmp	r5, #0
 8001d48:	d15c      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d4a:	4a2f      	ldr	r2, [pc, #188]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001d4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d52:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001d56:	430b      	orrs	r3, r1
 8001d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	0399      	lsls	r1, r3, #14
 8001d60:	f140 814f 	bpl.w	8002002 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d64:	4f28      	ldr	r7, [pc, #160]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d68:	00da      	lsls	r2, r3, #3
 8001d6a:	f140 8176 	bpl.w	800205a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d72:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001e0c <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001d76:	f8d9 3000 	ldr.w	r3, [r9]
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001d82:	f7fe fdbb 	bl	80008fc <HAL_GetTick>
 8001d86:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d88:	f8d9 3000 	ldr.w	r3, [r9]
 8001d8c:	05db      	lsls	r3, r3, #23
 8001d8e:	d53f      	bpl.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8001d90:	2d00      	cmp	r5, #0
 8001d92:	d144      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d98:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d9c:	d015      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001d9e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d011      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001da6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001daa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001dae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001db2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001db6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dc2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dca:	07d8      	lsls	r0, r3, #31
 8001dcc:	d509      	bpl.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8001dce:	f7fe fd95 	bl	80008fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001dd6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ddc:	0799      	lsls	r1, r3, #30
 8001dde:	f140 8109 	bpl.w	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001de6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001df4:	4635      	mov	r5, r6
 8001df6:	e012      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001df8:	2100      	movs	r1, #0
 8001dfa:	f104 0020 	add.w	r0, r4, #32
 8001dfe:	f7ff fed5 	bl	8001bac <RCCEx_PLLSAI2_Config>
 8001e02:	e79f      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001e04:	462e      	mov	r6, r5
 8001e06:	e7a9      	b.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e10:	f7fe fd74 	bl	80008fc <HAL_GetTick>
 8001e14:	eba0 000a 	sub.w	r0, r0, sl
 8001e18:	2802      	cmp	r0, #2
 8001e1a:	d9b5      	bls.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8001e1c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001e1e:	f1b8 0f00 	cmp.w	r8, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	07da      	lsls	r2, r3, #31
 8001e30:	d508      	bpl.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e32:	4990      	ldr	r1, [pc, #576]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e34:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e36:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e3a:	f022 0203 	bic.w	r2, r2, #3
 8001e3e:	4302      	orrs	r2, r0
 8001e40:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e44:	079f      	lsls	r7, r3, #30
 8001e46:	d508      	bpl.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e48:	498a      	ldr	r1, [pc, #552]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e4a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001e4c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e50:	f022 020c 	bic.w	r2, r2, #12
 8001e54:	4302      	orrs	r2, r0
 8001e56:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e5a:	075e      	lsls	r6, r3, #29
 8001e5c:	d508      	bpl.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e5e:	4985      	ldr	r1, [pc, #532]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e60:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001e62:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e66:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001e6a:	4302      	orrs	r2, r0
 8001e6c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e70:	0718      	lsls	r0, r3, #28
 8001e72:	d508      	bpl.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e74:	497f      	ldr	r1, [pc, #508]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e76:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001e78:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e7c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001e80:	4302      	orrs	r2, r0
 8001e82:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e86:	06d9      	lsls	r1, r3, #27
 8001e88:	d508      	bpl.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e8a:	497a      	ldr	r1, [pc, #488]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001e8c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001e8e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001e92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e96:	4302      	orrs	r2, r0
 8001e98:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e9c:	069a      	lsls	r2, r3, #26
 8001e9e:	d508      	bpl.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ea0:	4974      	ldr	r1, [pc, #464]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ea2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001ea4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ea8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001eac:	4302      	orrs	r2, r0
 8001eae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001eb2:	059f      	lsls	r7, r3, #22
 8001eb4:	d508      	bpl.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eb6:	496f      	ldr	r1, [pc, #444]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001eb8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001eba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ebe:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001ec2:	4302      	orrs	r2, r0
 8001ec4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ec8:	055e      	lsls	r6, r3, #21
 8001eca:	d508      	bpl.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ecc:	4969      	ldr	r1, [pc, #420]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ece:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001ed0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ed4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001ed8:	4302      	orrs	r2, r0
 8001eda:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ede:	0658      	lsls	r0, r3, #25
 8001ee0:	d508      	bpl.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ee2:	4964      	ldr	r1, [pc, #400]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001ee4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001ee6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001eea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001eee:	4302      	orrs	r2, r0
 8001ef0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ef4:	0619      	lsls	r1, r3, #24
 8001ef6:	d508      	bpl.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ef8:	495e      	ldr	r1, [pc, #376]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001efa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001efc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f00:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001f04:	4302      	orrs	r2, r0
 8001f06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f0a:	05da      	lsls	r2, r3, #23
 8001f0c:	d508      	bpl.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f0e:	4959      	ldr	r1, [pc, #356]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f12:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f16:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001f1a:	4302      	orrs	r2, r0
 8001f1c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f20:	049b      	lsls	r3, r3, #18
 8001f22:	d50f      	bpl.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f24:	4a53      	ldr	r2, [pc, #332]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f26:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001f28:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f2c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001f30:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f32:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f3a:	d164      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f3c:	68d3      	ldr	r3, [r2, #12]
 8001f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f42:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	031f      	lsls	r7, r3, #12
 8001f48:	d50f      	bpl.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f4a:	4a4a      	ldr	r2, [pc, #296]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f4c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001f4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f52:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001f56:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f58:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f60:	d15c      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f62:	68d3      	ldr	r3, [r2, #12]
 8001f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f68:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	035e      	lsls	r6, r3, #13
 8001f6e:	d50f      	bpl.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f70:	4a40      	ldr	r2, [pc, #256]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f72:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001f74:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f78:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001f7c:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f7e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f86:	d154      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f88:	68d3      	ldr	r3, [r2, #12]
 8001f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f8e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	0458      	lsls	r0, r3, #17
 8001f94:	d512      	bpl.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f96:	4937      	ldr	r1, [pc, #220]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001f98:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001f9a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f9e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001fa2:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001fa4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001fac:	d14c      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001fae:	2102      	movs	r1, #2
 8001fb0:	1d20      	adds	r0, r4, #4
 8001fb2:	f7ff fd6d 	bl	8001a90 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	bf18      	it	ne
 8001fba:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001fbc:	6822      	ldr	r2, [r4, #0]
 8001fbe:	0411      	lsls	r1, r2, #16
 8001fc0:	d508      	bpl.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001fc2:	492c      	ldr	r1, [pc, #176]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001fc4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001fc6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001fca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fce:	4303      	orrs	r3, r0
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001fd4:	03d3      	lsls	r3, r2, #15
 8001fd6:	d509      	bpl.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001fd8:	4a26      	ldr	r2, [pc, #152]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001fda:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001fde:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001fe2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fe6:	430b      	orrs	r3, r1
 8001fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001fec:	4628      	mov	r0, r5
 8001fee:	b002      	add	sp, #8
 8001ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7fe fc82 	bl	80008fc <HAL_GetTick>
 8001ff8:	1b40      	subs	r0, r0, r5
 8001ffa:	4548      	cmp	r0, r9
 8001ffc:	f67f aeec 	bls.w	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002000:	e70c      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002002:	4635      	mov	r5, r6
 8002004:	e712      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002006:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800200a:	d19b      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800200c:	2101      	movs	r1, #1
 800200e:	1d20      	adds	r0, r4, #4
 8002010:	f7ff fd3e 	bl	8001a90 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002014:	2800      	cmp	r0, #0
 8002016:	bf18      	it	ne
 8002018:	4605      	movne	r5, r0
 800201a:	e793      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800201c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002020:	d1a3      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002022:	2101      	movs	r1, #1
 8002024:	1d20      	adds	r0, r4, #4
 8002026:	f7ff fd33 	bl	8001a90 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800202a:	2800      	cmp	r0, #0
 800202c:	bf18      	it	ne
 800202e:	4605      	movne	r5, r0
 8002030:	e79b      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002032:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002036:	d1ab      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002038:	2101      	movs	r1, #1
 800203a:	1d20      	adds	r0, r4, #4
 800203c:	f7ff fd28 	bl	8001a90 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002040:	2800      	cmp	r0, #0
 8002042:	bf18      	it	ne
 8002044:	4605      	movne	r5, r0
 8002046:	e7a3      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002048:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800204c:	d1b6      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800204e:	2102      	movs	r1, #2
 8002050:	f104 0020 	add.w	r0, r4, #32
 8002054:	f7ff fdaa 	bl	8001bac <RCCEx_PLLSAI2_Config>
 8002058:	e7ad      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800205c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002060:	65bb      	str	r3, [r7, #88]	; 0x58
 8002062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800206c:	f04f 0801 	mov.w	r8, #1
 8002070:	e67f      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002078:	4a02      	ldr	r2, [pc, #8]	; (8002084 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800207a:	6813      	ldr	r3, [r2, #0]
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4770      	bx	lr
 8002084:	40021000 	.word	0x40021000

08002088 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002088:	6802      	ldr	r2, [r0, #0]
{
 800208a:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800208c:	68d3      	ldr	r3, [r2, #12]
 800208e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002092:	60d3      	str	r3, [r2, #12]
{
 8002094:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 8002096:	f7fe fc31 	bl	80008fc <HAL_GetTick>
 800209a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	069b      	lsls	r3, r3, #26
 80020a2:	d501      	bpl.n	80020a8 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80020a4:	2000      	movs	r0, #0
 80020a6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80020a8:	f7fe fc28 	bl	80008fc <HAL_GetTick>
 80020ac:	1b40      	subs	r0, r0, r5
 80020ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020b2:	d9f3      	bls.n	800209c <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80020b4:	2003      	movs	r0, #3
}
 80020b6:	bd38      	pop	{r3, r4, r5, pc}

080020b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80020b8:	b538      	push	{r3, r4, r5, lr}
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80020ba:	6803      	ldr	r3, [r0, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	0652      	lsls	r2, r2, #25
{
 80020c0:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80020c2:	d501      	bpl.n	80020c8 <RTC_EnterInitMode+0x10>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return HAL_OK;
 80020c4:	2000      	movs	r0, #0
 80020c6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80020ce:	f7fe fc15 	bl	80008fc <HAL_GetTick>
 80020d2:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	065b      	lsls	r3, r3, #25
 80020da:	d4f3      	bmi.n	80020c4 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80020dc:	f7fe fc0e 	bl	80008fc <HAL_GetTick>
 80020e0:	1b40      	subs	r0, r0, r5
 80020e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020e6:	d9f5      	bls.n	80020d4 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80020e8:	2003      	movs	r0, #3
}
 80020ea:	bd38      	pop	{r3, r4, r5, pc}

080020ec <HAL_RTC_Init>:
{
 80020ec:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 80020ee:	4604      	mov	r4, r0
 80020f0:	b1d8      	cbz	r0, 800212a <HAL_RTC_Init+0x3e>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80020f2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80020f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020fa:	b91b      	cbnz	r3, 8002104 <HAL_RTC_Init+0x18>
      hrtc->Lock = HAL_UNLOCKED;
 80020fc:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8002100:	f001 f8a4 	bl	800324c <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002104:	2302      	movs	r3, #2
 8002106:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	22ca      	movs	r2, #202	; 0xca
 800210e:	625a      	str	r2, [r3, #36]	; 0x24
 8002110:	2253      	movs	r2, #83	; 0x53
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002114:	4620      	mov	r0, r4
 8002116:	f7ff ffcf 	bl	80020b8 <RTC_EnterInitMode>
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	4605      	mov	r5, r0
 800211e:	b138      	cbz	r0, 8002130 <HAL_RTC_Init+0x44>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002120:	22ff      	movs	r2, #255	; 0xff
 8002122:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002124:	2304      	movs	r3, #4
 8002126:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  HAL_StatusTypeDef status = HAL_ERROR;
 800212a:	2501      	movs	r5, #1
}
 800212c:	4628      	mov	r0, r5
 800212e:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002130:	689a      	ldr	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002132:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002134:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800213e:	6862      	ldr	r2, [r4, #4]
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	4302      	orrs	r2, r0
 8002144:	69a0      	ldr	r0, [r4, #24]
 8002146:	4302      	orrs	r2, r0
 8002148:	430a      	orrs	r2, r1
 800214a:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800214c:	68e2      	ldr	r2, [r4, #12]
 800214e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	68a1      	ldr	r1, [r4, #8]
 8002154:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002158:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002160:	60da      	str	r2, [r3, #12]
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	069b      	lsls	r3, r3, #26
 8002166:	d405      	bmi.n	8002174 <HAL_RTC_Init+0x88>
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002168:	4620      	mov	r0, r4
 800216a:	f7ff ff8d 	bl	8002088 <HAL_RTC_WaitForSynchro>
 800216e:	b108      	cbz	r0, 8002174 <HAL_RTC_Init+0x88>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	e7d5      	b.n	8002120 <HAL_RTC_Init+0x34>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002174:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002176:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002178:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800217a:	f022 0203 	bic.w	r2, r2, #3
 800217e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002180:	69e2      	ldr	r2, [r4, #28]
 8002182:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002184:	4302      	orrs	r2, r0
 8002186:	430a      	orrs	r2, r1
 8002188:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800218a:	22ff      	movs	r2, #255	; 0xff
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 800218e:	2301      	movs	r3, #1
 8002190:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  return status;
 8002194:	e7ca      	b.n	800212c <HAL_RTC_Init+0x40>

08002196 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002196:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while(temp >= 10U)
 8002198:	2809      	cmp	r0, #9
 800219a:	d803      	bhi.n	80021a4 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    temp -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | temp);
 800219c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80021a0:	b2c0      	uxtb	r0, r0
 80021a2:	4770      	bx	lr
    temp -= 10U;
 80021a4:	380a      	subs	r0, #10
    bcdhigh++;
 80021a6:	3301      	adds	r3, #1
    temp -= 10U;
 80021a8:	b2c0      	uxtb	r0, r0
 80021aa:	e7f5      	b.n	8002198 <RTC_ByteToBcd2+0x2>

080021ac <HAL_RTC_SetDate>:
{
 80021ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 80021ae:	f890 3020 	ldrb.w	r3, [r0, #32]
 80021b2:	2b01      	cmp	r3, #1
{
 80021b4:	4605      	mov	r5, r0
 80021b6:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 80021ba:	d034      	beq.n	8002226 <HAL_RTC_SetDate+0x7a>
 80021bc:	2301      	movs	r3, #1
 80021be:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021c2:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
 80021c6:	784b      	ldrb	r3, [r1, #1]
 80021c8:	78c8      	ldrb	r0, [r1, #3]
 80021ca:	788e      	ldrb	r6, [r1, #2]
 80021cc:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021ce:	2a00      	cmp	r2, #0
 80021d0:	d14e      	bne.n	8002270 <HAL_RTC_SetDate+0xc4>
 80021d2:	06da      	lsls	r2, r3, #27
 80021d4:	d503      	bpl.n	80021de <HAL_RTC_SetDate+0x32>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021d6:	f023 0310 	bic.w	r3, r3, #16
 80021da:	330a      	adds	r3, #10
 80021dc:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80021de:	f7ff ffda 	bl	8002196 <RTC_ByteToBcd2>
 80021e2:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80021e4:	7848      	ldrb	r0, [r1, #1]
 80021e6:	f7ff ffd6 	bl	8002196 <RTC_ByteToBcd2>
 80021ea:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80021ec:	4630      	mov	r0, r6
 80021ee:	f7ff ffd2 	bl	8002196 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80021f2:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 80021f6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80021fa:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021fe:	682b      	ldr	r3, [r5, #0]
 8002200:	22ca      	movs	r2, #202	; 0xca
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
 8002204:	2253      	movs	r2, #83	; 0x53
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002208:	4628      	mov	r0, r5
 800220a:	f7ff ff55 	bl	80020b8 <RTC_EnterInitMode>
 800220e:	682b      	ldr	r3, [r5, #0]
 8002210:	4606      	mov	r6, r0
 8002212:	b150      	cbz	r0, 800222a <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002214:	22ff      	movs	r2, #255	; 0xff
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002218:	2304      	movs	r3, #4
 800221a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800221e:	2300      	movs	r3, #0
 8002220:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 8002224:	2601      	movs	r6, #1
}
 8002226:	4630      	mov	r0, r6
 8002228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800222a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800222e:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8002232:	605c      	str	r4, [r3, #4]
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800223a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	069b      	lsls	r3, r3, #26
 8002240:	d40c      	bmi.n	800225c <HAL_RTC_SetDate+0xb0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002242:	4628      	mov	r0, r5
 8002244:	f7ff ff20 	bl	8002088 <HAL_RTC_WaitForSynchro>
 8002248:	b140      	cbz	r0, 800225c <HAL_RTC_SetDate+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800224a:	682b      	ldr	r3, [r5, #0]
 800224c:	22ff      	movs	r2, #255	; 0xff
 800224e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002250:	2304      	movs	r3, #4
 8002252:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002256:	f885 6020 	strb.w	r6, [r5, #32]
 800225a:	e7e3      	b.n	8002224 <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800225c:	682b      	ldr	r3, [r5, #0]
 800225e:	22ff      	movs	r2, #255	; 0xff
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002262:	2301      	movs	r3, #1
 8002264:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002268:	2300      	movs	r3, #0
 800226a:	f885 3020 	strb.w	r3, [r5, #32]
    return HAL_OK;
 800226e:	e7da      	b.n	8002226 <HAL_RTC_SetDate+0x7a>
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002270:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002272:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002276:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002278:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 800227c:	e7bf      	b.n	80021fe <HAL_RTC_SetDate+0x52>

0800227e <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 800227e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002282:	2b01      	cmp	r3, #1
{
 8002284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002288:	4605      	mov	r5, r0
 800228a:	460e      	mov	r6, r1
 800228c:	4690      	mov	r8, r2
 800228e:	f04f 0702 	mov.w	r7, #2
  __HAL_LOCK(hrtc);
 8002292:	d017      	beq.n	80022c4 <HAL_RTC_SetTime+0x46>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002294:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002296:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800229a:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 800229c:	2401      	movs	r4, #1
 800229e:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24
 80022a4:	2253      	movs	r2, #83	; 0x53
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80022a8:	f7ff ff06 	bl	80020b8 <RTC_EnterInitMode>
 80022ac:	682b      	ldr	r3, [r5, #0]
 80022ae:	4607      	mov	r7, r0
 80022b0:	b158      	cbz	r0, 80022ca <HAL_RTC_SetTime+0x4c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022b2:	22ff      	movs	r2, #255	; 0xff
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80022b6:	2304      	movs	r3, #4
 80022b8:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 80022bc:	2300      	movs	r3, #0
 80022be:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 80022c2:	2701      	movs	r7, #1
}
 80022c4:	4638      	mov	r0, r7
 80022c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022ca:	7830      	ldrb	r0, [r6, #0]
 80022cc:	7874      	ldrb	r4, [r6, #1]
 80022ce:	78b1      	ldrb	r1, [r6, #2]
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022d0:	689b      	ldr	r3, [r3, #8]
    if(Format == RTC_FORMAT_BIN)
 80022d2:	f1b8 0f00 	cmp.w	r8, #0
 80022d6:	d138      	bne.n	800234a <HAL_RTC_SetTime+0xcc>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022d8:	065a      	lsls	r2, r3, #25
        sTime->TimeFormat = 0x00U;
 80022da:	bf58      	it	pl
 80022dc:	70f7      	strbpl	r7, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80022de:	f7ff ff5a 	bl	8002196 <RTC_ByteToBcd2>
 80022e2:	4602      	mov	r2, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80022e4:	4620      	mov	r0, r4
 80022e6:	f7ff ff56 	bl	8002196 <RTC_ByteToBcd2>
 80022ea:	4604      	mov	r4, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos ) | \
 80022ec:	4608      	mov	r0, r1
 80022ee:	f7ff ff52 	bl	8002196 <RTC_ByteToBcd2>
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80022f2:	78f3      	ldrb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80022f4:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 80022f8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80022fc:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 8002306:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 800230a:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800230c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800230e:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002314:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002316:	68f2      	ldr	r2, [r6, #12]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	4302      	orrs	r2, r0
 800231c:	430a      	orrs	r2, r1
 800231e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002326:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002328:	689c      	ldr	r4, [r3, #8]
 800232a:	f014 0420 	ands.w	r4, r4, #32
 800232e:	d118      	bne.n	8002362 <HAL_RTC_SetTime+0xe4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002330:	4628      	mov	r0, r5
 8002332:	f7ff fea9 	bl	8002088 <HAL_RTC_WaitForSynchro>
 8002336:	b1a0      	cbz	r0, 8002362 <HAL_RTC_SetTime+0xe4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002338:	682b      	ldr	r3, [r5, #0]
 800233a:	22ff      	movs	r2, #255	; 0xff
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800233e:	2304      	movs	r3, #4
 8002340:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002344:	f885 4020 	strb.w	r4, [r5, #32]
 8002348:	e7bb      	b.n	80022c2 <HAL_RTC_SetTime+0x44>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800234a:	065b      	lsls	r3, r3, #25
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800234c:	ea4f 2404 	mov.w	r4, r4, lsl #8
        sTime->TimeFormat = 0x00U;
 8002350:	bf58      	it	pl
 8002352:	70f7      	strbpl	r7, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002354:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002358:	78f4      	ldrb	r4, [r6, #3]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800235a:	4308      	orrs	r0, r1
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800235c:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8002360:	e7ce      	b.n	8002300 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002362:	682b      	ldr	r3, [r5, #0]
 8002364:	22ff      	movs	r2, #255	; 0xff
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002368:	2301      	movs	r3, #1
 800236a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   __HAL_UNLOCK(hrtc);
 800236e:	2300      	movs	r3, #0
 8002370:	f885 3020 	strb.w	r3, [r5, #32]
   return HAL_OK;
 8002374:	e7a6      	b.n	80022c4 <HAL_RTC_SetTime+0x46>

08002376 <HAL_RTCEx_TimeStampEventCallback>:
 8002376:	4770      	bx	lr

08002378 <HAL_RTCEx_SetWakeUpTimer_IT>:
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002378:	f890 3020 	ldrb.w	r3, [r0, #32]
 800237c:	2b01      	cmp	r3, #1
{
 800237e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002382:	4604      	mov	r4, r0
 8002384:	460e      	mov	r6, r1
 8002386:	4615      	mov	r5, r2
 8002388:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800238c:	d03d      	beq.n	800240a <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
 800238e:	2301      	movs	r3, #1
 8002390:	f884 3020 	strb.w	r3, [r4, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002394:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002396:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800239a:	22ca      	movs	r2, #202	; 0xca
 800239c:	625a      	str	r2, [r3, #36]	; 0x24
 800239e:	2253      	movs	r2, #83	; 0x53
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	055a      	lsls	r2, r3, #21
 80023a6:	d432      	bmi.n	800240e <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
       return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80023a8:	6822      	ldr	r2, [r4, #0]
 80023aa:	6893      	ldr	r3, [r2, #8]
 80023ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023b0:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80023b2:	68d3      	ldr	r3, [r2, #12]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f463 6390 	orn	r3, r3, #1152	; 0x480
 80023ba:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80023bc:	f7fe fa9e 	bl	80008fc <HAL_GetTick>
 80023c0:	4680      	mov	r8, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	68df      	ldr	r7, [r3, #12]
 80023c6:	f017 0704 	ands.w	r7, r7, #4
 80023ca:	d038      	beq.n	800243e <HAL_RTCEx_SetWakeUpTimer_IT+0xc6>
#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t) (WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
/* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80023cc:	615e      	str	r6, [r3, #20]
#endif

  /* Clear the Wakeup Timer clock source bits and configure the clock source in CR register */
  {
    uint32_t CR_tmp = hrtc->Instance->CR;
 80023ce:	689a      	ldr	r2, [r3, #8]
    CR_tmp &= (uint32_t)~RTC_CR_WUCKSEL;
 80023d0:	f022 0207 	bic.w	r2, r2, #7
    CR_tmp |= (uint32_t)WakeUpClock;
 80023d4:	432a      	orrs	r2, r5
    hrtc->Instance->CR = CR_tmp;
 80023d6:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 80023d8:	4a21      	ldr	r2, [pc, #132]	; (8002460 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
 80023da:	6851      	ldr	r1, [r2, #4]
 80023dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80023e0:	6051      	str	r1, [r2, #4]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80023e2:	6891      	ldr	r1, [r2, #8]
 80023e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80023e8:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023f0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023f8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023fa:	22ff      	movs	r2, #255	; 0xff
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023fe:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 8002400:	2301      	movs	r3, #1
 8002402:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 8002406:	f884 0020 	strb.w	r0, [r4, #32]

  return HAL_OK;
}
 800240a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 800240e:	f7fe fa75 	bl	80008fc <HAL_GetTick>
 8002412:	4607      	mov	r7, r0
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	075b      	lsls	r3, r3, #29
 800241a:	d5c5      	bpl.n	80023a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800241c:	f7fe fa6e 	bl	80008fc <HAL_GetTick>
 8002420:	1bc0      	subs	r0, r0, r7
 8002422:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002426:	d9f5      	bls.n	8002414 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	22ff      	movs	r2, #255	; 0xff
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800242e:	2003      	movs	r0, #3
       __HAL_UNLOCK(hrtc);
 8002430:	2300      	movs	r3, #0
       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002432:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
       __HAL_UNLOCK(hrtc);
 8002436:	f884 3020 	strb.w	r3, [r4, #32]
       return HAL_TIMEOUT;
 800243a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800243e:	f7fe fa5d 	bl	80008fc <HAL_GetTick>
 8002442:	eba0 0008 	sub.w	r0, r0, r8
 8002446:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800244a:	d9ba      	bls.n	80023c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002450:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002454:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      __HAL_UNLOCK(hrtc);
 8002458:	f884 7020 	strb.w	r7, [r4, #32]
      return HAL_TIMEOUT;
 800245c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002460:	40010400 	.word	0x40010400

08002464 <HAL_RTCEx_WakeUpTimerEventCallback>:
 8002464:	4770      	bx	lr
	...

08002468 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 800246a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
{
 800246e:	b510      	push	{r4, lr}
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002470:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002472:	6802      	ldr	r2, [r0, #0]
 8002474:	68d3      	ldr	r3, [r2, #12]
 8002476:	055b      	lsls	r3, r3, #21
{
 8002478:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800247a:	d506      	bpl.n	800248a <HAL_RTCEx_WakeUpTimerIRQHandler+0x22>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800247c:	68d3      	ldr	r3, [r2, #12]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002484:	60d3      	str	r3, [r2, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002486:	f7ff ffed 	bl	8002464 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800248a:	2301      	movs	r3, #1
 800248c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8002490:	bd10      	pop	{r4, pc}
 8002492:	bf00      	nop
 8002494:	40010400 	.word	0x40010400

08002498 <HAL_RTCEx_SetTamper_IT>:
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002498:	f890 3020 	ldrb.w	r3, [r0, #32]
 800249c:	2b01      	cmp	r3, #1
{
 800249e:	b530      	push	{r4, r5, lr}
 80024a0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 80024a4:	d060      	beq.n	8002568 <HAL_RTCEx_SetTamper_IT+0xd0>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024a6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Configure the tamper trigger */
  if(sTamper->Trigger != RTC_TAMPERTRIGGER_RISINGEDGE)
 80024aa:	688b      	ldr	r3, [r1, #8]
  __HAL_LOCK(hrtc);
 80024ac:	2201      	movs	r2, #1
 80024ae:	f880 2020 	strb.w	r2, [r0, #32]
 80024b2:	680a      	ldr	r2, [r1, #0]
  if(sTamper->Trigger != RTC_TAMPERTRIGGER_RISINGEDGE)
 80024b4:	b10b      	cbz	r3, 80024ba <HAL_RTCEx_SetTamper_IT+0x22>
  {
    sTamper->Trigger = (uint32_t)(sTamper->Tamper << 1);
 80024b6:	0053      	lsls	r3, r2, #1
 80024b8:	608b      	str	r3, [r1, #8]
  }

  if(sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 80024ba:	68cb      	ldr	r3, [r1, #12]
 80024bc:	b193      	cbz	r3, 80024e4 <HAL_RTCEx_SetTamper_IT+0x4c>
  {
    sTamper->NoErase = 0;
 80024be:	2300      	movs	r3, #0
#if defined(RTC_TAMPER1_SUPPORT)
    if((sTamper->Tamper & RTC_TAMPER_1) != 0)
 80024c0:	07d5      	lsls	r5, r2, #31
    sTamper->NoErase = 0;
 80024c2:	60cb      	str	r3, [r1, #12]
    {
      sTamper->NoErase |= RTC_TAMPCR_TAMP1NOERASE;
 80024c4:	bf44      	itt	mi
 80024c6:	f44f 3300 	movmi.w	r3, #131072	; 0x20000
 80024ca:	60cb      	strmi	r3, [r1, #12]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if((sTamper->Tamper & RTC_TAMPER_2) != 0)
 80024cc:	0714      	lsls	r4, r2, #28
    {
      sTamper->NoErase |= RTC_TAMPCR_TAMP2NOERASE;
 80024ce:	bf42      	ittt	mi
 80024d0:	68cb      	ldrmi	r3, [r1, #12]
 80024d2:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
 80024d6:	60cb      	strmi	r3, [r1, #12]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if((sTamper->Tamper & RTC_TAMPER_3) != 0)
 80024d8:	0693      	lsls	r3, r2, #26
    {
      sTamper->NoErase |= RTC_TAMPCR_TAMP3NOERASE;
 80024da:	bf42      	ittt	mi
 80024dc:	68cb      	ldrmi	r3, [r1, #12]
 80024de:	f443 0300 	orrmi.w	r3, r3, #8388608	; 0x800000
 80024e2:	60cb      	strmi	r3, [r1, #12]
    }
#endif /* RTC_TAMPER3_SUPPORT */
  }

  if(sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 80024e4:	690b      	ldr	r3, [r1, #16]
 80024e6:	b193      	cbz	r3, 800250e <HAL_RTCEx_SetTamper_IT+0x76>
  {
    sTamper->MaskFlag = 0;
 80024e8:	2300      	movs	r3, #0
#if defined(RTC_TAMPER1_SUPPORT)
    if((sTamper->Tamper & RTC_TAMPER_1) != 0)
 80024ea:	07d5      	lsls	r5, r2, #31
    sTamper->MaskFlag = 0;
 80024ec:	610b      	str	r3, [r1, #16]
    {
      sTamper->MaskFlag |= RTC_TAMPCR_TAMP1MF;
 80024ee:	bf44      	itt	mi
 80024f0:	f44f 2380 	movmi.w	r3, #262144	; 0x40000
 80024f4:	610b      	strmi	r3, [r1, #16]
    }
#endif /* RTC_TAMPER1_SUPPORT */
    if((sTamper->Tamper & RTC_TAMPER_2) != 0)
 80024f6:	0714      	lsls	r4, r2, #28
    {
      sTamper->MaskFlag |= RTC_TAMPCR_TAMP2MF;
 80024f8:	bf42      	ittt	mi
 80024fa:	690b      	ldrmi	r3, [r1, #16]
 80024fc:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8002500:	610b      	strmi	r3, [r1, #16]
    }
#if defined(RTC_TAMPER3_SUPPORT)
    if((sTamper->Tamper & RTC_TAMPER_3) != 0)
 8002502:	0693      	lsls	r3, r2, #26
    {
      sTamper->MaskFlag |= RTC_TAMPCR_TAMP3MF;
 8002504:	bf42      	ittt	mi
 8002506:	690b      	ldrmi	r3, [r1, #16]
 8002508:	f043 7380 	orrmi.w	r3, r3, #16777216	; 0x1000000
 800250c:	610b      	strmi	r3, [r1, #16]
    }
#endif /* RTC_TAMPER3_SUPPORT */
  }

  tmpreg = ((uint32_t)sTamper->Tamper | (uint32_t)sTamper->Interrupt | (uint32_t)sTamper->Trigger  | (uint32_t)sTamper->NoErase |\
 800250e:	684b      	ldr	r3, [r1, #4]
 8002510:	688c      	ldr	r4, [r1, #8]
 8002512:	4313      	orrs	r3, r2
 8002514:	4323      	orrs	r3, r4
 8002516:	68cc      	ldr	r4, [r1, #12]
 8002518:	4323      	orrs	r3, r4
 800251a:	690c      	ldr	r4, [r1, #16]
 800251c:	4323      	orrs	r3, r4
            (uint32_t)sTamper->MaskFlag | (uint32_t)sTamper->Filter | (uint32_t)sTamper->SamplingFrequency |\
 800251e:	694c      	ldr	r4, [r1, #20]
 8002520:	4323      	orrs	r3, r4
 8002522:	698c      	ldr	r4, [r1, #24]
 8002524:	4323      	orrs	r3, r4
 8002526:	69cc      	ldr	r4, [r1, #28]
 8002528:	4323      	orrs	r3, r4
            (uint32_t)sTamper->PrechargeDuration | (uint32_t)sTamper->TamperPullUp | sTamper->TimeStampOnTamperDetection);
 800252a:	6a0c      	ldr	r4, [r1, #32]
  tmpreg = ((uint32_t)sTamper->Tamper | (uint32_t)sTamper->Interrupt | (uint32_t)sTamper->Trigger  | (uint32_t)sTamper->NoErase |\
 800252c:	6a49      	ldr	r1, [r1, #36]	; 0x24
            (uint32_t)sTamper->PrechargeDuration | (uint32_t)sTamper->TamperPullUp | sTamper->TimeStampOnTamperDetection);
 800252e:	4323      	orrs	r3, r4
  tmpreg = ((uint32_t)sTamper->Tamper | (uint32_t)sTamper->Interrupt | (uint32_t)sTamper->Trigger  | (uint32_t)sTamper->NoErase |\
 8002530:	430b      	orrs	r3, r1

  hrtc->Instance->TAMPCR &= (uint32_t)~((uint32_t)sTamper->Tamper | (uint32_t)(sTamper->Tamper << 1) | RTC_TAMPCR_MASK);
 8002532:	6804      	ldr	r4, [r0, #0]
 8002534:	490d      	ldr	r1, [pc, #52]	; (800256c <HAL_RTCEx_SetTamper_IT+0xd4>)
 8002536:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002538:	4311      	orrs	r1, r2
 800253a:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
 800253e:	ea25 0202 	bic.w	r2, r5, r2
 8002542:	6422      	str	r2, [r4, #64]	; 0x40

  hrtc->Instance->TAMPCR |= tmpreg;
 8002544:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002546:	4313      	orrs	r3, r2
 8002548:	6423      	str	r3, [r4, #64]	; 0x40

  /* RTC Tamper Interrupt Configuration: EXTI configuration */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RTCEx_SetTamper_IT+0xd8>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002552:	601a      	str	r2, [r3, #0]
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800255a:	609a      	str	r2, [r3, #8]

  hrtc->State = HAL_RTC_STATE_READY;
 800255c:	2301      	movs	r3, #1
 800255e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002562:	2300      	movs	r3, #0
 8002564:	f880 3020 	strb.w	r3, [r0, #32]
  __HAL_LOCK(hrtc);
 8002568:	4618      	mov	r0, r3

  return HAL_OK;
}
 800256a:	bd30      	pop	{r4, r5, pc}
 800256c:	01ffff84 	.word	0x01ffff84
 8002570:	40010400 	.word	0x40010400

08002574 <HAL_RTCEx_Tamper1EventCallback>:
 8002574:	4770      	bx	lr

08002576 <HAL_RTCEx_Tamper2EventCallback>:
 8002576:	4770      	bx	lr

08002578 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8002578:	4770      	bx	lr
	...

0800257c <HAL_RTCEx_TamperTimeStampIRQHandler>:
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RTCEx_TamperTimeStampIRQHandler+0xa0>)
 800257e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
 8002582:	b510      	push	{r4, lr}
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 8002584:	615a      	str	r2, [r3, #20]
  if(__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 8002586:	6803      	ldr	r3, [r0, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	0412      	lsls	r2, r2, #16
{
 800258c:	4604      	mov	r4, r0
  if(__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 800258e:	d50a      	bpl.n	80025a6 <HAL_RTCEx_TamperTimeStampIRQHandler+0x2a>
    if(__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != 0U)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	051b      	lsls	r3, r3, #20
 8002594:	d507      	bpl.n	80025a6 <HAL_RTCEx_TamperTimeStampIRQHandler+0x2a>
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 8002596:	f7ff feee 	bl	8002376 <HAL_RTCEx_TimeStampEventCallback>
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800259a:	6822      	ldr	r2, [r4, #0]
 800259c:	68d3      	ldr	r3, [r2, #12]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f463 6308 	orn	r3, r3, #2176	; 0x880
 80025a4:	60d3      	str	r3, [r2, #12]
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP1) != 0U)
 80025a6:	6822      	ldr	r2, [r4, #0]
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HAL_RTCEx_TamperTimeStampIRQHandler+0xa4>)
 80025aa:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80025ac:	400b      	ands	r3, r1
 80025ae:	b153      	cbz	r3, 80025c6 <HAL_RTCEx_TamperTimeStampIRQHandler+0x4a>
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != 0U)
 80025b0:	68d3      	ldr	r3, [r2, #12]
 80025b2:	0498      	lsls	r0, r3, #18
 80025b4:	d507      	bpl.n	80025c6 <HAL_RTCEx_TamperTimeStampIRQHandler+0x4a>
    __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 80025b6:	68d3      	ldr	r3, [r2, #12]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f463 5302 	orn	r3, r3, #8320	; 0x2080
 80025be:	60d3      	str	r3, [r2, #12]
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 80025c0:	4620      	mov	r0, r4
 80025c2:	f7ff ffd7 	bl	8002574 <HAL_RTCEx_Tamper1EventCallback>
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP2) != 0U)
 80025c6:	6822      	ldr	r2, [r4, #0]
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <HAL_RTCEx_TamperTimeStampIRQHandler+0xa8>)
 80025ca:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80025cc:	400b      	ands	r3, r1
 80025ce:	b153      	cbz	r3, 80025e6 <HAL_RTCEx_TamperTimeStampIRQHandler+0x6a>
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != 0U)
 80025d0:	68d3      	ldr	r3, [r2, #12]
 80025d2:	0459      	lsls	r1, r3, #17
 80025d4:	d507      	bpl.n	80025e6 <HAL_RTCEx_TamperTimeStampIRQHandler+0x6a>
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 80025d6:	68d3      	ldr	r3, [r2, #12]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f463 4381 	orn	r3, r3, #16512	; 0x4080
 80025de:	60d3      	str	r3, [r2, #12]
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff ffc8 	bl	8002576 <HAL_RTCEx_Tamper2EventCallback>
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP3) != 0U)
 80025e6:	6822      	ldr	r2, [r4, #0]
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_RTCEx_TamperTimeStampIRQHandler+0xac>)
 80025ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80025ec:	400b      	ands	r3, r1
 80025ee:	b183      	cbz	r3, 8002612 <HAL_RTCEx_TamperTimeStampIRQHandler+0x96>
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F) != 0U)
 80025f0:	68d3      	ldr	r3, [r2, #12]
 80025f2:	041b      	lsls	r3, r3, #16
 80025f4:	d50d      	bpl.n	8002612 <HAL_RTCEx_TamperTimeStampIRQHandler+0x96>
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);
 80025f6:	68d3      	ldr	r3, [r2, #12]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002602:	f443 43fe 	orr.w	r3, r3, #32512	; 0x7f00
 8002606:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 800260a:	60d3      	str	r3, [r2, #12]
      HAL_RTCEx_Tamper3EventCallback(hrtc);
 800260c:	4620      	mov	r0, r4
 800260e:	f7ff ffb3 	bl	8002578 <HAL_RTCEx_Tamper3EventCallback>
  hrtc->State = HAL_RTC_STATE_READY;
 8002612:	2301      	movs	r3, #1
 8002614:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8002618:	bd10      	pop	{r4, pc}
 800261a:	bf00      	nop
 800261c:	40010400 	.word	0x40010400
 8002620:	00010004 	.word	0x00010004
 8002624:	00080004 	.word	0x00080004
 8002628:	00400004 	.word	0x00400004

0800262c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800262c:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800262e:	4604      	mov	r4, r0
 8002630:	2800      	cmp	r0, #0
 8002632:	d04a      	beq.n	80026ca <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002638:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800263c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002640:	b91b      	cbnz	r3, 800264a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002642:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002646:	f000 fe4b 	bl	80032e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800264a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800264c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800264e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002652:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002654:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800265a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800265e:	600b      	str	r3, [r1, #0]
 8002660:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002664:	d92e      	bls.n	80026c4 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002666:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002668:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800266c:	bf18      	it	ne
 800266e:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002670:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002672:	b92b      	cbnz	r3, 8002680 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002674:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002678:	bf8c      	ite	hi
 800267a:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800267c:	2301      	movls	r3, #1
 800267e:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002680:	68a6      	ldr	r6, [r4, #8]
 8002682:	6863      	ldr	r3, [r4, #4]
 8002684:	69a5      	ldr	r5, [r4, #24]
 8002686:	4333      	orrs	r3, r6
 8002688:	6926      	ldr	r6, [r4, #16]
 800268a:	4333      	orrs	r3, r6
 800268c:	6966      	ldr	r6, [r4, #20]
 800268e:	4333      	orrs	r3, r6
 8002690:	69e6      	ldr	r6, [r4, #28]
 8002692:	4333      	orrs	r3, r6
 8002694:	6a26      	ldr	r6, [r4, #32]
 8002696:	4333      	orrs	r3, r6
 8002698:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800269a:	4333      	orrs	r3, r6
 800269c:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80026a0:	4333      	orrs	r3, r6
 80026a2:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80026a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026a6:	431a      	orrs	r2, r3
 80026a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026aa:	0c2d      	lsrs	r5, r5, #16
 80026ac:	431a      	orrs	r2, r3
 80026ae:	f005 0504 	and.w	r5, r5, #4
 80026b2:	432a      	orrs	r2, r5
 80026b4:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 80026b6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026b8:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80026ba:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026bc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80026be:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80026c8:	e7d0      	b.n	800266c <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80026ca:	2001      	movs	r0, #1
}
 80026cc:	bd70      	pop	{r4, r5, r6, pc}

080026ce <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ce:	6803      	ldr	r3, [r0, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026e0:	2320      	movs	r3, #32
 80026e2:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	6603      	str	r3, [r0, #96]	; 0x60
 80026ea:	4770      	bx	lr

080026ec <HAL_UART_TxCpltCallback>:
 80026ec:	4770      	bx	lr

080026ee <HAL_UART_ErrorCallback>:
 80026ee:	4770      	bx	lr

080026f0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026f0:	6803      	ldr	r3, [r0, #0]
 80026f2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026f4:	6819      	ldr	r1, [r3, #0]
{
 80026f6:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80026f8:	0716      	lsls	r6, r2, #28
{
 80026fa:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026fc:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 80026fe:	d10a      	bne.n	8002716 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8002700:	0696      	lsls	r6, r2, #26
 8002702:	d564      	bpl.n	80027ce <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002704:	068e      	lsls	r6, r1, #26
 8002706:	d562      	bpl.n	80027ce <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8002708:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8083 	beq.w	8002816 <HAL_UART_IRQHandler+0x126>
}
 8002710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8002714:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != RESET)
 8002716:	f015 0001 	ands.w	r0, r5, #1
 800271a:	d102      	bne.n	8002722 <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800271c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002720:	d055      	beq.n	80027ce <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002722:	07d5      	lsls	r5, r2, #31
 8002724:	d507      	bpl.n	8002736 <HAL_UART_IRQHandler+0x46>
 8002726:	05ce      	lsls	r6, r1, #23
 8002728:	d505      	bpl.n	8002736 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800272a:	2501      	movs	r5, #1
 800272c:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800272e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002730:	f045 0501 	orr.w	r5, r5, #1
 8002734:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002736:	0795      	lsls	r5, r2, #30
 8002738:	d506      	bpl.n	8002748 <HAL_UART_IRQHandler+0x58>
 800273a:	b128      	cbz	r0, 8002748 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800273c:	2502      	movs	r5, #2
 800273e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002740:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002742:	f045 0504 	orr.w	r5, r5, #4
 8002746:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002748:	0756      	lsls	r6, r2, #29
 800274a:	d506      	bpl.n	800275a <HAL_UART_IRQHandler+0x6a>
 800274c:	b128      	cbz	r0, 800275a <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800274e:	2504      	movs	r5, #4
 8002750:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002752:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8002754:	f045 0502 	orr.w	r5, r5, #2
 8002758:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 800275a:	0715      	lsls	r5, r2, #28
 800275c:	d507      	bpl.n	800276e <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 800275e:	068e      	lsls	r6, r1, #26
 8002760:	d400      	bmi.n	8002764 <HAL_UART_IRQHandler+0x74>
 8002762:	b120      	cbz	r0, 800276e <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002764:	2008      	movs	r0, #8
 8002766:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002768:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800276a:	4303      	orrs	r3, r0
 800276c:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800276e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002770:	2b00      	cmp	r3, #0
 8002772:	d050      	beq.n	8002816 <HAL_UART_IRQHandler+0x126>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8002774:	0695      	lsls	r5, r2, #26
 8002776:	d505      	bpl.n	8002784 <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002778:	0688      	lsls	r0, r1, #26
 800277a:	d503      	bpl.n	8002784 <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 800277c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800277e:	b10b      	cbz	r3, 8002784 <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 8002780:	4620      	mov	r0, r4
 8002782:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002784:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002786:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8002788:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800278a:	d404      	bmi.n	8002796 <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002790:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002794:	d017      	beq.n	80027c6 <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 8002796:	f7ff ff9a 	bl	80026ce <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	0652      	lsls	r2, r2, #25
 80027a0:	d50d      	bpl.n	80027be <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a2:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80027a4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027aa:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80027ac:	b138      	cbz	r0, 80027be <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <HAL_UART_IRQHandler+0x128>)
 80027b0:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027b2:	f7fe f92c 	bl	8000a0e <HAL_DMA_Abort_IT>
 80027b6:	b370      	cbz	r0, 8002816 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027b8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80027ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80027bc:	e7a8      	b.n	8002710 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff ff95 	bl	80026ee <HAL_UART_ErrorCallback>
 80027c4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80027c6:	f7ff ff92 	bl	80026ee <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ca:	6765      	str	r5, [r4, #116]	; 0x74
 80027cc:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80027ce:	02d6      	lsls	r6, r2, #11
 80027d0:	d509      	bpl.n	80027e6 <HAL_UART_IRQHandler+0xf6>
 80027d2:	0268      	lsls	r0, r5, #9
 80027d4:	d507      	bpl.n	80027e6 <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80027d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80027da:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80027dc:	621a      	str	r2, [r3, #32]
}
 80027de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80027e2:	f000 bafd 	b.w	8002de0 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != RESET)
 80027e6:	0616      	lsls	r6, r2, #24
 80027e8:	d505      	bpl.n	80027f6 <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027ea:	060d      	lsls	r5, r1, #24
 80027ec:	d503      	bpl.n	80027f6 <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 80027ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027f0:	b18b      	cbz	r3, 8002816 <HAL_UART_IRQHandler+0x126>
      huart->TxISR(huart);
 80027f2:	4620      	mov	r0, r4
 80027f4:	e78c      	b.n	8002710 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027f6:	0650      	lsls	r0, r2, #25
 80027f8:	d50d      	bpl.n	8002816 <HAL_UART_IRQHandler+0x126>
 80027fa:	064a      	lsls	r2, r1, #25
 80027fc:	d50b      	bpl.n	8002816 <HAL_UART_IRQHandler+0x126>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002804:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002806:	2320      	movs	r3, #32
 8002808:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800280c:	2300      	movs	r3, #0
 800280e:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff ff6b 	bl	80026ec <HAL_UART_TxCpltCallback>
 8002816:	bd70      	pop	{r4, r5, r6, pc}
 8002818:	0800281d 	.word	0x0800281d

0800281c <UART_DMAAbortOnError>:
{
 800281c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800281e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002826:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800282a:	f7ff ff60 	bl	80026ee <HAL_UART_ErrorCallback>
 800282e:	bd08      	pop	{r3, pc}

08002830 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8002830:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002832:	69c1      	ldr	r1, [r0, #28]
{
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002838:	6883      	ldr	r3, [r0, #8]
 800283a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800283c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800283e:	4303      	orrs	r3, r0
 8002840:	6960      	ldr	r0, [r4, #20]
 8002842:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002844:	48ba      	ldr	r0, [pc, #744]	; (8002b30 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002846:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002848:	4028      	ands	r0, r5
 800284a:	4303      	orrs	r3, r0
 800284c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800284e:	6853      	ldr	r3, [r2, #4]
 8002850:	68e0      	ldr	r0, [r4, #12]
 8002852:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002856:	4303      	orrs	r3, r0
 8002858:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800285a:	4bb6      	ldr	r3, [pc, #728]	; (8002b34 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800285c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800285e:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8002860:	bf1c      	itt	ne
 8002862:	6a23      	ldrne	r3, [r4, #32]
 8002864:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002866:	6893      	ldr	r3, [r2, #8]
 8002868:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800286c:	4303      	orrs	r3, r0
 800286e:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002870:	4bb1      	ldr	r3, [pc, #708]	; (8002b38 <UART_SetConfig+0x308>)
 8002872:	429a      	cmp	r2, r3
 8002874:	d119      	bne.n	80028aa <UART_SetConfig+0x7a>
 8002876:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800287a:	4ab0      	ldr	r2, [pc, #704]	; (8002b3c <UART_SetConfig+0x30c>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002884:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002888:	5cd3      	ldrb	r3, [r2, r3]
 800288a:	f040 8138 	bne.w	8002afe <UART_SetConfig+0x2ce>
    switch (clocksource)
 800288e:	2b08      	cmp	r3, #8
 8002890:	f200 808f 	bhi.w	80029b2 <UART_SetConfig+0x182>
 8002894:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002898:	00ca011a 	.word	0x00ca011a
 800289c:	008d00f9 	.word	0x008d00f9
 80028a0:	008d0114 	.word	0x008d0114
 80028a4:	008d008d 	.word	0x008d008d
 80028a8:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028aa:	4ba5      	ldr	r3, [pc, #660]	; (8002b40 <UART_SetConfig+0x310>)
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d107      	bne.n	80028c0 <UART_SetConfig+0x90>
 80028b0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80028b4:	4aa3      	ldr	r2, [pc, #652]	; (8002b44 <UART_SetConfig+0x314>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	e7e1      	b.n	8002884 <UART_SetConfig+0x54>
 80028c0:	4ba1      	ldr	r3, [pc, #644]	; (8002b48 <UART_SetConfig+0x318>)
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d123      	bne.n	800290e <UART_SetConfig+0xde>
 80028c6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	f000 80f1 	beq.w	8002aba <UART_SetConfig+0x28a>
 80028d8:	d80b      	bhi.n	80028f2 <UART_SetConfig+0xc2>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80f3 	beq.w	8002ac6 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028e0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 80028e4:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80028e8:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ec:	f000 80f8 	beq.w	8002ae0 <UART_SetConfig+0x2b0>
 80028f0:	e0a8      	b.n	8002a44 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	f000 80c6 	beq.w	8002a84 <UART_SetConfig+0x254>
 80028f8:	2b30      	cmp	r3, #48	; 0x30
 80028fa:	d1f1      	bne.n	80028e0 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028fc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002900:	f040 80b8 	bne.w	8002a74 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002904:	6860      	ldr	r0, [r4, #4]
 8002906:	0843      	lsrs	r3, r0, #1
 8002908:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800290c:	e0c3      	b.n	8002a96 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800290e:	4b8f      	ldr	r3, [pc, #572]	; (8002b4c <UART_SetConfig+0x31c>)
 8002910:	429a      	cmp	r2, r3
 8002912:	d11e      	bne.n	8002952 <UART_SetConfig+0x122>
 8002914:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	f000 80bb 	beq.w	8002a9c <UART_SetConfig+0x26c>
 8002926:	d80a      	bhi.n	800293e <UART_SetConfig+0x10e>
 8002928:	b97b      	cbnz	r3, 800294a <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800292a:	4b82      	ldr	r3, [pc, #520]	; (8002b34 <UART_SetConfig+0x304>)
 800292c:	429a      	cmp	r2, r3
 800292e:	f040 80ca 	bne.w	8002ac6 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002932:	f7ff f889 	bl	8001a48 <HAL_RCC_GetPCLK1Freq>
        break;
 8002936:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002938:	bbb0      	cbnz	r0, 80029a8 <UART_SetConfig+0x178>
 800293a:	4602      	mov	r2, r0
 800293c:	e03a      	b.n	80029b4 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800293e:	2b80      	cmp	r3, #128	; 0x80
 8002940:	f000 809d 	beq.w	8002a7e <UART_SetConfig+0x24e>
 8002944:	2bc0      	cmp	r3, #192	; 0xc0
 8002946:	f000 80b0 	beq.w	8002aaa <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800294a:	4b7a      	ldr	r3, [pc, #488]	; (8002b34 <UART_SetConfig+0x304>)
 800294c:	429a      	cmp	r2, r3
 800294e:	d1c7      	bne.n	80028e0 <UART_SetConfig+0xb0>
 8002950:	e02f      	b.n	80029b2 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002952:	4b7f      	ldr	r3, [pc, #508]	; (8002b50 <UART_SetConfig+0x320>)
 8002954:	429a      	cmp	r2, r3
 8002956:	d111      	bne.n	800297c <UART_SetConfig+0x14c>
 8002958:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002968:	f000 8098 	beq.w	8002a9c <UART_SetConfig+0x26c>
 800296c:	d9dc      	bls.n	8002928 <UART_SetConfig+0xf8>
 800296e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002972:	f000 8084 	beq.w	8002a7e <UART_SetConfig+0x24e>
 8002976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800297a:	e7e4      	b.n	8002946 <UART_SetConfig+0x116>
 800297c:	4b6d      	ldr	r3, [pc, #436]	; (8002b34 <UART_SetConfig+0x304>)
 800297e:	429a      	cmp	r2, r3
 8002980:	d1ae      	bne.n	80028e0 <UART_SetConfig+0xb0>
 8002982:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	f000 8083 	beq.w	8002a9c <UART_SetConfig+0x26c>
 8002996:	d9c7      	bls.n	8002928 <UART_SetConfig+0xf8>
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299c:	d06f      	beq.n	8002a7e <UART_SetConfig+0x24e>
 800299e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029a2:	e7d0      	b.n	8002946 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80029a4:	486b      	ldr	r0, [pc, #428]	; (8002b54 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80029a6:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80029a8:	6862      	ldr	r2, [r4, #4]
 80029aa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80029ae:	4281      	cmp	r1, r0
 80029b0:	d905      	bls.n	80029be <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 80029b2:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80029b8:	6663      	str	r3, [r4, #100]	; 0x64
}
 80029ba:	4610      	mov	r0, r2
 80029bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80029be:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80029c2:	d8f6      	bhi.n	80029b2 <UART_SetConfig+0x182>
        switch (clocksource)
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d82e      	bhi.n	8002a26 <UART_SetConfig+0x1f6>
 80029c8:	e8df f003 	tbb	[pc, r3]
 80029cc:	2d1c2d05 	.word	0x2d1c2d05
 80029d0:	2d2d2d24 	.word	0x2d2d2d24
 80029d4:	27          	.byte	0x27
 80029d5:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029d6:	f7ff f837 	bl	8001a48 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029da:	6862      	ldr	r2, [r4, #4]
 80029dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e0:	0856      	lsrs	r6, r2, #1
 80029e2:	2700      	movs	r7, #0
 80029e4:	fbe1 6700 	umlal	r6, r7, r1, r0
 80029e8:	2300      	movs	r3, #0
 80029ea:	4630      	mov	r0, r6
 80029ec:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80029ee:	f7fd fbf3 	bl	80001d8 <__aeabi_uldivmod>
            break;
 80029f2:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029f4:	4b58      	ldr	r3, [pc, #352]	; (8002b58 <UART_SetConfig+0x328>)
 80029f6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80029fa:	4299      	cmp	r1, r3
 80029fc:	d8d9      	bhi.n	80029b2 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	60d8      	str	r0, [r3, #12]
 8002a02:	e7d7      	b.n	80029b4 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002a04:	4855      	ldr	r0, [pc, #340]	; (8002b5c <UART_SetConfig+0x32c>)
 8002a06:	0855      	lsrs	r5, r2, #1
 8002a08:	2300      	movs	r3, #0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002a0e:	f141 0100 	adc.w	r1, r1, #0
 8002a12:	e7ec      	b.n	80029ee <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a14:	f7fe fd0c 	bl	8001430 <HAL_RCC_GetSysClockFreq>
 8002a18:	e7df      	b.n	80029da <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002a1a:	0850      	lsrs	r0, r2, #1
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002a24:	e7f3      	b.n	8002a0e <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8002a26:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002a28:	2000      	movs	r0, #0
 8002a2a:	e7e3      	b.n	80029f4 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a2c:	f7ff f81e 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 8002a30:	e04e      	b.n	8002ad0 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a32:	f7ff f809 	bl	8001a48 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a36:	6862      	ldr	r2, [r4, #4]
 8002a38:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a40:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a42:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a44:	f1a3 0010 	sub.w	r0, r3, #16
 8002a48:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002a4c:	4288      	cmp	r0, r1
 8002a4e:	d8b0      	bhi.n	80029b2 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8002a50:	6821      	ldr	r1, [r4, #0]
 8002a52:	60cb      	str	r3, [r1, #12]
 8002a54:	e7ae      	b.n	80029b4 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a56:	f7ff f809 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 8002a5a:	e7ec      	b.n	8002a36 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a5c:	6860      	ldr	r0, [r4, #4]
 8002a5e:	0843      	lsrs	r3, r0, #1
 8002a60:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002a64:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a68:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a6c:	e7e8      	b.n	8002a40 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a6e:	f7fe fcdf 	bl	8001430 <HAL_RCC_GetSysClockFreq>
 8002a72:	e7e0      	b.n	8002a36 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a74:	6860      	ldr	r0, [r4, #4]
 8002a76:	0843      	lsrs	r3, r0, #1
 8002a78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a7c:	e7f4      	b.n	8002a68 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <UART_SetConfig+0x304>)
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d08f      	beq.n	80029a4 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a84:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002a88:	d1e8      	bne.n	8002a5c <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a8a:	6860      	ldr	r0, [r4, #4]
 8002a8c:	0843      	lsrs	r3, r0, #1
 8002a8e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002a92:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a96:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a9a:	e01f      	b.n	8002adc <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <UART_SetConfig+0x304>)
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d10b      	bne.n	8002aba <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002aa2:	f7fe fcc5 	bl	8001430 <HAL_RCC_GetSysClockFreq>
        break;
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	e746      	b.n	8002938 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <UART_SetConfig+0x304>)
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f47f af25 	bne.w	80028fc <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002ab2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	e776      	b.n	80029a8 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aba:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002abe:	d1d6      	bne.n	8002a6e <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ac0:	f7fe fcb6 	bl	8001430 <HAL_RCC_GetSysClockFreq>
 8002ac4:	e004      	b.n	8002ad0 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ac6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002aca:	d1b2      	bne.n	8002a32 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002acc:	f7fe ffbc 	bl	8001a48 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ad0:	6861      	ldr	r1, [r4, #4]
 8002ad2:	084a      	lsrs	r2, r1, #1
 8002ad4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002ad8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002adc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ade:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae0:	f1a3 0010 	sub.w	r0, r3, #16
 8002ae4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002ae8:	4288      	cmp	r0, r1
 8002aea:	f63f af62 	bhi.w	80029b2 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8002aee:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002af2:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002af4:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002af8:	430b      	orrs	r3, r1
 8002afa:	60c3      	str	r3, [r0, #12]
 8002afc:	e75a      	b.n	80029b4 <UART_SetConfig+0x184>
    switch (clocksource)
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	f63f af57 	bhi.w	80029b2 <UART_SetConfig+0x182>
 8002b04:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <UART_SetConfig+0x2dc>)
 8002b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0a:	bf00      	nop
 8002b0c:	08002a33 	.word	0x08002a33
 8002b10:	08002a57 	.word	0x08002a57
 8002b14:	08002a5d 	.word	0x08002a5d
 8002b18:	080029b3 	.word	0x080029b3
 8002b1c:	08002a6f 	.word	0x08002a6f
 8002b20:	080029b3 	.word	0x080029b3
 8002b24:	080029b3 	.word	0x080029b3
 8002b28:	080029b3 	.word	0x080029b3
 8002b2c:	08002a75 	.word	0x08002a75
 8002b30:	efff69f3 	.word	0xefff69f3
 8002b34:	40008000 	.word	0x40008000
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	080035a4 	.word	0x080035a4
 8002b40:	40004400 	.word	0x40004400
 8002b44:	080035a8 	.word	0x080035a8
 8002b48:	40004800 	.word	0x40004800
 8002b4c:	40004c00 	.word	0x40004c00
 8002b50:	40005000 	.word	0x40005000
 8002b54:	00f42400 	.word	0x00f42400
 8002b58:	000ffcff 	.word	0x000ffcff
 8002b5c:	f4240000 	.word	0xf4240000

08002b60 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b62:	07da      	lsls	r2, r3, #31
{
 8002b64:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b66:	d506      	bpl.n	8002b76 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b68:	6801      	ldr	r1, [r0, #0]
 8002b6a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002b6c:	684a      	ldr	r2, [r1, #4]
 8002b6e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002b72:	4322      	orrs	r2, r4
 8002b74:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b76:	079c      	lsls	r4, r3, #30
 8002b78:	d506      	bpl.n	8002b88 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b7a:	6801      	ldr	r1, [r0, #0]
 8002b7c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002b7e:	684a      	ldr	r2, [r1, #4]
 8002b80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b84:	4322      	orrs	r2, r4
 8002b86:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b88:	0759      	lsls	r1, r3, #29
 8002b8a:	d506      	bpl.n	8002b9a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b8c:	6801      	ldr	r1, [r0, #0]
 8002b8e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002b90:	684a      	ldr	r2, [r1, #4]
 8002b92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b96:	4322      	orrs	r2, r4
 8002b98:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b9a:	071a      	lsls	r2, r3, #28
 8002b9c:	d506      	bpl.n	8002bac <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b9e:	6801      	ldr	r1, [r0, #0]
 8002ba0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002ba2:	684a      	ldr	r2, [r1, #4]
 8002ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba8:	4322      	orrs	r2, r4
 8002baa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bac:	06dc      	lsls	r4, r3, #27
 8002bae:	d506      	bpl.n	8002bbe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bb0:	6801      	ldr	r1, [r0, #0]
 8002bb2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002bb4:	688a      	ldr	r2, [r1, #8]
 8002bb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bba:	4322      	orrs	r2, r4
 8002bbc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bbe:	0699      	lsls	r1, r3, #26
 8002bc0:	d506      	bpl.n	8002bd0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bc2:	6801      	ldr	r1, [r0, #0]
 8002bc4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002bc6:	688a      	ldr	r2, [r1, #8]
 8002bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bcc:	4322      	orrs	r2, r4
 8002bce:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bd0:	065a      	lsls	r2, r3, #25
 8002bd2:	d50f      	bpl.n	8002bf4 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bd4:	6801      	ldr	r1, [r0, #0]
 8002bd6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002bd8:	684a      	ldr	r2, [r1, #4]
 8002bda:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002bde:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002be0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002be4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002be6:	d105      	bne.n	8002bf4 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002be8:	684a      	ldr	r2, [r1, #4]
 8002bea:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002bec:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002bf0:	4322      	orrs	r2, r4
 8002bf2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	d506      	bpl.n	8002c06 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bf8:	6802      	ldr	r2, [r0, #0]
 8002bfa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002bfc:	6853      	ldr	r3, [r2, #4]
 8002bfe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002c02:	430b      	orrs	r3, r1
 8002c04:	6053      	str	r3, [r2, #4]
 8002c06:	bd10      	pop	{r4, pc}

08002c08 <UART_WaitOnFlagUntilTimeout>:
{
 8002c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c0c:	9d06      	ldr	r5, [sp, #24]
 8002c0e:	4604      	mov	r4, r0
 8002c10:	460f      	mov	r7, r1
 8002c12:	4616      	mov	r6, r2
 8002c14:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c16:	6821      	ldr	r1, [r4, #0]
 8002c18:	69ca      	ldr	r2, [r1, #28]
 8002c1a:	ea37 0302 	bics.w	r3, r7, r2
 8002c1e:	bf0c      	ite	eq
 8002c20:	2201      	moveq	r2, #1
 8002c22:	2200      	movne	r2, #0
 8002c24:	42b2      	cmp	r2, r6
 8002c26:	d002      	beq.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002c28:	2000      	movs	r0, #0
}
 8002c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002c2e:	1c6b      	adds	r3, r5, #1
 8002c30:	d0f2      	beq.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c32:	b99d      	cbnz	r5, 8002c5c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002c46:	2320      	movs	r3, #32
 8002c48:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002c4c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002c50:	2300      	movs	r3, #0
 8002c52:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002c56:	2003      	movs	r0, #3
 8002c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c5c:	f7fd fe4e 	bl	80008fc <HAL_GetTick>
 8002c60:	eba0 0008 	sub.w	r0, r0, r8
 8002c64:	4285      	cmp	r5, r0
 8002c66:	d2d6      	bcs.n	8002c16 <UART_WaitOnFlagUntilTimeout+0xe>
 8002c68:	e7e4      	b.n	8002c34 <UART_WaitOnFlagUntilTimeout+0x2c>

08002c6a <HAL_UART_Transmit>:
{
 8002c6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002c6e:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002c70:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002c74:	2b20      	cmp	r3, #32
{
 8002c76:	4604      	mov	r4, r0
 8002c78:	460d      	mov	r5, r1
 8002c7a:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002c7c:	d14a      	bne.n	8002d14 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002c7e:	2900      	cmp	r1, #0
 8002c80:	d046      	beq.n	8002d10 <HAL_UART_Transmit+0xa6>
 8002c82:	2a00      	cmp	r2, #0
 8002c84:	d044      	beq.n	8002d10 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002c86:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d042      	beq.n	8002d14 <HAL_UART_Transmit+0xaa>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c98:	2321      	movs	r3, #33	; 0x21
 8002c9a:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8002c9e:	f7fd fe2d 	bl	80008fc <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002ca2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002ca6:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002ca8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cac:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cb0:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8002cb2:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cb4:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8002cb6:	b952      	cbnz	r2, 8002cce <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cb8:	2140      	movs	r1, #64	; 0x40
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7ff ffa4 	bl	8002c08 <UART_WaitOnFlagUntilTimeout>
 8002cc0:	b958      	cbnz	r0, 8002cda <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8002cc2:	2320      	movs	r3, #32
 8002cc4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8002cc8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002ccc:	e006      	b.n	8002cdc <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7ff ff98 	bl	8002c08 <UART_WaitOnFlagUntilTimeout>
 8002cd8:	b118      	cbz	r0, 8002ce2 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8002cda:	2003      	movs	r0, #3
}
 8002cdc:	b002      	add	sp, #8
 8002cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce2:	68a3      	ldr	r3, [r4, #8]
 8002ce4:	6822      	ldr	r2, [r4, #0]
 8002ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cea:	d10d      	bne.n	8002d08 <HAL_UART_Transmit+0x9e>
 8002cec:	6923      	ldr	r3, [r4, #16]
 8002cee:	b95b      	cbnz	r3, 8002d08 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002cf0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf8:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002cfa:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002d06:	e7d1      	b.n	8002cac <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002d08:	782b      	ldrb	r3, [r5, #0]
 8002d0a:	8513      	strh	r3, [r2, #40]	; 0x28
 8002d0c:	3501      	adds	r5, #1
 8002d0e:	e7f4      	b.n	8002cfa <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002d10:	2001      	movs	r0, #1
 8002d12:	e7e3      	b.n	8002cdc <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8002d14:	2002      	movs	r0, #2
 8002d16:	e7e1      	b.n	8002cdc <HAL_UART_Transmit+0x72>

08002d18 <UART_CheckIdleState>:
{
 8002d18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d1a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1c:	2600      	movs	r6, #0
 8002d1e:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002d20:	f7fd fdec 	bl	80008fc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002d2a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d2c:	d417      	bmi.n	8002d5e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	075b      	lsls	r3, r3, #29
 8002d34:	d50a      	bpl.n	8002d4c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	462b      	mov	r3, r5
 8002d40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d44:	4620      	mov	r0, r4
 8002d46:	f7ff ff5f 	bl	8002c08 <UART_WaitOnFlagUntilTimeout>
 8002d4a:	b9a0      	cbnz	r0, 8002d76 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002d4c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002d4e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002d50:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8002d54:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002d58:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002d5c:	e00c      	b.n	8002d78 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4632      	mov	r2, r6
 8002d66:	4603      	mov	r3, r0
 8002d68:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7ff ff4b 	bl	8002c08 <UART_WaitOnFlagUntilTimeout>
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d0db      	beq.n	8002d2e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002d76:	2003      	movs	r0, #3
}
 8002d78:	b002      	add	sp, #8
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}

08002d7c <HAL_UART_Init>:
{
 8002d7c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002d7e:	4604      	mov	r4, r0
 8002d80:	b360      	cbz	r0, 8002ddc <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d82:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002d86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d8a:	b91b      	cbnz	r3, 8002d94 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002d8c:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002d90:	f000 fb54 	bl	800343c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002d94:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d96:	2324      	movs	r3, #36	; 0x24
 8002d98:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002d9c:	6813      	ldr	r3, [r2, #0]
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002da4:	4620      	mov	r0, r4
 8002da6:	f7ff fd43 	bl	8002830 <UART_SetConfig>
 8002daa:	2801      	cmp	r0, #1
 8002dac:	d016      	beq.n	8002ddc <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002db0:	b113      	cbz	r3, 8002db8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002db2:	4620      	mov	r0, r4
 8002db4:	f7ff fed4 	bl	8002b60 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dc8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002dd0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002dd2:	601a      	str	r2, [r3, #0]
}
 8002dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002dd8:	f7ff bf9e 	b.w	8002d18 <UART_CheckIdleState>
}
 8002ddc:	2001      	movs	r0, #1
 8002dde:	bd10      	pop	{r4, pc}

08002de0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002de0:	4770      	bx	lr
	...

08002de4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	2214      	movs	r2, #20
{
 8002dea:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	eb0d 0002 	add.w	r0, sp, r2
 8002df0:	2100      	movs	r1, #0
 8002df2:	f000 fbba 	bl	800356a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df6:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002df8:	4f3c      	ldr	r7, [pc, #240]	; (8002eec <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002dfc:	4e3c      	ldr	r6, [pc, #240]	; (8002ef0 <MX_GPIO_Init+0x10c>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = But_Enter_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dfe:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8002ef4 <MX_GPIO_Init+0x110>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e02:	f042 0204 	orr.w	r2, r2, #4
 8002e06:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e0a:	f002 0204 	and.w	r2, r2, #4
 8002e0e:	9200      	str	r2, [sp, #0]
 8002e10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e14:	f042 0201 	orr.w	r2, r2, #1
 8002e18:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e1c:	f002 0201 	and.w	r2, r2, #1
 8002e20:	9201      	str	r2, [sp, #4]
 8002e22:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e26:	f042 0202 	orr.w	r2, r2, #2
 8002e2a:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e2e:	f002 0202 	and.w	r2, r2, #2
 8002e32:	9202      	str	r2, [sp, #8]
 8002e34:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e38:	f042 0210 	orr.w	r2, r2, #16
 8002e3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e40:	f002 0210 	and.w	r2, r2, #16
 8002e44:	9203      	str	r2, [sp, #12]
 8002e46:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e4a:	f042 0208 	orr.w	r2, r2, #8
 8002e4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002e58:	4638      	mov	r0, r7
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002e60:	f7fd ff72 	bl	8000d48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002e64:	2200      	movs	r2, #0
 8002e66:	4630      	mov	r0, r6
 8002e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e6c:	f7fd ff6c 	bl	8000d48 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = But_Enter_Pin;
 8002e72:	2501      	movs	r5, #1
  HAL_GPIO_Init(But_Enter_GPIO_Port, &GPIO_InitStruct);
 8002e74:	a905      	add	r1, sp, #20
 8002e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = But_Enter_Pin;
 8002e7a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e7c:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(But_Enter_GPIO_Port, &GPIO_InitStruct);
 8002e82:	f7fd fdeb 	bl	8000a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = But_Up_Pin;
 8002e86:	2308      	movs	r3, #8
 8002e88:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(But_Up_GPIO_Port, &GPIO_InitStruct);
 8002e8a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e8c:	2302      	movs	r3, #2
  HAL_GPIO_Init(But_Up_GPIO_Port, &GPIO_InitStruct);
 8002e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e92:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e94:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(But_Up_GPIO_Port, &GPIO_InitStruct);
 8002e98:	f7fd fde0 	bl	8000a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002e9c:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002e9e:	a905      	add	r1, sp, #20
 8002ea0:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LD2_Pin;
 8002ea2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002eaa:	f7fd fdd7 	bl	8000a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8002eae:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8002eb2:	a905      	add	r1, sp, #20
 8002eb4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD1_Pin;
 8002eb6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8002ebe:	f7fd fdcd 	bl	8000a5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	2006      	movs	r0, #6
 8002ec8:	f7fd fd30 	bl	800092c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ecc:	2006      	movs	r0, #6
 8002ece:	f7fd fd61 	bl	8000994 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	2009      	movs	r0, #9
 8002ed8:	f7fd fd28 	bl	800092c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002edc:	2009      	movs	r0, #9
 8002ede:	f7fd fd59 	bl	8000994 <HAL_NVIC_EnableIRQ>

}
 8002ee2:	b00a      	add	sp, #40	; 0x28
 8002ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	48000400 	.word	0x48000400
 8002ef0:	48001000 	.word	0x48001000
 8002ef4:	10110000 	.word	0x10110000

08002ef8 <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	 if(GPIO_Pin == But_Enter_Pin)
 8002ef8:	2801      	cmp	r0, #1
 8002efa:	d102      	bne.n	8002f02 <HAL_GPIO_EXTI_Callback+0xa>
	 {
		 FlagEnter = 1;
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <HAL_GPIO_EXTI_Callback+0x18>)
 8002efe:	7018      	strb	r0, [r3, #0]
 8002f00:	4770      	bx	lr
	 }

	 if(GPIO_Pin == But_Up_Pin)
 8002f02:	2808      	cmp	r0, #8
	 {
		 FlagUp = 1;
 8002f04:	bf02      	ittt	eq
 8002f06:	4b03      	ldreq	r3, [pc, #12]	; (8002f14 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002f08:	2201      	moveq	r2, #1
 8002f0a:	701a      	strbeq	r2, [r3, #0]
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000020 	.word	0x20000020
 8002f14:	20000021 	.word	0x20000021

08002f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f18:	b510      	push	{r4, lr}
 8002f1a:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f1c:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f1e:	2244      	movs	r2, #68	; 0x44
 8002f20:	2100      	movs	r1, #0
 8002f22:	a805      	add	r0, sp, #20
 8002f24:	f000 fb21 	bl	800356a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f28:	4622      	mov	r2, r4
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4668      	mov	r0, sp
 8002f2e:	f000 fb1c 	bl	800356a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f32:	2100      	movs	r1, #0
 8002f34:	2288      	movs	r2, #136	; 0x88
 8002f36:	a816      	add	r0, sp, #88	; 0x58
 8002f38:	f000 fb17 	bl	800356a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002f3c:	f7fd ff1a 	bl	8000d74 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002f40:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <SystemClock_Config+0x9c>)
 8002f42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002f46:	f023 0318 	bic.w	r3, r3, #24
 8002f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f52:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002f54:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002f56:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f58:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002f5a:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002f5c:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f5e:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f60:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f62:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002f64:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f66:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f68:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f6a:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f6c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f6e:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f70:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f72:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f74:	f7fe fab0 	bl	80014d8 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f78:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f7a:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f7c:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f7e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f80:	e88d 000c 	stmia.w	sp, {r2, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f84:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f86:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f88:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f8a:	f7fe fccb 	bl	8001924 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 8002f8e:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 8002f92:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f94:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f9a:	9337      	str	r3, [sp, #220]	; 0xdc
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f9c:	9425      	str	r4, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f9e:	f7fe fe83 	bl	8001ca8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002fa2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002fa6:	f7fd fef5 	bl	8000d94 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002faa:	f7ff f865 	bl	8002078 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002fae:	b038      	add	sp, #224	; 0xe0
 8002fb0:	bd10      	pop	{r4, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <main>:
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
	char usartBuffer[50] = {0};
 8002fbe:	2232      	movs	r2, #50	; 0x32
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	a801      	add	r0, sp, #4
 8002fc4:	f000 fad1 	bl	800356a <memset>
	uint32_t dataWrite4[TABSIZE] = {0x34};
 8002fc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002fcc:	2100      	movs	r1, #0
 8002fce:	a80e      	add	r0, sp, #56	; 0x38
 8002fd0:	f000 facb 	bl	800356a <memset>
	uint32_t dataRead4[TABSIZE] = {0x00};
 8002fd4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002fd8:	2100      	movs	r1, #0
	uint32_t dataWrite4[TABSIZE] = {0x34};
 8002fda:	2334      	movs	r3, #52	; 0x34
	uint32_t dataRead4[TABSIZE] = {0x00};
 8002fdc:	a872      	add	r0, sp, #456	; 0x1c8
	uint32_t dataWrite4[TABSIZE] = {0x34};
 8002fde:	930e      	str	r3, [sp, #56]	; 0x38
	uint32_t dataRead4[TABSIZE] = {0x00};
 8002fe0:	f000 fac3 	bl	800356a <memset>
	uint8_t xx = 0x10;
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	f88d 3003 	strb.w	r3, [sp, #3]
	  if (FlagEnter == 1)
 8002fea:	4d2a      	ldr	r5, [pc, #168]	; (8003094 <main+0xdc>)
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002fec:	4f2a      	ldr	r7, [pc, #168]	; (8003098 <main+0xe0>)
  HAL_Init();
 8002fee:	f7fd fc67 	bl	80008c0 <HAL_Init>
  SystemClock_Config();
 8002ff2:	f7ff ff91 	bl	8002f18 <SystemClock_Config>
  MX_GPIO_Init();
 8002ff6:	f7ff fef5 	bl	8002de4 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8002ffa:	f000 f85d 	bl	80030b8 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8002ffe:	f000 f949 	bl	8003294 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8003002:	f000 f9fd 	bl	8003400 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8003006:	f000 f8bd 	bl	8003184 <MX_RTC_Init>
  BSP_QSPI_Init();
 800300a:	f7fd facf 	bl	80005ac <BSP_QSPI_Init>
  WRITE_REG(QUADSPI->LPTR, 0xFFF);
 800300e:	4b23      	ldr	r3, [pc, #140]	; (800309c <main+0xe4>)
 8003010:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
 8003016:	462e      	mov	r6, r5
	  if (FlagEnter == 1)
 8003018:	782c      	ldrb	r4, [r5, #0]
 800301a:	b2e4      	uxtb	r4, r4
 800301c:	2c01      	cmp	r4, #1
 800301e:	d12b      	bne.n	8003078 <main+0xc0>
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003024:	4638      	mov	r0, r7
 8003026:	f7fd fe94 	bl	8000d52 <HAL_GPIO_TogglePin>
		  BSP_QSPI_Erase_Block(1);
 800302a:	4620      	mov	r0, r4
 800302c:	f7fd fc02 	bl	8000834 <BSP_QSPI_Erase_Block>
		  	  BSP_QSPI_Write(&xx, *dataWrite4, TABSIZE);
 8003030:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003032:	2264      	movs	r2, #100	; 0x64
 8003034:	4621      	mov	r1, r4
 8003036:	f10d 0003 	add.w	r0, sp, #3
 800303a:	f7fd fbab 	bl	8000794 <BSP_QSPI_Write>
		  	  BSP_QSPI_Read(&xx, *dataWrite4, TABSIZE);
 800303e:	2264      	movs	r2, #100	; 0x64
 8003040:	4621      	mov	r1, r4
 8003042:	f10d 0003 	add.w	r0, sp, #3
 8003046:	f7fd fb75 	bl	8000734 <BSP_QSPI_Read>
		  	  if(memcmp(dataWrite4,dataRead4,0x100) == 0 )
 800304a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800304e:	a972      	add	r1, sp, #456	; 0x1c8
 8003050:	a80e      	add	r0, sp, #56	; 0x38
 8003052:	f000 fa7b 	bl	800354c <memcmp>
 8003056:	b9d0      	cbnz	r0, 800308e <main+0xd6>
		  		  sprintf(usartBuffer,"OK OK OK OK\r\n");
 8003058:	4911      	ldr	r1, [pc, #68]	; (80030a0 <main+0xe8>)
		  		  sprintf(usartBuffer,"Error Error Error!!!\r\n");
 800305a:	a801      	add	r0, sp, #4
 800305c:	f000 fa8d 	bl	800357a <strcpy>
		  		  HAL_UART_Transmit(&huart2, (uint8_t*)usartBuffer,strlen(usartBuffer),0x1000);
 8003060:	a801      	add	r0, sp, #4
 8003062:	f7fd f8b1 	bl	80001c8 <strlen>
 8003066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306a:	b282      	uxth	r2, r0
 800306c:	a901      	add	r1, sp, #4
 800306e:	480d      	ldr	r0, [pc, #52]	; (80030a4 <main+0xec>)
 8003070:	f7ff fdfb 	bl	8002c6a <HAL_UART_Transmit>
		  FlagEnter = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	7033      	strb	r3, [r6, #0]
	  if (FlagUp == 1)
 8003078:	4c0b      	ldr	r4, [pc, #44]	; (80030a8 <main+0xf0>)
 800307a:	7823      	ldrb	r3, [r4, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d1cb      	bne.n	8003018 <main+0x60>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003080:	2104      	movs	r1, #4
 8003082:	480a      	ldr	r0, [pc, #40]	; (80030ac <main+0xf4>)
 8003084:	f7fd fe65 	bl	8000d52 <HAL_GPIO_TogglePin>
	  	  FlagUp = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	7023      	strb	r3, [r4, #0]
 800308c:	e7c4      	b.n	8003018 <main+0x60>
		  		  sprintf(usartBuffer,"Error Error Error!!!\r\n");
 800308e:	4908      	ldr	r1, [pc, #32]	; (80030b0 <main+0xf8>)
 8003090:	e7e3      	b.n	800305a <main+0xa2>
 8003092:	bf00      	nop
 8003094:	20000020 	.word	0x20000020
 8003098:	48001000 	.word	0x48001000
 800309c:	a0001000 	.word	0xa0001000
 80030a0:	080035b5 	.word	0x080035b5
 80030a4:	20000138 	.word	0x20000138
 80030a8:	20000021 	.word	0x20000021
 80030ac:	48000400 	.word	0x48000400
 80030b0:	080035c3 	.word	0x080035c3

080030b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030b4:	4770      	bx	lr
	...

080030b8 <MX_QUADSPI_Init>:

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{

  hqspi.Instance = QUADSPI;
 80030b8:	480a      	ldr	r0, [pc, #40]	; (80030e4 <MX_QUADSPI_Init+0x2c>)
  hqspi.Init.ClockPrescaler = 255;
 80030ba:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <MX_QUADSPI_Init+0x30>)
{
 80030bc:	b508      	push	{r3, lr}
  hqspi.Init.ClockPrescaler = 255;
 80030be:	23ff      	movs	r3, #255	; 0xff
 80030c0:	e880 000c 	stmia.w	r0, {r2, r3}
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80030c4:	2300      	movs	r3, #0
  hqspi.Init.FifoThreshold = 1;
 80030c6:	2201      	movs	r2, #1
 80030c8:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80030ca:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 80030cc:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80030ce:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80030d0:	6183      	str	r3, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80030d2:	f7fd ff5d 	bl	8000f90 <HAL_QSPI_Init>
 80030d6:	b118      	cbz	r0, 80030e0 <MX_QUADSPI_Init+0x28>
  {
    Error_Handler();
  }

}
 80030d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80030dc:	f7ff bfea 	b.w	80030b4 <Error_Handler>
 80030e0:	bd08      	pop	{r3, pc}
 80030e2:	bf00      	nop
 80030e4:	2000006c 	.word	0x2000006c
 80030e8:	a0001000 	.word	0xa0001000

080030ec <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4604      	mov	r4, r0
 80030f0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f2:	2214      	movs	r2, #20
 80030f4:	2100      	movs	r1, #0
 80030f6:	a803      	add	r0, sp, #12
 80030f8:	f000 fa37 	bl	800356a <memset>
  if(qspiHandle->Instance==QUADSPI)
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_QSPI_MspInit+0x64>)
 8003100:	429a      	cmp	r2, r3
 8003102:	d122      	bne.n	800314a <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003104:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8003108:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800310c:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 800310e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003110:	4810      	ldr	r0, [pc, #64]	; (8003154 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003116:	651a      	str	r2, [r3, #80]	; 0x50
 8003118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800311a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800311e:	9201      	str	r2, [sp, #4]
 8003120:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003124:	f042 0210 	orr.w	r2, r2, #16
 8003128:	64da      	str	r2, [r3, #76]	; 0x4c
 800312a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	9302      	str	r3, [sp, #8]
 8003132:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8003134:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003138:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313e:	2303      	movs	r3, #3
 8003140:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003142:	230a      	movs	r3, #10
 8003144:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003146:	f7fd fc89 	bl	8000a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800314a:	b008      	add	sp, #32
 800314c:	bd10      	pop	{r4, pc}
 800314e:	bf00      	nop
 8003150:	a0001000 	.word	0xa0001000
 8003154:	48001000 	.word	0x48001000

08003158 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{

  if(qspiHandle->Instance==QUADSPI)
 8003158:	6802      	ldr	r2, [r0, #0]
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <HAL_QSPI_MspDeInit+0x20>)
 800315c:	429a      	cmp	r2, r3
 800315e:	d109      	bne.n	8003174 <HAL_QSPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8003160:	4a06      	ldr	r2, [pc, #24]	; (800317c <HAL_QSPI_MspDeInit+0x24>)
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8003162:	4807      	ldr	r0, [pc, #28]	; (8003180 <HAL_QSPI_MspDeInit+0x28>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8003164:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800316a:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 800316c:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8003170:	f7fd bd50 	b.w	8000c14 <HAL_GPIO_DeInit>
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	a0001000 	.word	0xa0001000
 800317c:	40021000 	.word	0x40021000
 8003180:	48001000 	.word	0x48001000

08003184 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003184:	b510      	push	{r4, lr}
 8003186:	b090      	sub	sp, #64	; 0x40
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8003188:	2400      	movs	r4, #0
  RTC_TimeTypeDef sTime = {0};
 800318a:	2214      	movs	r2, #20
 800318c:	2100      	movs	r1, #0
 800318e:	a801      	add	r0, sp, #4
 8003190:	f000 f9eb 	bl	800356a <memset>
  RTC_TamperTypeDef sTamper = {0};
 8003194:	2228      	movs	r2, #40	; 0x28
 8003196:	4621      	mov	r1, r4
 8003198:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 800319a:	9400      	str	r4, [sp, #0]
  RTC_TamperTypeDef sTamper = {0};
 800319c:	f000 f9e5 	bl	800356a <memset>

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80031a0:	4828      	ldr	r0, [pc, #160]	; (8003244 <MX_RTC_Init+0xc0>)
 80031a2:	4b29      	ldr	r3, [pc, #164]	; (8003248 <MX_RTC_Init+0xc4>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80031a4:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031a6:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 80031aa:	237f      	movs	r3, #127	; 0x7f
 80031ac:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80031ae:	23ff      	movs	r3, #255	; 0xff
 80031b0:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80031b2:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80031b4:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80031b6:	61c4      	str	r4, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80031b8:	f7fe ff98 	bl	80020ec <HAL_RTC_Init>
 80031bc:	b108      	cbz	r0, 80031c2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80031be:	f7ff ff79 	bl	80030b4 <Error_Handler>
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80031c2:	2201      	movs	r2, #1
 80031c4:	a901      	add	r1, sp, #4
 80031c6:	481f      	ldr	r0, [pc, #124]	; (8003244 <MX_RTC_Init+0xc0>)
  sTime.Hours = 0x0;
 80031c8:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 80031cc:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 80031d0:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80031d4:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80031d6:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80031d8:	f7ff f851 	bl	800227e <HAL_RTC_SetTime>
 80031dc:	b108      	cbz	r0, 80031e2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80031de:	f7ff ff69 	bl	80030b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80031e2:	2201      	movs	r2, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;
 80031e4:	2300      	movs	r3, #0

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80031e6:	4669      	mov	r1, sp
 80031e8:	4816      	ldr	r0, [pc, #88]	; (8003244 <MX_RTC_Init+0xc0>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80031ea:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 80031ee:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 80031f2:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 80031f6:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80031fa:	f7fe ffd7 	bl	80021ac <HAL_RTC_SetDate>
 80031fe:	b108      	cbz	r0, 8003204 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8003200:	f7ff ff58 	bl	80030b4 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003204:	2204      	movs	r2, #4
 8003206:	4611      	mov	r1, r2
 8003208:	480e      	ldr	r0, [pc, #56]	; (8003244 <MX_RTC_Init+0xc0>)
 800320a:	f7ff f8b5 	bl	8002378 <HAL_RTCEx_SetWakeUpTimer_IT>
 800320e:	b108      	cbz	r0, 8003214 <MX_RTC_Init+0x90>
  {
    Error_Handler();
 8003210:	f7ff ff50 	bl	80030b4 <Error_Handler>
  }
  /** Enable the RTC Tamper 1 
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8003214:	2301      	movs	r3, #1
 8003216:	9306      	str	r3, [sp, #24]
  sTamper.Interrupt = RTC_TAMPER1_INTERRUPT;
 8003218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800321c:	9307      	str	r3, [sp, #28]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 800321e:	2300      	movs	r3, #0
 8003220:	9308      	str	r3, [sp, #32]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8003222:	9309      	str	r3, [sp, #36]	; 0x24
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8003224:	930a      	str	r3, [sp, #40]	; 0x28
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8003226:	930b      	str	r3, [sp, #44]	; 0x2c
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8003228:	930c      	str	r3, [sp, #48]	; 0x30
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 800322a:	930d      	str	r3, [sp, #52]	; 0x34
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 800322c:	930e      	str	r3, [sp, #56]	; 0x38
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
  if (HAL_RTCEx_SetTamper_IT(&hrtc, &sTamper) != HAL_OK)
 800322e:	a906      	add	r1, sp, #24
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8003230:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTCEx_SetTamper_IT(&hrtc, &sTamper) != HAL_OK)
 8003232:	4804      	ldr	r0, [pc, #16]	; (8003244 <MX_RTC_Init+0xc0>)
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8003234:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTCEx_SetTamper_IT(&hrtc, &sTamper) != HAL_OK)
 8003236:	f7ff f92f 	bl	8002498 <HAL_RTCEx_SetTamper_IT>
 800323a:	b108      	cbz	r0, 8003240 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 800323c:	f7ff ff3a 	bl	80030b4 <Error_Handler>
  }

}
 8003240:	b010      	add	sp, #64	; 0x40
 8003242:	bd10      	pop	{r4, pc}
 8003244:	200000b0 	.word	0x200000b0
 8003248:	40002800 	.word	0x40002800

0800324c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800324c:	b508      	push	{r3, lr}

  if(rtcHandle->Instance==RTC)
 800324e:	6802      	ldr	r2, [r0, #0]
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_RTC_MspInit+0x40>)
 8003252:	429a      	cmp	r2, r3
 8003254:	d118      	bne.n	8003288 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003256:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <HAL_RTC_MspInit+0x44>)
 8003258:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800325c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_IRQn, 0, 0);
 8003264:	2200      	movs	r2, #0
 8003266:	4611      	mov	r1, r2
 8003268:	2002      	movs	r0, #2
 800326a:	f7fd fb5f 	bl	800092c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_IRQn);
 800326e:	2002      	movs	r0, #2
 8003270:	f7fd fb90 	bl	8000994 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	2003      	movs	r0, #3
 8003278:	4611      	mov	r1, r2
 800327a:	f7fd fb57 	bl	800092c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800327e:	2003      	movs	r0, #3
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003284:	f7fd bb86 	b.w	8000994 <HAL_NVIC_EnableIRQ>
 8003288:	bd08      	pop	{r3, pc}
 800328a:	bf00      	nop
 800328c:	40002800 	.word	0x40002800
 8003290:	40021000 	.word	0x40021000

08003294 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8003294:	4810      	ldr	r0, [pc, #64]	; (80032d8 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003296:	4911      	ldr	r1, [pc, #68]	; (80032dc <MX_SPI1_Init+0x48>)
{
 8003298:	b508      	push	{r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800329a:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800329e:	f44f 7382 	mov.w	r3, #260	; 0x104
 80032a2:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80032a6:	60c2      	str	r2, [r0, #12]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032a8:	2300      	movs	r3, #0
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032aa:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032ae:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032b2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032b4:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032b6:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032b8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032ba:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032bc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80032be:	2207      	movs	r2, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032c0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032c2:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 80032c4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032c6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032c8:	f7ff f9b0 	bl	800262c <HAL_SPI_Init>
 80032cc:	b118      	cbz	r0, 80032d6 <MX_SPI1_Init+0x42>
  {
    Error_Handler();
  }

}
 80032ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80032d2:	f7ff beef 	b.w	80030b4 <Error_Handler>
 80032d6:	bd08      	pop	{r3, pc}
 80032d8:	200000d4 	.word	0x200000d4
 80032dc:	40013000 	.word	0x40013000

080032e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032e0:	b510      	push	{r4, lr}
 80032e2:	4604      	mov	r4, r0
 80032e4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e6:	2214      	movs	r2, #20
 80032e8:	2100      	movs	r1, #0
 80032ea:	a803      	add	r0, sp, #12
 80032ec:	f000 f93d 	bl	800356a <memset>
  if(spiHandle->Instance==SPI1)
 80032f0:	6822      	ldr	r2, [r4, #0]
 80032f2:	4b13      	ldr	r3, [pc, #76]	; (8003340 <HAL_SPI_MspInit+0x60>)
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d120      	bne.n	800333a <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032f8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003300:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003304:	661a      	str	r2, [r3, #96]	; 0x60
 8003306:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003308:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800330c:	9201      	str	r2, [sp, #4]
 800330e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003310:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	64da      	str	r2, [r3, #76]	; 0x4c
 8003318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	9302      	str	r3, [sp, #8]
 8003320:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003322:	23e0      	movs	r3, #224	; 0xe0
 8003324:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332a:	2303      	movs	r3, #3
 800332c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003332:	2305      	movs	r3, #5
 8003334:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003336:	f7fd fb91 	bl	8000a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800333a:	b008      	add	sp, #32
 800333c:	bd10      	pop	{r4, pc}
 800333e:	bf00      	nop
 8003340:	40013000 	.word	0x40013000

08003344 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_MspInit+0x2c>)
 8003346:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003348:	f042 0201 	orr.w	r2, r2, #1
 800334c:	661a      	str	r2, [r3, #96]	; 0x60
 800334e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003350:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003352:	f002 0201 	and.w	r2, r2, #1
 8003356:	9200      	str	r2, [sp, #0]
 8003358:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800335a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800335c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003360:	659a      	str	r2, [r3, #88]	; 0x58
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800336c:	b002      	add	sp, #8
 800336e:	4770      	bx	lr
 8003370:	40021000 	.word	0x40021000

08003374 <NMI_Handler>:
 8003374:	4770      	bx	lr

08003376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003376:	e7fe      	b.n	8003376 <HardFault_Handler>

08003378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003378:	e7fe      	b.n	8003378 <MemManage_Handler>

0800337a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800337a:	e7fe      	b.n	800337a <BusFault_Handler>

0800337c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800337c:	e7fe      	b.n	800337c <UsageFault_Handler>

0800337e <SVC_Handler>:
 800337e:	4770      	bx	lr

08003380 <DebugMon_Handler>:
 8003380:	4770      	bx	lr

08003382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003382:	4770      	bx	lr

08003384 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003384:	f7fd bab2 	b.w	80008ec <HAL_IncTick>

08003388 <TAMP_STAMP_IRQHandler>:
void TAMP_STAMP_IRQHandler(void)
{
  /* USER CODE BEGIN TAMP_STAMP_IRQn 0 */

  /* USER CODE END TAMP_STAMP_IRQn 0 */
  HAL_RTCEx_TamperTimeStampIRQHandler(&hrtc);
 8003388:	4801      	ldr	r0, [pc, #4]	; (8003390 <TAMP_STAMP_IRQHandler+0x8>)
 800338a:	f7ff b8f7 	b.w	800257c <HAL_RTCEx_TamperTimeStampIRQHandler>
 800338e:	bf00      	nop
 8003390:	200000b0 	.word	0x200000b0

08003394 <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003394:	4801      	ldr	r0, [pc, #4]	; (800339c <RTC_WKUP_IRQHandler+0x8>)
 8003396:	f7ff b867 	b.w	8002468 <HAL_RTCEx_WakeUpTimerIRQHandler>
 800339a:	bf00      	nop
 800339c:	200000b0 	.word	0x200000b0

080033a0 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80033a0:	2001      	movs	r0, #1
 80033a2:	f7fd bcdb 	b.w	8000d5c <HAL_GPIO_EXTI_IRQHandler>

080033a6 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80033a6:	2008      	movs	r0, #8
 80033a8:	f7fd bcd8 	b.w	8000d5c <HAL_GPIO_EXTI_IRQHandler>

080033ac <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033ac:	4801      	ldr	r0, [pc, #4]	; (80033b4 <USART2_IRQHandler+0x8>)
 80033ae:	f7ff b99f 	b.w	80026f0 <HAL_UART_IRQHandler>
 80033b2:	bf00      	nop
 80033b4:	20000138 	.word	0x20000138

080033b8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033b8:	490f      	ldr	r1, [pc, #60]	; (80033f8 <SystemInit+0x40>)
 80033ba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80033be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <SystemInit+0x44>)
 80033c8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80033ca:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80033d2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80033da:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80033de:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80033e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033ec:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80033ee:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033f4:	608b      	str	r3, [r1, #8]
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00
 80033fc:	40021000 	.word	0x40021000

08003400 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003400:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003402:	480c      	ldr	r0, [pc, #48]	; (8003434 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <MX_USART2_UART_Init+0x38>)
 8003406:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800340a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800340e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003410:	2300      	movs	r3, #0
 8003412:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003414:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003416:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003418:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800341a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800341c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800341e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003420:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003422:	f7ff fcab 	bl	8002d7c <HAL_UART_Init>
 8003426:	b118      	cbz	r0, 8003430 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8003428:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800342c:	f7ff be42 	b.w	80030b4 <Error_Handler>
 8003430:	bd08      	pop	{r3, pc}
 8003432:	bf00      	nop
 8003434:	20000138 	.word	0x20000138
 8003438:	40004400 	.word	0x40004400

0800343c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800343c:	b510      	push	{r4, lr}
 800343e:	4604      	mov	r4, r0
 8003440:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003442:	2214      	movs	r2, #20
 8003444:	2100      	movs	r1, #0
 8003446:	a803      	add	r0, sp, #12
 8003448:	f000 f88f 	bl	800356a <memset>
  if(uartHandle->Instance==USART2)
 800344c:	6822      	ldr	r2, [r4, #0]
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_UART_MspInit+0x6c>)
 8003450:	429a      	cmp	r2, r3
 8003452:	d127      	bne.n	80034a4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003454:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003458:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800345a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800345c:	4813      	ldr	r0, [pc, #76]	; (80034ac <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800345e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003462:	659a      	str	r2, [r3, #88]	; 0x58
 8003464:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003466:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800346a:	9201      	str	r2, [sp, #4]
 800346c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800346e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003470:	f042 0208 	orr.w	r2, r2, #8
 8003474:	64da      	str	r2, [r3, #76]	; 0x4c
 8003476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	9302      	str	r3, [sp, #8]
 800347e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003480:	2360      	movs	r3, #96	; 0x60
 8003482:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003488:	2303      	movs	r3, #3
 800348a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800348c:	2307      	movs	r3, #7
 800348e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003490:	f7fd fae4 	bl	8000a5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	2026      	movs	r0, #38	; 0x26
 8003498:	4611      	mov	r1, r2
 800349a:	f7fd fa47 	bl	800092c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800349e:	2026      	movs	r0, #38	; 0x26
 80034a0:	f7fd fa78 	bl	8000994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80034a4:	b008      	add	sp, #32
 80034a6:	bd10      	pop	{r4, pc}
 80034a8:	40004400 	.word	0x40004400
 80034ac:	48000c00 	.word	0x48000c00

080034b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80034b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80034b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80034b6:	e003      	b.n	80034c0 <LoopCopyDataInit>

080034b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80034ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80034bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80034be:	3104      	adds	r1, #4

080034c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80034c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80034c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80034c8:	d3f6      	bcc.n	80034b8 <CopyDataInit>
	ldr	r2, =_sbss
 80034ca:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80034cc:	e002      	b.n	80034d4 <LoopFillZerobss>

080034ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80034ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80034d0:	f842 3b04 	str.w	r3, [r2], #4

080034d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <LoopForever+0x16>)
	cmp	r2, r3
 80034d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80034d8:	d3f9      	bcc.n	80034ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034da:	f7ff ff6d 	bl	80033b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034de:	f000 f811 	bl	8003504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034e2:	f7ff fd69 	bl	8002fb8 <main>

080034e6 <LoopForever>:

LoopForever:
    b LoopForever
 80034e6:	e7fe      	b.n	80034e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80034e8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80034ec:	08003634 	.word	0x08003634
	ldr	r0, =_sdata
 80034f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80034f4:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 80034f8:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 80034fc:	200001b0 	.word	0x200001b0

08003500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003500:	e7fe      	b.n	8003500 <ADC1_2_IRQHandler>
	...

08003504 <__libc_init_array>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	4e0d      	ldr	r6, [pc, #52]	; (800353c <__libc_init_array+0x38>)
 8003508:	4c0d      	ldr	r4, [pc, #52]	; (8003540 <__libc_init_array+0x3c>)
 800350a:	1ba4      	subs	r4, r4, r6
 800350c:	10a4      	asrs	r4, r4, #2
 800350e:	2500      	movs	r5, #0
 8003510:	42a5      	cmp	r5, r4
 8003512:	d109      	bne.n	8003528 <__libc_init_array+0x24>
 8003514:	4e0b      	ldr	r6, [pc, #44]	; (8003544 <__libc_init_array+0x40>)
 8003516:	4c0c      	ldr	r4, [pc, #48]	; (8003548 <__libc_init_array+0x44>)
 8003518:	f000 f838 	bl	800358c <_init>
 800351c:	1ba4      	subs	r4, r4, r6
 800351e:	10a4      	asrs	r4, r4, #2
 8003520:	2500      	movs	r5, #0
 8003522:	42a5      	cmp	r5, r4
 8003524:	d105      	bne.n	8003532 <__libc_init_array+0x2e>
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800352c:	4798      	blx	r3
 800352e:	3501      	adds	r5, #1
 8003530:	e7ee      	b.n	8003510 <__libc_init_array+0xc>
 8003532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003536:	4798      	blx	r3
 8003538:	3501      	adds	r5, #1
 800353a:	e7f2      	b.n	8003522 <__libc_init_array+0x1e>
 800353c:	0800362c 	.word	0x0800362c
 8003540:	0800362c 	.word	0x0800362c
 8003544:	0800362c 	.word	0x0800362c
 8003548:	08003630 	.word	0x08003630

0800354c <memcmp>:
 800354c:	b510      	push	{r4, lr}
 800354e:	3901      	subs	r1, #1
 8003550:	4402      	add	r2, r0
 8003552:	4290      	cmp	r0, r2
 8003554:	d101      	bne.n	800355a <memcmp+0xe>
 8003556:	2000      	movs	r0, #0
 8003558:	bd10      	pop	{r4, pc}
 800355a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800355e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003562:	42a3      	cmp	r3, r4
 8003564:	d0f5      	beq.n	8003552 <memcmp+0x6>
 8003566:	1b18      	subs	r0, r3, r4
 8003568:	bd10      	pop	{r4, pc}

0800356a <memset>:
 800356a:	4402      	add	r2, r0
 800356c:	4603      	mov	r3, r0
 800356e:	4293      	cmp	r3, r2
 8003570:	d100      	bne.n	8003574 <memset+0xa>
 8003572:	4770      	bx	lr
 8003574:	f803 1b01 	strb.w	r1, [r3], #1
 8003578:	e7f9      	b.n	800356e <memset+0x4>

0800357a <strcpy>:
 800357a:	4603      	mov	r3, r0
 800357c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003580:	f803 2b01 	strb.w	r2, [r3], #1
 8003584:	2a00      	cmp	r2, #0
 8003586:	d1f9      	bne.n	800357c <strcpy+0x2>
 8003588:	4770      	bx	lr
	...

0800358c <_init>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr

08003598 <_fini>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	bf00      	nop
 800359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359e:	bc08      	pop	{r3}
 80035a0:	469e      	mov	lr, r3
 80035a2:	4770      	bx	lr
