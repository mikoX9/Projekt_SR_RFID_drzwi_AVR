
SZEZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080023b8  080023b8  000123b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800241c  0800241c  0001241c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002420  08002420  00012420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08002424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a8  20000004  08002428  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001ac  08002428  000201ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010342  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028d8  00000000  00000000  00030376  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000072b0  00000000  00000000  00032c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b50  00000000  00000000  00039f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ce8  00000000  00000000  0003aa50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005f63  00000000  00000000  0003b738  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003e73  00000000  00000000  0004169b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004550e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001f14  00000000  00000000  0004558c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023a0 	.word	0x080023a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080023a0 	.word	0x080023a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <HAL_InitTick+0x2c>)
{
 80004dc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e8:	f000 f884 	bl	80005f4 <HAL_SYSTICK_Config>
 80004ec:	4604      	mov	r4, r0
 80004ee:	b938      	cbnz	r0, 8000500 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004f0:	4602      	mov	r2, r0
 80004f2:	4629      	mov	r1, r5
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f000 f83c 	bl	8000574 <HAL_NVIC_SetPriority>
 80004fc:	4620      	mov	r0, r4
 80004fe:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000500:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000502:	bd38      	pop	{r3, r4, r5, pc}
 8000504:	20000000 	.word	0x20000000

08000508 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <HAL_Init+0x28>)
 800050a:	6813      	ldr	r3, [r2, #0]
 800050c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8000510:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000512:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000516:	f000 f81b 	bl	8000550 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800051a:	2000      	movs	r0, #0
 800051c:	f7ff ffdc 	bl	80004d8 <HAL_InitTick>
 8000520:	4604      	mov	r4, r0
 8000522:	b918      	cbnz	r0, 800052c <HAL_Init+0x24>
    HAL_MspInit();
 8000524:	f001 fe3c 	bl	80021a0 <HAL_MspInit>
}
 8000528:	4620      	mov	r0, r4
 800052a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800052c:	2401      	movs	r4, #1
 800052e:	e7fb      	b.n	8000528 <HAL_Init+0x20>
 8000530:	40022000 	.word	0x40022000

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000534:	4a02      	ldr	r2, [pc, #8]	; (8000540 <HAL_IncTick+0xc>)
 8000536:	6813      	ldr	r3, [r2, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000024 	.word	0x20000024

08000544 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <HAL_GetTick+0x8>)
 8000546:	6818      	ldr	r0, [r3, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000024 	.word	0x20000024

08000550 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000552:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000554:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000558:	041b      	lsls	r3, r3, #16
 800055a:	0c1b      	lsrs	r3, r3, #16
 800055c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000560:	0200      	lsls	r0, r0, #8
 8000562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000566:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800056a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800056c:	60d3      	str	r3, [r2, #12]
 800056e:	4770      	bx	lr
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	68dc      	ldr	r4, [r3, #12]
 800057a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000582:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000584:	2b04      	cmp	r3, #4
 8000586:	bf28      	it	cs
 8000588:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058c:	f04f 0501 	mov.w	r5, #1
 8000590:	fa05 f303 	lsl.w	r3, r5, r3
 8000594:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000598:	bf8c      	ite	hi
 800059a:	3c03      	subhi	r4, #3
 800059c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059e:	4019      	ands	r1, r3
 80005a0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005a2:	fa05 f404 	lsl.w	r4, r5, r4
 80005a6:	3c01      	subs	r4, #1
 80005a8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	ea42 0201 	orr.w	r2, r2, r1
 80005b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	bfaf      	iteee	ge
 80005b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	f000 000f 	andlt.w	r0, r0, #15
 80005be:	4b06      	ldrlt	r3, [pc, #24]	; (80005d8 <HAL_NVIC_SetPriority+0x64>)
 80005c0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	bfa5      	ittet	ge
 80005c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005c8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	e000ed14 	.word	0xe000ed14

080005dc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005dc:	0942      	lsrs	r2, r0, #5
 80005de:	2301      	movs	r3, #1
 80005e0:	f000 001f 	and.w	r0, r0, #31
 80005e4:	fa03 f000 	lsl.w	r0, r3, r0
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <HAL_NVIC_EnableIRQ+0x14>)
 80005ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005ee:	4770      	bx	lr
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f4:	3801      	subs	r0, #1
 80005f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005fa:	d20a      	bcs.n	8000612 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000600:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	21f0      	movs	r1, #240	; 0xf0
 8000604:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000608:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800060c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	e000e010 	.word	0xe000e010
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000620:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8000624:	2a02      	cmp	r2, #2
{
 8000626:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000628:	d003      	beq.n	8000632 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800062a:	2204      	movs	r2, #4
 800062c:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800062e:	2001      	movs	r0, #1
 8000630:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000632:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000634:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000636:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000638:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800063a:	f021 010e 	bic.w	r1, r1, #14
 800063e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	f021 0101 	bic.w	r1, r1, #1
 8000646:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000648:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800064a:	2101      	movs	r1, #1
 800064c:	f002 021c 	and.w	r2, r2, #28
 8000650:	fa01 f202 	lsl.w	r2, r1, r2
 8000654:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000656:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000658:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800065c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8000660:	b113      	cbz	r3, 8000668 <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 8000662:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000664:	4620      	mov	r0, r4
 8000666:	bd10      	pop	{r4, pc}
 8000668:	4618      	mov	r0, r3
    }
  }
  return status;
}
 800066a:	bd10      	pop	{r4, pc}

0800066c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800066c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000670:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000672:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000674:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000820 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000678:	4c67      	ldr	r4, [pc, #412]	; (8000818 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800067a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 800067c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800067e:	9a01      	ldr	r2, [sp, #4]
 8000680:	40da      	lsrs	r2, r3
 8000682:	d102      	bne.n	800068a <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000684:	b005      	add	sp, #20
 8000686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800068a:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 800068c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800068e:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000690:	ea12 0e06 	ands.w	lr, r2, r6
 8000694:	f000 80b1 	beq.w	80007fa <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000698:	684a      	ldr	r2, [r1, #4]
 800069a:	f022 0710 	bic.w	r7, r2, #16
 800069e:	2f02      	cmp	r7, #2
 80006a0:	d116      	bne.n	80006d0 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80006a2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80006a6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006aa:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80006ae:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006b2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80006b6:	f04f 0c0f 	mov.w	ip, #15
 80006ba:	fa0c fc0a 	lsl.w	ip, ip, sl
 80006be:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006c2:	690d      	ldr	r5, [r1, #16]
 80006c4:	fa05 f50a 	lsl.w	r5, r5, sl
 80006c8:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80006cc:	f8c9 5020 	str.w	r5, [r9, #32]
 80006d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006d4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006d6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006da:	fa05 f50c 	lsl.w	r5, r5, ip
 80006de:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006e0:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006e4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006e8:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ec:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006ee:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006f4:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f8:	d811      	bhi.n	800071e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80006fa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006fc:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000700:	68cf      	ldr	r7, [r1, #12]
 8000702:	fa07 f70c 	lsl.w	r7, r7, ip
 8000706:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800070a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800070c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800070e:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000712:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000716:	409f      	lsls	r7, r3
 8000718:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 800071c:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800071e:	f1ba 0f03 	cmp.w	sl, #3
 8000722:	d107      	bne.n	8000734 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000724:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000726:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800072a:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800072e:	409f      	lsls	r7, r3
 8000730:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000732:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000734:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000736:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000738:	688e      	ldr	r6, [r1, #8]
 800073a:	fa06 f60c 	lsl.w	r6, r6, ip
 800073e:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000740:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000742:	00d5      	lsls	r5, r2, #3
 8000744:	d559      	bpl.n	80007fa <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800074a:	f045 0501 	orr.w	r5, r5, #1
 800074e:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000752:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000756:	f023 0603 	bic.w	r6, r3, #3
 800075a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800075e:	f005 0501 	and.w	r5, r5, #1
 8000762:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000766:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000768:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800076e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000770:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000774:	270f      	movs	r7, #15
 8000776:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800077a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800077e:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000782:	d03c      	beq.n	80007fe <HAL_GPIO_Init+0x192>
 8000784:	4d25      	ldr	r5, [pc, #148]	; (800081c <HAL_GPIO_Init+0x1b0>)
 8000786:	42a8      	cmp	r0, r5
 8000788:	d03b      	beq.n	8000802 <HAL_GPIO_Init+0x196>
 800078a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078e:	42a8      	cmp	r0, r5
 8000790:	d039      	beq.n	8000806 <HAL_GPIO_Init+0x19a>
 8000792:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000796:	42a8      	cmp	r0, r5
 8000798:	d037      	beq.n	800080a <HAL_GPIO_Init+0x19e>
 800079a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800079e:	42a8      	cmp	r0, r5
 80007a0:	d035      	beq.n	800080e <HAL_GPIO_Init+0x1a2>
 80007a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007a6:	42a8      	cmp	r0, r5
 80007a8:	d033      	beq.n	8000812 <HAL_GPIO_Init+0x1a6>
 80007aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ae:	42a8      	cmp	r0, r5
 80007b0:	bf14      	ite	ne
 80007b2:	2507      	movne	r5, #7
 80007b4:	2506      	moveq	r5, #6
 80007b6:	fa05 f50c 	lsl.w	r5, r5, ip
 80007ba:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007bc:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80007be:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80007c0:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007c4:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 80007c6:	bf54      	ite	pl
 80007c8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007ca:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80007ce:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80007d0:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007d2:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 80007d4:	bf54      	ite	pl
 80007d6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007d8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80007dc:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80007de:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007e0:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 80007e2:	bf54      	ite	pl
 80007e4:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007e6:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80007ea:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80007ec:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ee:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80007f0:	bf54      	ite	pl
 80007f2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007f4:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80007f8:	60e5      	str	r5, [r4, #12]
    position++;
 80007fa:	3301      	adds	r3, #1
 80007fc:	e73f      	b.n	800067e <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007fe:	2500      	movs	r5, #0
 8000800:	e7d9      	b.n	80007b6 <HAL_GPIO_Init+0x14a>
 8000802:	2501      	movs	r5, #1
 8000804:	e7d7      	b.n	80007b6 <HAL_GPIO_Init+0x14a>
 8000806:	2502      	movs	r5, #2
 8000808:	e7d5      	b.n	80007b6 <HAL_GPIO_Init+0x14a>
 800080a:	2503      	movs	r5, #3
 800080c:	e7d3      	b.n	80007b6 <HAL_GPIO_Init+0x14a>
 800080e:	2504      	movs	r5, #4
 8000810:	e7d1      	b.n	80007b6 <HAL_GPIO_Init+0x14a>
 8000812:	2505      	movs	r5, #5
 8000814:	e7cf      	b.n	80007b6 <HAL_GPIO_Init+0x14a>
 8000816:	bf00      	nop
 8000818:	40010400 	.word	0x40010400
 800081c:	48000400 	.word	0x48000400
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000824:	b10a      	cbz	r2, 800082a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000826:	6181      	str	r1, [r0, #24]
 8000828:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800082a:	6281      	str	r1, [r0, #40]	; 0x28
 800082c:	4770      	bx	lr

0800082e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800082e:	6943      	ldr	r3, [r0, #20]
 8000830:	4059      	eors	r1, r3
 8000832:	6141      	str	r1, [r0, #20]
 8000834:	4770      	bx	lr
	...

08000838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000838:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800083c:	6959      	ldr	r1, [r3, #20]
 800083e:	4201      	tst	r1, r0
 8000840:	d002      	beq.n	8000848 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000842:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000844:	f001 fb2a 	bl	8001e9c <HAL_GPIO_EXTI_Callback>
 8000848:	bd08      	pop	{r3, pc}
 800084a:	bf00      	nop
 800084c:	40010400 	.word	0x40010400

08000850 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <HAL_PWREx_GetVoltageRange+0xc>)
 8000852:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000854:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40007000 	.word	0x40007000

08000860 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000862:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000864:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000868:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800086c:	d11c      	bne.n	80008a8 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800086e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000872:	d015      	beq.n	80008a0 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800087a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800087e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000880:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000882:	6811      	ldr	r1, [r2, #0]
 8000884:	2232      	movs	r2, #50	; 0x32
 8000886:	434a      	muls	r2, r1
 8000888:	490f      	ldr	r1, [pc, #60]	; (80008c8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800088a:	fbb2 f2f1 	udiv	r2, r2, r1
 800088e:	4619      	mov	r1, r3
 8000890:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000892:	6958      	ldr	r0, [r3, #20]
 8000894:	0540      	lsls	r0, r0, #21
 8000896:	d500      	bpl.n	800089a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000898:	b922      	cbnz	r2, 80008a4 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800089a:	694b      	ldr	r3, [r1, #20]
 800089c:	055b      	lsls	r3, r3, #21
 800089e:	d40d      	bmi.n	80008bc <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80008a0:	2000      	movs	r0, #0
 80008a2:	4770      	bx	lr
        wait_loop_index--;
 80008a4:	3a01      	subs	r2, #1
 80008a6:	e7f4      	b.n	8000892 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80008a8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ac:	bf1f      	itttt	ne
 80008ae:	681a      	ldrne	r2, [r3, #0]
 80008b0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80008b4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80008b8:	601a      	strne	r2, [r3, #0]
 80008ba:	e7f1      	b.n	80008a0 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80008bc:	2003      	movs	r0, #3
}
 80008be:	4770      	bx	lr
 80008c0:	40007000 	.word	0x40007000
 80008c4:	20000000 	.word	0x20000000
 80008c8:	000f4240 	.word	0x000f4240

080008cc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80008cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008d0:	9d06      	ldr	r5, [sp, #24]
 80008d2:	4604      	mov	r4, r0
 80008d4:	460f      	mov	r7, r1
 80008d6:	4616      	mov	r6, r2
 80008d8:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80008da:	6821      	ldr	r1, [r4, #0]
 80008dc:	688a      	ldr	r2, [r1, #8]
 80008de:	423a      	tst	r2, r7
 80008e0:	bf14      	ite	ne
 80008e2:	2201      	movne	r2, #1
 80008e4:	2200      	moveq	r2, #0
 80008e6:	42b2      	cmp	r2, r6
 80008e8:	d102      	bne.n	80008f0 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80008ea:	2000      	movs	r0, #0
}
 80008ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80008f0:	1c6b      	adds	r3, r5, #1
 80008f2:	d0f3      	beq.n	80008dc <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008f4:	f7ff fe26 	bl	8000544 <HAL_GetTick>
 80008f8:	eba0 0008 	sub.w	r0, r0, r8
 80008fc:	4285      	cmp	r5, r0
 80008fe:	d301      	bcc.n	8000904 <QSPI_WaitFlagStateUntilTimeout+0x38>
 8000900:	2d00      	cmp	r5, #0
 8000902:	d1ea      	bne.n	80008da <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8000904:	2304      	movs	r3, #4
 8000906:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800090a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000912:	2001      	movs	r0, #1
 8000914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000918 <HAL_QSPI_Init>:
{
 8000918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800091a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800091c:	f7ff fe12 	bl	8000544 <HAL_GetTick>
 8000920:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8000922:	2c00      	cmp	r4, #0
 8000924:	d049      	beq.n	80009ba <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8000926:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800092a:	2b01      	cmp	r3, #1
 800092c:	d047      	beq.n	80009be <HAL_QSPI_Init+0xa6>
 800092e:	2301      	movs	r3, #1
 8000930:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8000934:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000938:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800093c:	b93a      	cbnz	r2, 800094e <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 800093e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8000942:	4620      	mov	r0, r4
 8000944:	f001 fb3e 	bl	8001fc4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8000948:	f241 3388 	movw	r3, #5000	; 0x1388
 800094c:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800094e:	6820      	ldr	r0, [r4, #0]
 8000950:	68a1      	ldr	r1, [r4, #8]
 8000952:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000954:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8000956:	3901      	subs	r1, #1
 8000958:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800095c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000960:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000962:	2120      	movs	r1, #32
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2200      	movs	r2, #0
 8000968:	462b      	mov	r3, r5
 800096a:	4620      	mov	r0, r4
 800096c:	f7ff ffae 	bl	80008cc <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8000970:	b9f0      	cbnz	r0, 80009b0 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8000972:	6822      	ldr	r2, [r4, #0]
 8000974:	6865      	ldr	r5, [r4, #4]
 8000976:	6811      	ldr	r1, [r2, #0]
 8000978:	68e3      	ldr	r3, [r4, #12]
 800097a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800097e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8000982:	f021 0110 	bic.w	r1, r1, #16
 8000986:	430b      	orrs	r3, r1
 8000988:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800098a:	69a1      	ldr	r1, [r4, #24]
 800098c:	6963      	ldr	r3, [r4, #20]
 800098e:	6855      	ldr	r5, [r2, #4]
 8000990:	430b      	orrs	r3, r1
 8000992:	6921      	ldr	r1, [r4, #16]
 8000994:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000998:	490a      	ldr	r1, [pc, #40]	; (80009c4 <HAL_QSPI_Init+0xac>)
 800099a:	4029      	ands	r1, r5
 800099c:	430b      	orrs	r3, r1
 800099e:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80009a0:	6813      	ldr	r3, [r2, #0]
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80009a8:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80009aa:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 80009ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 80009b0:	2300      	movs	r3, #0
 80009b2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80009b6:	b003      	add	sp, #12
 80009b8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80009ba:	2001      	movs	r0, #1
 80009bc:	e7fb      	b.n	80009b6 <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 80009be:	2002      	movs	r0, #2
 80009c0:	e7f9      	b.n	80009b6 <HAL_QSPI_Init+0x9e>
 80009c2:	bf00      	nop
 80009c4:	ffe0f8fe 	.word	0xffe0f8fe

080009c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80009c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80009ca:	4d1e      	ldr	r5, [pc, #120]	; (8000a44 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80009cc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80009ce:	00da      	lsls	r2, r3, #3
{
 80009d0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80009d2:	d518      	bpl.n	8000a06 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80009d4:	f7ff ff3c 	bl	8000850 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80009dc:	d123      	bne.n	8000a26 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80009de:	2c80      	cmp	r4, #128	; 0x80
 80009e0:	d929      	bls.n	8000a36 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80009e2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80009e4:	bf8c      	ite	hi
 80009e6:	2002      	movhi	r0, #2
 80009e8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80009ea:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80009ec:	6813      	ldr	r3, [r2, #0]
 80009ee:	f023 0307 	bic.w	r3, r3, #7
 80009f2:	4303      	orrs	r3, r0
 80009f4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80009f6:	6813      	ldr	r3, [r2, #0]
 80009f8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80009fc:	1a18      	subs	r0, r3, r0
 80009fe:	bf18      	it	ne
 8000a00:	2001      	movne	r0, #1
 8000a02:	b003      	add	sp, #12
 8000a04:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	65ab      	str	r3, [r5, #88]	; 0x58
 8000a0e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000a18:	f7ff ff1a 	bl	8000850 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000a1c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a22:	65ab      	str	r3, [r5, #88]	; 0x58
 8000a24:	e7d8      	b.n	80009d8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000a26:	2c80      	cmp	r4, #128	; 0x80
 8000a28:	d807      	bhi.n	8000a3a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000a2a:	d008      	beq.n	8000a3e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000a2c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000a30:	4258      	negs	r0, r3
 8000a32:	4158      	adcs	r0, r3
 8000a34:	e7d9      	b.n	80009ea <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000a36:	2000      	movs	r0, #0
 8000a38:	e7d7      	b.n	80009ea <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	e7d5      	b.n	80009ea <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000a3e:	2002      	movs	r0, #2
 8000a40:	e7d3      	b.n	80009ea <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8000a4e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a50:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a52:	f012 020c 	ands.w	r2, r2, #12
 8000a56:	d005      	beq.n	8000a64 <HAL_RCC_GetSysClockFreq+0x18>
 8000a58:	2a0c      	cmp	r2, #12
 8000a5a:	d115      	bne.n	8000a88 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a5c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000a60:	2901      	cmp	r1, #1
 8000a62:	d118      	bne.n	8000a96 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000a64:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000a66:	4820      	ldr	r0, [pc, #128]	; (8000ae8 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000a68:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000a6a:	bf55      	itete	pl
 8000a6c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000a70:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000a72:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000a76:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000a7a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a7e:	b382      	cbz	r2, 8000ae2 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000a80:	2a0c      	cmp	r2, #12
 8000a82:	d009      	beq.n	8000a98 <HAL_RCC_GetSysClockFreq+0x4c>
 8000a84:	2000      	movs	r0, #0
  return sysclockfreq;
 8000a86:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000a88:	2a04      	cmp	r2, #4
 8000a8a:	d029      	beq.n	8000ae0 <HAL_RCC_GetSysClockFreq+0x94>
 8000a8c:	2a08      	cmp	r2, #8
 8000a8e:	4817      	ldr	r0, [pc, #92]	; (8000aec <HAL_RCC_GetSysClockFreq+0xa0>)
 8000a90:	bf18      	it	ne
 8000a92:	2000      	movne	r0, #0
 8000a94:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000a96:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000a98:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000a9a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000a9c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000aa0:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000aa4:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000aa6:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000aaa:	d005      	beq.n	8000ab8 <HAL_RCC_GetSysClockFreq+0x6c>
 8000aac:	2903      	cmp	r1, #3
 8000aae:	d012      	beq.n	8000ad6 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ab0:	68d9      	ldr	r1, [r3, #12]
 8000ab2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000ab6:	e003      	b.n	8000ac0 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ab8:	68d9      	ldr	r1, [r3, #12]
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000abc:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000ac0:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ac2:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000ac6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000aca:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000acc:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000ace:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000ad0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ad4:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ad6:	68d9      	ldr	r1, [r3, #12]
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <HAL_RCC_GetSysClockFreq+0xa0>)
 8000ada:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000ade:	e7ef      	b.n	8000ac0 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000ae2:	4770      	bx	lr
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	080023e4 	.word	0x080023e4
 8000aec:	007a1200 	.word	0x007a1200
 8000af0:	00f42400 	.word	0x00f42400

08000af4 <HAL_RCC_OscConfig>:
{
 8000af4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000af8:	4605      	mov	r5, r0
 8000afa:	b918      	cbnz	r0, 8000b04 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000afc:	2001      	movs	r0, #1
}
 8000afe:	b003      	add	sp, #12
 8000b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b04:	4ca5      	ldr	r4, [pc, #660]	; (8000d9c <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b06:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b08:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b0a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b0c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b0e:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b12:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b16:	d53c      	bpl.n	8000b92 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000b18:	b11e      	cbz	r6, 8000b22 <HAL_RCC_OscConfig+0x2e>
 8000b1a:	2e0c      	cmp	r6, #12
 8000b1c:	d163      	bne.n	8000be6 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000b1e:	2f01      	cmp	r7, #1
 8000b20:	d161      	bne.n	8000be6 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b22:	6823      	ldr	r3, [r4, #0]
 8000b24:	0798      	lsls	r0, r3, #30
 8000b26:	d502      	bpl.n	8000b2e <HAL_RCC_OscConfig+0x3a>
 8000b28:	69ab      	ldr	r3, [r5, #24]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0e6      	beq.n	8000afc <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000b2e:	6823      	ldr	r3, [r4, #0]
 8000b30:	6a28      	ldr	r0, [r5, #32]
 8000b32:	0719      	lsls	r1, r3, #28
 8000b34:	bf56      	itet	pl
 8000b36:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000b3a:	6823      	ldrmi	r3, [r4, #0]
 8000b3c:	091b      	lsrpl	r3, r3, #4
 8000b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b42:	4283      	cmp	r3, r0
 8000b44:	d23a      	bcs.n	8000bbc <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b46:	f7ff ff3f 	bl	80009c8 <RCC_SetFlashLatencyFromMSIRange>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	d1d6      	bne.n	8000afc <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	6023      	str	r3, [r4, #0]
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	6a2a      	ldr	r2, [r5, #32]
 8000b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b62:	6863      	ldr	r3, [r4, #4]
 8000b64:	69ea      	ldr	r2, [r5, #28]
 8000b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b6e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000b70:	f7ff ff6c 	bl	8000a4c <HAL_RCC_GetSysClockFreq>
 8000b74:	68a3      	ldr	r3, [r4, #8]
 8000b76:	4a8a      	ldr	r2, [pc, #552]	; (8000da0 <HAL_RCC_OscConfig+0x2ac>)
 8000b78:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
 8000b7e:	f003 031f 	and.w	r3, r3, #31
 8000b82:	40d8      	lsrs	r0, r3
 8000b84:	4b87      	ldr	r3, [pc, #540]	; (8000da4 <HAL_RCC_OscConfig+0x2b0>)
 8000b86:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff fca5 	bl	80004d8 <HAL_InitTick>
        if(status != HAL_OK)
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d1b5      	bne.n	8000afe <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b92:	682b      	ldr	r3, [r5, #0]
 8000b94:	07d8      	lsls	r0, r3, #31
 8000b96:	d45d      	bmi.n	8000c54 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b98:	682b      	ldr	r3, [r5, #0]
 8000b9a:	0799      	lsls	r1, r3, #30
 8000b9c:	f100 809c 	bmi.w	8000cd8 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ba0:	682b      	ldr	r3, [r5, #0]
 8000ba2:	0718      	lsls	r0, r3, #28
 8000ba4:	f100 80d0 	bmi.w	8000d48 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	0759      	lsls	r1, r3, #29
 8000bac:	f100 80fc 	bmi.w	8000da8 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000bb0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 8165 	bne.w	8000e82 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7a0      	b.n	8000afe <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	6023      	str	r3, [r4, #0]
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bca:	4303      	orrs	r3, r0
 8000bcc:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bce:	6863      	ldr	r3, [r4, #4]
 8000bd0:	69ea      	ldr	r2, [r5, #28]
 8000bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000bd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000bda:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bdc:	f7ff fef4 	bl	80009c8 <RCC_SetFlashLatencyFromMSIRange>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	d0c5      	beq.n	8000b70 <HAL_RCC_OscConfig+0x7c>
 8000be4:	e78a      	b.n	8000afc <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000be6:	69ab      	ldr	r3, [r5, #24]
 8000be8:	b31b      	cbz	r3, 8000c32 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8000bea:	6823      	ldr	r3, [r4, #0]
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bf2:	f7ff fca7 	bl	8000544 <HAL_GetTick>
 8000bf6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	079a      	lsls	r2, r3, #30
 8000bfc:	d511      	bpl.n	8000c22 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6023      	str	r3, [r4, #0]
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	6a2a      	ldr	r2, [r5, #32]
 8000c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c12:	6863      	ldr	r3, [r4, #4]
 8000c14:	69ea      	ldr	r2, [r5, #28]
 8000c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c1e:	6063      	str	r3, [r4, #4]
 8000c20:	e7b7      	b.n	8000b92 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c22:	f7ff fc8f 	bl	8000544 <HAL_GetTick>
 8000c26:	eba0 0008 	sub.w	r0, r0, r8
 8000c2a:	2802      	cmp	r0, #2
 8000c2c:	d9e4      	bls.n	8000bf8 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8000c2e:	2003      	movs	r0, #3
 8000c30:	e765      	b.n	8000afe <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	f023 0301 	bic.w	r3, r3, #1
 8000c38:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c3a:	f7ff fc83 	bl	8000544 <HAL_GetTick>
 8000c3e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c40:	6823      	ldr	r3, [r4, #0]
 8000c42:	079b      	lsls	r3, r3, #30
 8000c44:	d5a5      	bpl.n	8000b92 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c46:	f7ff fc7d 	bl	8000544 <HAL_GetTick>
 8000c4a:	eba0 0008 	sub.w	r0, r0, r8
 8000c4e:	2802      	cmp	r0, #2
 8000c50:	d9f6      	bls.n	8000c40 <HAL_RCC_OscConfig+0x14c>
 8000c52:	e7ec      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000c54:	2e08      	cmp	r6, #8
 8000c56:	d003      	beq.n	8000c60 <HAL_RCC_OscConfig+0x16c>
 8000c58:	2e0c      	cmp	r6, #12
 8000c5a:	d108      	bne.n	8000c6e <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8000c5c:	2f03      	cmp	r7, #3
 8000c5e:	d106      	bne.n	8000c6e <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c60:	6823      	ldr	r3, [r4, #0]
 8000c62:	039a      	lsls	r2, r3, #14
 8000c64:	d598      	bpl.n	8000b98 <HAL_RCC_OscConfig+0xa4>
 8000c66:	686b      	ldr	r3, [r5, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d195      	bne.n	8000b98 <HAL_RCC_OscConfig+0xa4>
 8000c6c:	e746      	b.n	8000afc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c6e:	686b      	ldr	r3, [r5, #4]
 8000c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c74:	d110      	bne.n	8000c98 <HAL_RCC_OscConfig+0x1a4>
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c7e:	f7ff fc61 	bl	8000544 <HAL_GetTick>
 8000c82:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c84:	6823      	ldr	r3, [r4, #0]
 8000c86:	039b      	lsls	r3, r3, #14
 8000c88:	d486      	bmi.n	8000b98 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c8a:	f7ff fc5b 	bl	8000544 <HAL_GetTick>
 8000c8e:	eba0 0008 	sub.w	r0, r0, r8
 8000c92:	2864      	cmp	r0, #100	; 0x64
 8000c94:	d9f6      	bls.n	8000c84 <HAL_RCC_OscConfig+0x190>
 8000c96:	e7ca      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c9c:	d104      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x1b4>
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca4:	6023      	str	r3, [r4, #0]
 8000ca6:	e7e6      	b.n	8000c76 <HAL_RCC_OscConfig+0x182>
 8000ca8:	6822      	ldr	r2, [r4, #0]
 8000caa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cae:	6022      	str	r2, [r4, #0]
 8000cb0:	6822      	ldr	r2, [r4, #0]
 8000cb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cb6:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1e0      	bne.n	8000c7e <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fc42 	bl	8000544 <HAL_GetTick>
 8000cc0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	0398      	lsls	r0, r3, #14
 8000cc6:	f57f af67 	bpl.w	8000b98 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cca:	f7ff fc3b 	bl	8000544 <HAL_GetTick>
 8000cce:	eba0 0008 	sub.w	r0, r0, r8
 8000cd2:	2864      	cmp	r0, #100	; 0x64
 8000cd4:	d9f5      	bls.n	8000cc2 <HAL_RCC_OscConfig+0x1ce>
 8000cd6:	e7aa      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000cd8:	2e04      	cmp	r6, #4
 8000cda:	d003      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x1f0>
 8000cdc:	2e0c      	cmp	r6, #12
 8000cde:	d110      	bne.n	8000d02 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8000ce0:	2f02      	cmp	r7, #2
 8000ce2:	d10e      	bne.n	8000d02 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	0559      	lsls	r1, r3, #21
 8000ce8:	d503      	bpl.n	8000cf2 <HAL_RCC_OscConfig+0x1fe>
 8000cea:	68eb      	ldr	r3, [r5, #12]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f43f af05 	beq.w	8000afc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf2:	6863      	ldr	r3, [r4, #4]
 8000cf4:	692a      	ldr	r2, [r5, #16]
 8000cf6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000cfa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000cfe:	6063      	str	r3, [r4, #4]
 8000d00:	e74e      	b.n	8000ba0 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d02:	68eb      	ldr	r3, [r5, #12]
 8000d04:	b17b      	cbz	r3, 8000d26 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fc19 	bl	8000544 <HAL_GetTick>
 8000d12:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	055a      	lsls	r2, r3, #21
 8000d18:	d4eb      	bmi.n	8000cf2 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d1a:	f7ff fc13 	bl	8000544 <HAL_GetTick>
 8000d1e:	1bc0      	subs	r0, r0, r7
 8000d20:	2802      	cmp	r0, #2
 8000d22:	d9f7      	bls.n	8000d14 <HAL_RCC_OscConfig+0x220>
 8000d24:	e783      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fc09 	bl	8000544 <HAL_GetTick>
 8000d32:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d34:	6823      	ldr	r3, [r4, #0]
 8000d36:	055b      	lsls	r3, r3, #21
 8000d38:	f57f af32 	bpl.w	8000ba0 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d3c:	f7ff fc02 	bl	8000544 <HAL_GetTick>
 8000d40:	1bc0      	subs	r0, r0, r7
 8000d42:	2802      	cmp	r0, #2
 8000d44:	d9f6      	bls.n	8000d34 <HAL_RCC_OscConfig+0x240>
 8000d46:	e772      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d48:	696b      	ldr	r3, [r5, #20]
 8000d4a:	b19b      	cbz	r3, 8000d74 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8000d4c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000d58:	f7ff fbf4 	bl	8000544 <HAL_GetTick>
 8000d5c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d5e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d62:	079a      	lsls	r2, r3, #30
 8000d64:	f53f af20 	bmi.w	8000ba8 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d68:	f7ff fbec 	bl	8000544 <HAL_GetTick>
 8000d6c:	1bc0      	subs	r0, r0, r7
 8000d6e:	2802      	cmp	r0, #2
 8000d70:	d9f5      	bls.n	8000d5e <HAL_RCC_OscConfig+0x26a>
 8000d72:	e75c      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8000d74:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000d80:	f7ff fbe0 	bl	8000544 <HAL_GetTick>
 8000d84:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d86:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000d8a:	079b      	lsls	r3, r3, #30
 8000d8c:	f57f af0c 	bpl.w	8000ba8 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d90:	f7ff fbd8 	bl	8000544 <HAL_GetTick>
 8000d94:	1bc0      	subs	r0, r0, r7
 8000d96:	2802      	cmp	r0, #2
 8000d98:	d9f5      	bls.n	8000d86 <HAL_RCC_OscConfig+0x292>
 8000d9a:	e748      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	080023c9 	.word	0x080023c9
 8000da4:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000daa:	00d8      	lsls	r0, r3, #3
 8000dac:	d429      	bmi.n	8000e02 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	65a3      	str	r3, [r4, #88]	; 0x58
 8000db6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000dc0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dc4:	4f5d      	ldr	r7, [pc, #372]	; (8000f3c <HAL_RCC_OscConfig+0x448>)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	05d9      	lsls	r1, r3, #23
 8000dca:	d51d      	bpl.n	8000e08 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dcc:	68ab      	ldr	r3, [r5, #8]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d12b      	bne.n	8000e2a <HAL_RCC_OscConfig+0x336>
 8000dd2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000dde:	f7ff fbb1 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000de2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000de6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000de8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000dec:	079b      	lsls	r3, r3, #30
 8000dee:	d542      	bpl.n	8000e76 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8000df0:	f1b8 0f00 	cmp.w	r8, #0
 8000df4:	f43f aedc 	beq.w	8000bb0 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000df8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	65a3      	str	r3, [r4, #88]	; 0x58
 8000e00:	e6d6      	b.n	8000bb0 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8000e02:	f04f 0800 	mov.w	r8, #0
 8000e06:	e7dd      	b.n	8000dc4 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e10:	f7ff fb98 	bl	8000544 <HAL_GetTick>
 8000e14:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	05da      	lsls	r2, r3, #23
 8000e1a:	d4d7      	bmi.n	8000dcc <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e1c:	f7ff fb92 	bl	8000544 <HAL_GetTick>
 8000e20:	eba0 0009 	sub.w	r0, r0, r9
 8000e24:	2802      	cmp	r0, #2
 8000e26:	d9f6      	bls.n	8000e16 <HAL_RCC_OscConfig+0x322>
 8000e28:	e701      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2a:	2b05      	cmp	r3, #5
 8000e2c:	d106      	bne.n	8000e3c <HAL_RCC_OscConfig+0x348>
 8000e2e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000e3a:	e7ca      	b.n	8000dd2 <HAL_RCC_OscConfig+0x2de>
 8000e3c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000e40:	f022 0201 	bic.w	r2, r2, #1
 8000e44:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000e48:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000e4c:	f022 0204 	bic.w	r2, r2, #4
 8000e50:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1c2      	bne.n	8000dde <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8000e58:	f7ff fb74 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e5c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e60:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e62:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e66:	0798      	lsls	r0, r3, #30
 8000e68:	d5c2      	bpl.n	8000df0 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fb6b 	bl	8000544 <HAL_GetTick>
 8000e6e:	1bc0      	subs	r0, r0, r7
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d9f6      	bls.n	8000e62 <HAL_RCC_OscConfig+0x36e>
 8000e74:	e6db      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e76:	f7ff fb65 	bl	8000544 <HAL_GetTick>
 8000e7a:	1bc0      	subs	r0, r0, r7
 8000e7c:	4548      	cmp	r0, r9
 8000e7e:	d9b3      	bls.n	8000de8 <HAL_RCC_OscConfig+0x2f4>
 8000e80:	e6d5      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000e82:	2e0c      	cmp	r6, #12
 8000e84:	f43f ae3a 	beq.w	8000afc <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e88:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e90:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e92:	d137      	bne.n	8000f04 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8000e94:	f7ff fb56 	bl	8000544 <HAL_GetTick>
 8000e98:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	0199      	lsls	r1, r3, #6
 8000e9e:	d42b      	bmi.n	8000ef8 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ea0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000ea2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ea4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000ea8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000eaa:	3a01      	subs	r2, #1
 8000eac:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000eb0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000eb2:	0912      	lsrs	r2, r2, #4
 8000eb4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000eb8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000eba:	0852      	lsrs	r2, r2, #1
 8000ebc:	3a01      	subs	r2, #1
 8000ebe:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000ec2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000ec4:	0852      	lsrs	r2, r2, #1
 8000ec6:	3a01      	subs	r2, #1
 8000ec8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000ecc:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000ed6:	68e3      	ldr	r3, [r4, #12]
 8000ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000edc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000ede:	f7ff fb31 	bl	8000544 <HAL_GetTick>
 8000ee2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	019a      	lsls	r2, r3, #6
 8000ee8:	f53f ae66 	bmi.w	8000bb8 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eec:	f7ff fb2a 	bl	8000544 <HAL_GetTick>
 8000ef0:	1b40      	subs	r0, r0, r5
 8000ef2:	2802      	cmp	r0, #2
 8000ef4:	d9f6      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x3f0>
 8000ef6:	e69a      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef8:	f7ff fb24 	bl	8000544 <HAL_GetTick>
 8000efc:	1b80      	subs	r0, r0, r6
 8000efe:	2802      	cmp	r0, #2
 8000f00:	d9cb      	bls.n	8000e9a <HAL_RCC_OscConfig+0x3a6>
 8000f02:	e694      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000f0a:	bf02      	ittt	eq
 8000f0c:	68e3      	ldreq	r3, [r4, #12]
 8000f0e:	f023 0303 	biceq.w	r3, r3, #3
 8000f12:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000f14:	68e3      	ldr	r3, [r4, #12]
 8000f16:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000f20:	f7ff fb10 	bl	8000544 <HAL_GetTick>
 8000f24:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	019b      	lsls	r3, r3, #6
 8000f2a:	f57f ae45 	bpl.w	8000bb8 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f2e:	f7ff fb09 	bl	8000544 <HAL_GetTick>
 8000f32:	1b40      	subs	r0, r0, r5
 8000f34:	2802      	cmp	r0, #2
 8000f36:	d9f6      	bls.n	8000f26 <HAL_RCC_OscConfig+0x432>
 8000f38:	e679      	b.n	8000c2e <HAL_RCC_OscConfig+0x13a>
 8000f3a:	bf00      	nop
 8000f3c:	40007000 	.word	0x40007000

08000f40 <HAL_RCC_ClockConfig>:
{
 8000f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f44:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8000f46:	4604      	mov	r4, r0
 8000f48:	b910      	cbnz	r0, 8000f50 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f50:	4a40      	ldr	r2, [pc, #256]	; (8001054 <HAL_RCC_ClockConfig+0x114>)
 8000f52:	6813      	ldr	r3, [r2, #0]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d329      	bcc.n	8000fb0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	07d9      	lsls	r1, r3, #31
 8000f60:	d431      	bmi.n	8000fc6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f62:	6821      	ldr	r1, [r4, #0]
 8000f64:	078a      	lsls	r2, r1, #30
 8000f66:	d45b      	bmi.n	8001020 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f68:	4a3a      	ldr	r2, [pc, #232]	; (8001054 <HAL_RCC_ClockConfig+0x114>)
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	429e      	cmp	r6, r3
 8000f72:	d35d      	bcc.n	8001030 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f74:	f011 0f04 	tst.w	r1, #4
 8000f78:	4d37      	ldr	r5, [pc, #220]	; (8001058 <HAL_RCC_ClockConfig+0x118>)
 8000f7a:	d164      	bne.n	8001046 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f7c:	070b      	lsls	r3, r1, #28
 8000f7e:	d506      	bpl.n	8000f8e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f80:	68ab      	ldr	r3, [r5, #8]
 8000f82:	6922      	ldr	r2, [r4, #16]
 8000f84:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f8c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f8e:	f7ff fd5d 	bl	8000a4c <HAL_RCC_GetSysClockFreq>
 8000f92:	68ab      	ldr	r3, [r5, #8]
 8000f94:	4a31      	ldr	r2, [pc, #196]	; (800105c <HAL_RCC_ClockConfig+0x11c>)
 8000f96:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8000f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f9e:	5cd3      	ldrb	r3, [r2, r3]
 8000fa0:	f003 031f 	and.w	r3, r3, #31
 8000fa4:	40d8      	lsrs	r0, r3
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <HAL_RCC_ClockConfig+0x120>)
 8000fa8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff ba94 	b.w	80004d8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb0:	6813      	ldr	r3, [r2, #0]
 8000fb2:	f023 0307 	bic.w	r3, r3, #7
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fba:	6813      	ldr	r3, [r2, #0]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	4299      	cmp	r1, r3
 8000fc2:	d1c2      	bne.n	8000f4a <HAL_RCC_ClockConfig+0xa>
 8000fc4:	e7ca      	b.n	8000f5c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fc6:	6862      	ldr	r2, [r4, #4]
 8000fc8:	4d23      	ldr	r5, [pc, #140]	; (8001058 <HAL_RCC_ClockConfig+0x118>)
 8000fca:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fcc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fce:	d11b      	bne.n	8001008 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fd4:	d0b9      	beq.n	8000f4a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000fd6:	68ab      	ldr	r3, [r5, #8]
 8000fd8:	f023 0303 	bic.w	r3, r3, #3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000fe0:	f7ff fab0 	bl	8000544 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000fe8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fea:	68ab      	ldr	r3, [r5, #8]
 8000fec:	6862      	ldr	r2, [r4, #4]
 8000fee:	f003 030c 	and.w	r3, r3, #12
 8000ff2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ff6:	d0b4      	beq.n	8000f62 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff8:	f7ff faa4 	bl	8000544 <HAL_GetTick>
 8000ffc:	1bc0      	subs	r0, r0, r7
 8000ffe:	4540      	cmp	r0, r8
 8001000:	d9f3      	bls.n	8000fea <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8001002:	2003      	movs	r0, #3
}
 8001004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001008:	2a02      	cmp	r2, #2
 800100a:	d102      	bne.n	8001012 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001010:	e7e0      	b.n	8000fd4 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001012:	b912      	cbnz	r2, 800101a <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001014:	f013 0f02 	tst.w	r3, #2
 8001018:	e7dc      	b.n	8000fd4 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800101a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800101e:	e7d9      	b.n	8000fd4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_RCC_ClockConfig+0x118>)
 8001022:	68a0      	ldr	r0, [r4, #8]
 8001024:	6893      	ldr	r3, [r2, #8]
 8001026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800102a:	4303      	orrs	r3, r0
 800102c:	6093      	str	r3, [r2, #8]
 800102e:	e79b      	b.n	8000f68 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001030:	6813      	ldr	r3, [r2, #0]
 8001032:	f023 0307 	bic.w	r3, r3, #7
 8001036:	4333      	orrs	r3, r6
 8001038:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800103a:	6813      	ldr	r3, [r2, #0]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	429e      	cmp	r6, r3
 8001042:	d182      	bne.n	8000f4a <HAL_RCC_ClockConfig+0xa>
 8001044:	e796      	b.n	8000f74 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001046:	68ab      	ldr	r3, [r5, #8]
 8001048:	68e2      	ldr	r2, [r4, #12]
 800104a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800104e:	4313      	orrs	r3, r2
 8001050:	60ab      	str	r3, [r5, #8]
 8001052:	e793      	b.n	8000f7c <HAL_RCC_ClockConfig+0x3c>
 8001054:	40022000 	.word	0x40022000
 8001058:	40021000 	.word	0x40021000
 800105c:	080023c9 	.word	0x080023c9
 8001060:	20000000 	.word	0x20000000

08001064 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001066:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800106e:	5cd3      	ldrb	r3, [r2, r3]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001072:	6810      	ldr	r0, [r2, #0]
 8001074:	f003 031f 	and.w	r3, r3, #31
}
 8001078:	40d8      	lsrs	r0, r3
 800107a:	4770      	bx	lr
 800107c:	40021000 	.word	0x40021000
 8001080:	080023d9 	.word	0x080023d9
 8001084:	20000000 	.word	0x20000000

08001088 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800108a:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001092:	5cd3      	ldrb	r3, [r2, r3]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001096:	6810      	ldr	r0, [r2, #0]
 8001098:	f003 031f 	and.w	r3, r3, #31
}
 800109c:	40d8      	lsrs	r0, r3
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000
 80010a4:	080023d9 	.word	0x080023d9
 80010a8:	20000000 	.word	0x20000000

080010ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80010ae:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <RCCEx_PLLSAI1_Config+0x118>)
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	f012 0f03 	tst.w	r2, #3
{
 80010b6:	4605      	mov	r5, r0
 80010b8:	460e      	mov	r6, r1
 80010ba:	461c      	mov	r4, r3
 80010bc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80010be:	d02a      	beq.n	8001116 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	4282      	cmp	r2, r0
 80010c8:	d13c      	bne.n	8001144 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80010ca:	2a00      	cmp	r2, #0
 80010cc:	d03a      	beq.n	8001144 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80010ce:	68db      	ldr	r3, [r3, #12]
       ||
 80010d0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80010d2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80010d6:	3301      	adds	r3, #1
       ||
 80010d8:	4293      	cmp	r3, r2
 80010da:	d133      	bne.n	8001144 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80010e2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010e4:	f7ff fa2e 	bl	8000544 <HAL_GetTick>
 80010e8:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	011a      	lsls	r2, r3, #4
 80010ee:	d432      	bmi.n	8001156 <RCCEx_PLLSAI1_Config+0xaa>
 80010f0:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	d036      	beq.n	8001164 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80010f6:	2e01      	cmp	r6, #1
 80010f8:	d150      	bne.n	800119c <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80010fa:	6922      	ldr	r2, [r4, #16]
 80010fc:	6928      	ldr	r0, [r5, #16]
 80010fe:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001102:	0840      	lsrs	r0, r0, #1
 8001104:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001108:	3801      	subs	r0, #1
 800110a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800110e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001112:	6122      	str	r2, [r4, #16]
 8001114:	e032      	b.n	800117c <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001116:	2802      	cmp	r0, #2
 8001118:	d010      	beq.n	800113c <RCCEx_PLLSAI1_Config+0x90>
 800111a:	2803      	cmp	r0, #3
 800111c:	d014      	beq.n	8001148 <RCCEx_PLLSAI1_Config+0x9c>
 800111e:	2801      	cmp	r0, #1
 8001120:	d110      	bne.n	8001144 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	079f      	lsls	r7, r3, #30
 8001126:	d538      	bpl.n	800119a <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001128:	68e3      	ldr	r3, [r4, #12]
 800112a:	686a      	ldr	r2, [r5, #4]
 800112c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001130:	3a01      	subs	r2, #1
 8001132:	4318      	orrs	r0, r3
 8001134:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001138:	60e0      	str	r0, [r4, #12]
 800113a:	e7cf      	b.n	80010dc <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001142:	d1f1      	bne.n	8001128 <RCCEx_PLLSAI1_Config+0x7c>
 8001144:	2001      	movs	r0, #1
 8001146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	0391      	lsls	r1, r2, #14
 800114c:	d4ec      	bmi.n	8001128 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001154:	e7f5      	b.n	8001142 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001156:	f7ff f9f5 	bl	8000544 <HAL_GetTick>
 800115a:	1bc0      	subs	r0, r0, r7
 800115c:	2802      	cmp	r0, #2
 800115e:	d9c4      	bls.n	80010ea <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001160:	2003      	movs	r0, #3
 8001162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001164:	6921      	ldr	r1, [r4, #16]
 8001166:	68eb      	ldr	r3, [r5, #12]
 8001168:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800116c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001170:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001174:	091b      	lsrs	r3, r3, #4
 8001176:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800117a:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001182:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001184:	f7ff f9de 	bl	8000544 <HAL_GetTick>
 8001188:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	d513      	bpl.n	80011b8 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001190:	6923      	ldr	r3, [r4, #16]
 8001192:	69aa      	ldr	r2, [r5, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	6123      	str	r3, [r4, #16]
 8001198:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800119a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800119c:	6923      	ldr	r3, [r4, #16]
 800119e:	6968      	ldr	r0, [r5, #20]
 80011a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80011a4:	0840      	lsrs	r0, r0, #1
 80011a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80011aa:	3801      	subs	r0, #1
 80011ac:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80011b0:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80011b4:	6123      	str	r3, [r4, #16]
 80011b6:	e7e1      	b.n	800117c <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80011b8:	f7ff f9c4 	bl	8000544 <HAL_GetTick>
 80011bc:	1b80      	subs	r0, r0, r6
 80011be:	2802      	cmp	r0, #2
 80011c0:	d9e3      	bls.n	800118a <RCCEx_PLLSAI1_Config+0xde>
 80011c2:	e7cd      	b.n	8001160 <RCCEx_PLLSAI1_Config+0xb4>
 80011c4:	40021000 	.word	0x40021000

080011c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80011c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80011ca:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <RCCEx_PLLSAI2_Config+0xf8>)
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	f012 0f03 	tst.w	r2, #3
{
 80011d2:	4605      	mov	r5, r0
 80011d4:	460e      	mov	r6, r1
 80011d6:	461c      	mov	r4, r3
 80011d8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80011da:	d028      	beq.n	800122e <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	4282      	cmp	r2, r0
 80011e4:	d13a      	bne.n	800125c <RCCEx_PLLSAI2_Config+0x94>
       ||
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	d038      	beq.n	800125c <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80011ea:	68db      	ldr	r3, [r3, #12]
       ||
 80011ec:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80011ee:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80011f2:	3301      	adds	r3, #1
       ||
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d131      	bne.n	800125c <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011fe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001200:	f7ff f9a0 	bl	8000544 <HAL_GetTick>
 8001204:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	009a      	lsls	r2, r3, #2
 800120a:	d430      	bmi.n	800126e <RCCEx_PLLSAI2_Config+0xa6>
 800120c:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800120e:	2e00      	cmp	r6, #0
 8001210:	d034      	beq.n	800127c <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001212:	6963      	ldr	r3, [r4, #20]
 8001214:	6929      	ldr	r1, [r5, #16]
 8001216:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800121a:	0849      	lsrs	r1, r1, #1
 800121c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001220:	3901      	subs	r1, #1
 8001222:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001226:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800122a:	6163      	str	r3, [r4, #20]
 800122c:	e032      	b.n	8001294 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800122e:	2802      	cmp	r0, #2
 8001230:	d010      	beq.n	8001254 <RCCEx_PLLSAI2_Config+0x8c>
 8001232:	2803      	cmp	r0, #3
 8001234:	d014      	beq.n	8001260 <RCCEx_PLLSAI2_Config+0x98>
 8001236:	2801      	cmp	r0, #1
 8001238:	d110      	bne.n	800125c <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	079f      	lsls	r7, r3, #30
 800123e:	d538      	bpl.n	80012b2 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001240:	68e3      	ldr	r3, [r4, #12]
 8001242:	686a      	ldr	r2, [r5, #4]
 8001244:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001248:	3a01      	subs	r2, #1
 800124a:	4318      	orrs	r0, r3
 800124c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001250:	60e0      	str	r0, [r4, #12]
 8001252:	e7d1      	b.n	80011f8 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800125a:	d1f1      	bne.n	8001240 <RCCEx_PLLSAI2_Config+0x78>
 800125c:	2001      	movs	r0, #1
 800125e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	0391      	lsls	r1, r2, #14
 8001264:	d4ec      	bmi.n	8001240 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800126c:	e7f5      	b.n	800125a <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800126e:	f7ff f969 	bl	8000544 <HAL_GetTick>
 8001272:	1bc0      	subs	r0, r0, r7
 8001274:	2802      	cmp	r0, #2
 8001276:	d9c6      	bls.n	8001206 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001278:	2003      	movs	r0, #3
 800127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800127c:	6962      	ldr	r2, [r4, #20]
 800127e:	68eb      	ldr	r3, [r5, #12]
 8001280:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001284:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001288:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001292:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129c:	f7ff f952 	bl	8000544 <HAL_GetTick>
 80012a0:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80012a2:	6823      	ldr	r3, [r4, #0]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	d505      	bpl.n	80012b4 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80012a8:	6963      	ldr	r3, [r4, #20]
 80012aa:	696a      	ldr	r2, [r5, #20]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	6163      	str	r3, [r4, #20]
 80012b0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80012b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80012b4:	f7ff f946 	bl	8000544 <HAL_GetTick>
 80012b8:	1b80      	subs	r0, r0, r6
 80012ba:	2802      	cmp	r0, #2
 80012bc:	d9f1      	bls.n	80012a2 <RCCEx_PLLSAI2_Config+0xda>
 80012be:	e7db      	b.n	8001278 <RCCEx_PLLSAI2_Config+0xb0>
 80012c0:	40021000 	.word	0x40021000

080012c4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80012c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80012c8:	6806      	ldr	r6, [r0, #0]
 80012ca:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80012ce:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80012d0:	d024      	beq.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80012d2:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80012d4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80012d8:	d02c      	beq.n	8001334 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80012da:	d802      	bhi.n	80012e2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80012dc:	b1c1      	cbz	r1, 8001310 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80012de:	2601      	movs	r6, #1
 80012e0:	e01c      	b.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80012e2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80012e6:	d00d      	beq.n	8001304 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80012e8:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80012ec:	d1f7      	bne.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80012ee:	4a4d      	ldr	r2, [pc, #308]	; (8001424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80012f0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80012f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80012f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80012fa:	430b      	orrs	r3, r1
 80012fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001300:	2600      	movs	r6, #0
 8001302:	e00b      	b.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001304:	4a47      	ldr	r2, [pc, #284]	; (8001424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001306:	68d3      	ldr	r3, [r2, #12]
 8001308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130c:	60d3      	str	r3, [r2, #12]
      break;
 800130e:	e7ee      	b.n	80012ee <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001310:	3004      	adds	r0, #4
 8001312:	f7ff fecb 	bl	80010ac <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001316:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001318:	2800      	cmp	r0, #0
 800131a:	d0e8      	beq.n	80012ee <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	04d8      	lsls	r0, r3, #19
 8001320:	d506      	bpl.n	8001330 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001322:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001324:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001328:	d074      	beq.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800132a:	d808      	bhi.n	800133e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800132c:	b1a9      	cbz	r1, 800135a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800132e:	2601      	movs	r6, #1
 8001330:	4635      	mov	r5, r6
 8001332:	e021      	b.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001334:	2100      	movs	r1, #0
 8001336:	3020      	adds	r0, #32
 8001338:	f7ff ff46 	bl	80011c8 <RCCEx_PLLSAI2_Config>
 800133c:	e7eb      	b.n	8001316 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800133e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001342:	d004      	beq.n	800134e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001344:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001348:	d1f1      	bne.n	800132e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800134a:	4635      	mov	r5, r6
 800134c:	e009      	b.n	8001362 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800134e:	4a35      	ldr	r2, [pc, #212]	; (8001424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001350:	68d3      	ldr	r3, [r2, #12]
 8001352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001356:	60d3      	str	r3, [r2, #12]
 8001358:	e7f7      	b.n	800134a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800135a:	1d20      	adds	r0, r4, #4
 800135c:	f7ff fea6 	bl	80010ac <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001360:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001362:	2d00      	cmp	r5, #0
 8001364:	d15c      	bne.n	8001420 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001368:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800136a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800136e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001372:	430b      	orrs	r3, r1
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	0399      	lsls	r1, r3, #14
 800137c:	f140 814f 	bpl.w	800161e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001380:	4f28      	ldr	r7, [pc, #160]	; (8001424 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001384:	00da      	lsls	r2, r3, #3
 8001386:	f140 8176 	bpl.w	8001676 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800138a:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800138e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001428 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001392:	f8d9 3000 	ldr.w	r3, [r9]
 8001396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139a:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800139e:	f7ff f8d1 	bl	8000544 <HAL_GetTick>
 80013a2:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80013a4:	f8d9 3000 	ldr.w	r3, [r9]
 80013a8:	05db      	lsls	r3, r3, #23
 80013aa:	d53f      	bpl.n	800142c <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 80013ac:	2d00      	cmp	r5, #0
 80013ae:	d144      	bne.n	800143a <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80013b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80013b4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80013b8:	d015      	beq.n	80013e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80013ba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80013be:	4293      	cmp	r3, r2
 80013c0:	d011      	beq.n	80013e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80013c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80013c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80013ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80013d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80013d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80013da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80013e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80013e6:	07d8      	lsls	r0, r3, #31
 80013e8:	d509      	bpl.n	80013fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80013ea:	f7ff f8ab 	bl	8000544 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80013f2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013f8:	0799      	lsls	r1, r3, #30
 80013fa:	f140 8109 	bpl.w	8001610 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80013fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001402:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800140a:	4313      	orrs	r3, r2
 800140c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001410:	4635      	mov	r5, r6
 8001412:	e012      	b.n	800143a <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001414:	2100      	movs	r1, #0
 8001416:	f104 0020 	add.w	r0, r4, #32
 800141a:	f7ff fed5 	bl	80011c8 <RCCEx_PLLSAI2_Config>
 800141e:	e79f      	b.n	8001360 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001420:	462e      	mov	r6, r5
 8001422:	e7a9      	b.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001424:	40021000 	.word	0x40021000
 8001428:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142c:	f7ff f88a 	bl	8000544 <HAL_GetTick>
 8001430:	eba0 000a 	sub.w	r0, r0, sl
 8001434:	2802      	cmp	r0, #2
 8001436:	d9b5      	bls.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8001438:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800143a:	f1b8 0f00 	cmp.w	r8, #0
 800143e:	d003      	beq.n	8001448 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001446:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	07da      	lsls	r2, r3, #31
 800144c:	d508      	bpl.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800144e:	4990      	ldr	r1, [pc, #576]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001450:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001452:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001456:	f022 0203 	bic.w	r2, r2, #3
 800145a:	4302      	orrs	r2, r0
 800145c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001460:	079f      	lsls	r7, r3, #30
 8001462:	d508      	bpl.n	8001476 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001464:	498a      	ldr	r1, [pc, #552]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001466:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001468:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800146c:	f022 020c 	bic.w	r2, r2, #12
 8001470:	4302      	orrs	r2, r0
 8001472:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001476:	075e      	lsls	r6, r3, #29
 8001478:	d508      	bpl.n	800148c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800147a:	4985      	ldr	r1, [pc, #532]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800147c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800147e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001482:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001486:	4302      	orrs	r2, r0
 8001488:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800148c:	0718      	lsls	r0, r3, #28
 800148e:	d508      	bpl.n	80014a2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001490:	497f      	ldr	r1, [pc, #508]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001492:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001494:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001498:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800149c:	4302      	orrs	r2, r0
 800149e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80014a2:	06d9      	lsls	r1, r3, #27
 80014a4:	d508      	bpl.n	80014b8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80014a6:	497a      	ldr	r1, [pc, #488]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80014aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80014b2:	4302      	orrs	r2, r0
 80014b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80014b8:	069a      	lsls	r2, r3, #26
 80014ba:	d508      	bpl.n	80014ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80014bc:	4974      	ldr	r1, [pc, #464]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014be:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80014c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80014c8:	4302      	orrs	r2, r0
 80014ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80014ce:	059f      	lsls	r7, r3, #22
 80014d0:	d508      	bpl.n	80014e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80014d2:	496f      	ldr	r1, [pc, #444]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014d4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80014d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014da:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80014de:	4302      	orrs	r2, r0
 80014e0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80014e4:	055e      	lsls	r6, r3, #21
 80014e6:	d508      	bpl.n	80014fa <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80014e8:	4969      	ldr	r1, [pc, #420]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014ea:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80014ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014f0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80014f4:	4302      	orrs	r2, r0
 80014f6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014fa:	0658      	lsls	r0, r3, #25
 80014fc:	d508      	bpl.n	8001510 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014fe:	4964      	ldr	r1, [pc, #400]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001500:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001502:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001506:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800150a:	4302      	orrs	r2, r0
 800150c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001510:	0619      	lsls	r1, r3, #24
 8001512:	d508      	bpl.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001514:	495e      	ldr	r1, [pc, #376]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001516:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001518:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800151c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001520:	4302      	orrs	r2, r0
 8001522:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001526:	05da      	lsls	r2, r3, #23
 8001528:	d508      	bpl.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800152a:	4959      	ldr	r1, [pc, #356]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800152c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800152e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001532:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001536:	4302      	orrs	r2, r0
 8001538:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800153c:	049b      	lsls	r3, r3, #18
 800153e:	d50f      	bpl.n	8001560 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001540:	4a53      	ldr	r2, [pc, #332]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001542:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001544:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001548:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800154c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800154e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001552:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001556:	d164      	bne.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001558:	68d3      	ldr	r3, [r2, #12]
 800155a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800155e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	031f      	lsls	r7, r3, #12
 8001564:	d50f      	bpl.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001566:	4a4a      	ldr	r2, [pc, #296]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001568:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800156a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800156e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001572:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001574:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800157c:	d15c      	bne.n	8001638 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800157e:	68d3      	ldr	r3, [r2, #12]
 8001580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001584:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	035e      	lsls	r6, r3, #13
 800158a:	d50f      	bpl.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800158c:	4a40      	ldr	r2, [pc, #256]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800158e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001590:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001594:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001598:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800159a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800159e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80015a2:	d154      	bne.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80015a4:	68d3      	ldr	r3, [r2, #12]
 80015a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015aa:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	0458      	lsls	r0, r3, #17
 80015b0:	d512      	bpl.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80015b2:	4937      	ldr	r1, [pc, #220]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015b4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80015b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80015ba:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80015be:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80015c0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80015c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80015c8:	d14c      	bne.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80015ca:	2102      	movs	r1, #2
 80015cc:	1d20      	adds	r0, r4, #4
 80015ce:	f7ff fd6d 	bl	80010ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80015d2:	2800      	cmp	r0, #0
 80015d4:	bf18      	it	ne
 80015d6:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80015d8:	6822      	ldr	r2, [r4, #0]
 80015da:	0411      	lsls	r1, r2, #16
 80015dc:	d508      	bpl.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80015de:	492c      	ldr	r1, [pc, #176]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015e0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80015e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80015e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80015ea:	4303      	orrs	r3, r0
 80015ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80015f0:	03d3      	lsls	r3, r2, #15
 80015f2:	d509      	bpl.n	8001608 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80015f4:	4a26      	ldr	r2, [pc, #152]	; (8001690 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015f6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80015fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80015fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001602:	430b      	orrs	r3, r1
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001608:	4628      	mov	r0, r5
 800160a:	b002      	add	sp, #8
 800160c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001610:	f7fe ff98 	bl	8000544 <HAL_GetTick>
 8001614:	1b40      	subs	r0, r0, r5
 8001616:	4548      	cmp	r0, r9
 8001618:	f67f aeec 	bls.w	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800161c:	e70c      	b.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800161e:	4635      	mov	r5, r6
 8001620:	e712      	b.n	8001448 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001622:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001626:	d19b      	bne.n	8001560 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001628:	2101      	movs	r1, #1
 800162a:	1d20      	adds	r0, r4, #4
 800162c:	f7ff fd3e 	bl	80010ac <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001630:	2800      	cmp	r0, #0
 8001632:	bf18      	it	ne
 8001634:	4605      	movne	r5, r0
 8001636:	e793      	b.n	8001560 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001638:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800163c:	d1a3      	bne.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800163e:	2101      	movs	r1, #1
 8001640:	1d20      	adds	r0, r4, #4
 8001642:	f7ff fd33 	bl	80010ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001646:	2800      	cmp	r0, #0
 8001648:	bf18      	it	ne
 800164a:	4605      	movne	r5, r0
 800164c:	e79b      	b.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800164e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001652:	d1ab      	bne.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001654:	2101      	movs	r1, #1
 8001656:	1d20      	adds	r0, r4, #4
 8001658:	f7ff fd28 	bl	80010ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800165c:	2800      	cmp	r0, #0
 800165e:	bf18      	it	ne
 8001660:	4605      	movne	r5, r0
 8001662:	e7a3      	b.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001664:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8001668:	d1b6      	bne.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800166a:	2102      	movs	r1, #2
 800166c:	f104 0020 	add.w	r0, r4, #32
 8001670:	f7ff fdaa 	bl	80011c8 <RCCEx_PLLSAI2_Config>
 8001674:	e7ad      	b.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	65bb      	str	r3, [r7, #88]	; 0x58
 800167e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001688:	f04f 0801 	mov.w	r8, #1
 800168c:	e67f      	b.n	800138e <HAL_RCCEx_PeriphCLKConfig+0xca>
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001694:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001696:	4604      	mov	r4, r0
 8001698:	2800      	cmp	r0, #0
 800169a:	d04a      	beq.n	8001732 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016a0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80016a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016a8:	b91b      	cbnz	r3, 80016b2 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016aa:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016ae:	f000 fd07 	bl	80020c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016b2:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016b4:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80016b6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80016ba:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016bc:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80016be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016c2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016cc:	d92e      	bls.n	800172c <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80016ce:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80016d0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d4:	bf18      	it	ne
 80016d6:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80016d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016da:	b92b      	cbnz	r3, 80016e8 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016dc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80016e0:	bf8c      	ite	hi
 80016e2:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80016e4:	2301      	movls	r3, #1
 80016e6:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80016e8:	68a6      	ldr	r6, [r4, #8]
 80016ea:	6863      	ldr	r3, [r4, #4]
 80016ec:	69a5      	ldr	r5, [r4, #24]
 80016ee:	4333      	orrs	r3, r6
 80016f0:	6926      	ldr	r6, [r4, #16]
 80016f2:	4333      	orrs	r3, r6
 80016f4:	6966      	ldr	r6, [r4, #20]
 80016f6:	4333      	orrs	r3, r6
 80016f8:	69e6      	ldr	r6, [r4, #28]
 80016fa:	4333      	orrs	r3, r6
 80016fc:	6a26      	ldr	r6, [r4, #32]
 80016fe:	4333      	orrs	r3, r6
 8001700:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001702:	4333      	orrs	r3, r6
 8001704:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001708:	4333      	orrs	r3, r6
 800170a:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800170c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800170e:	431a      	orrs	r2, r3
 8001710:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001712:	0c2d      	lsrs	r5, r5, #16
 8001714:	431a      	orrs	r2, r3
 8001716:	f005 0504 	and.w	r5, r5, #4
 800171a:	432a      	orrs	r2, r5
 800171c:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 800171e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001720:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001722:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001724:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001726:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 800172a:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800172c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001730:	e7d0      	b.n	80016d4 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001732:	2001      	movs	r0, #1
}
 8001734:	bd70      	pop	{r4, r5, r6, pc}

08001736 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001736:	6803      	ldr	r3, [r0, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800173e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001748:	2320      	movs	r3, #32
 800174a:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800174e:	2300      	movs	r3, #0
 8001750:	6603      	str	r3, [r0, #96]	; 0x60
 8001752:	4770      	bx	lr

08001754 <HAL_UART_TxCpltCallback>:
 8001754:	4770      	bx	lr

08001756 <HAL_UART_ErrorCallback>:
 8001756:	4770      	bx	lr

08001758 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001758:	6803      	ldr	r3, [r0, #0]
 800175a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800175c:	6819      	ldr	r1, [r3, #0]
{
 800175e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001760:	0716      	lsls	r6, r2, #28
{
 8001762:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001764:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8001766:	d10a      	bne.n	800177e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8001768:	0696      	lsls	r6, r2, #26
 800176a:	d564      	bpl.n	8001836 <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800176c:	068e      	lsls	r6, r1, #26
 800176e:	d562      	bpl.n	8001836 <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8001770:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8083 	beq.w	800187e <HAL_UART_IRQHandler+0x126>
}
 8001778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800177c:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != RESET)
 800177e:	f015 0001 	ands.w	r0, r5, #1
 8001782:	d102      	bne.n	800178a <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001784:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001788:	d055      	beq.n	8001836 <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800178a:	07d5      	lsls	r5, r2, #31
 800178c:	d507      	bpl.n	800179e <HAL_UART_IRQHandler+0x46>
 800178e:	05ce      	lsls	r6, r1, #23
 8001790:	d505      	bpl.n	800179e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001792:	2501      	movs	r5, #1
 8001794:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001796:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8001798:	f045 0501 	orr.w	r5, r5, #1
 800179c:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800179e:	0795      	lsls	r5, r2, #30
 80017a0:	d506      	bpl.n	80017b0 <HAL_UART_IRQHandler+0x58>
 80017a2:	b128      	cbz	r0, 80017b0 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80017a4:	2502      	movs	r5, #2
 80017a6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017a8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80017aa:	f045 0504 	orr.w	r5, r5, #4
 80017ae:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017b0:	0756      	lsls	r6, r2, #29
 80017b2:	d506      	bpl.n	80017c2 <HAL_UART_IRQHandler+0x6a>
 80017b4:	b128      	cbz	r0, 80017c2 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80017b6:	2504      	movs	r5, #4
 80017b8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017ba:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80017bc:	f045 0502 	orr.w	r5, r5, #2
 80017c0:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 80017c2:	0715      	lsls	r5, r2, #28
 80017c4:	d507      	bpl.n	80017d6 <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 80017c6:	068e      	lsls	r6, r1, #26
 80017c8:	d400      	bmi.n	80017cc <HAL_UART_IRQHandler+0x74>
 80017ca:	b120      	cbz	r0, 80017d6 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80017cc:	2008      	movs	r0, #8
 80017ce:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017d0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80017d2:	4303      	orrs	r3, r0
 80017d4:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017d6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d050      	beq.n	800187e <HAL_UART_IRQHandler+0x126>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 80017dc:	0695      	lsls	r5, r2, #26
 80017de:	d505      	bpl.n	80017ec <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017e0:	0688      	lsls	r0, r1, #26
 80017e2:	d503      	bpl.n	80017ec <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 80017e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80017e6:	b10b      	cbz	r3, 80017ec <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 80017e8:	4620      	mov	r0, r4
 80017ea:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80017ec:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80017ee:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 80017f0:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80017f2:	d404      	bmi.n	80017fe <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80017f8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80017fc:	d017      	beq.n	800182e <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 80017fe:	f7ff ff9a 	bl	8001736 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	0652      	lsls	r2, r2, #25
 8001808:	d50d      	bpl.n	8001826 <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800180a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800180c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800180e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001812:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001814:	b138      	cbz	r0, 8001826 <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_UART_IRQHandler+0x128>)
 8001818:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800181a:	f7fe ff01 	bl	8000620 <HAL_DMA_Abort_IT>
 800181e:	b370      	cbz	r0, 800187e <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001820:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001822:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001824:	e7a8      	b.n	8001778 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8001826:	4620      	mov	r0, r4
 8001828:	f7ff ff95 	bl	8001756 <HAL_UART_ErrorCallback>
 800182c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800182e:	f7ff ff92 	bl	8001756 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001832:	6765      	str	r5, [r4, #116]	; 0x74
 8001834:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001836:	02d6      	lsls	r6, r2, #11
 8001838:	d509      	bpl.n	800184e <HAL_UART_IRQHandler+0xf6>
 800183a:	0268      	lsls	r0, r5, #9
 800183c:	d507      	bpl.n	800184e <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800183e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8001842:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001844:	621a      	str	r2, [r3, #32]
}
 8001846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800184a:	f000 baa6 	b.w	8001d9a <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != RESET)
 800184e:	0616      	lsls	r6, r2, #24
 8001850:	d505      	bpl.n	800185e <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001852:	060d      	lsls	r5, r1, #24
 8001854:	d503      	bpl.n	800185e <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 8001856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001858:	b18b      	cbz	r3, 800187e <HAL_UART_IRQHandler+0x126>
      huart->TxISR(huart);
 800185a:	4620      	mov	r0, r4
 800185c:	e78c      	b.n	8001778 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800185e:	0650      	lsls	r0, r2, #25
 8001860:	d50d      	bpl.n	800187e <HAL_UART_IRQHandler+0x126>
 8001862:	064a      	lsls	r2, r1, #25
 8001864:	d50b      	bpl.n	800187e <HAL_UART_IRQHandler+0x126>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800186c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800186e:	2320      	movs	r3, #32
 8001870:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001874:	2300      	movs	r3, #0
 8001876:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff ff6b 	bl	8001754 <HAL_UART_TxCpltCallback>
 800187e:	bd70      	pop	{r4, r5, r6, pc}
 8001880:	08001885 	.word	0x08001885

08001884 <UART_DMAAbortOnError>:
{
 8001884:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001886:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800188e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001892:	f7ff ff60 	bl	8001756 <HAL_UART_ErrorCallback>
 8001896:	bd08      	pop	{r3, pc}

08001898 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8001898:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800189a:	69c1      	ldr	r1, [r0, #28]
{
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018a0:	6883      	ldr	r3, [r0, #8]
 80018a2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018a4:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018a6:	4303      	orrs	r3, r0
 80018a8:	6960      	ldr	r0, [r4, #20]
 80018aa:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018ac:	48ba      	ldr	r0, [pc, #744]	; (8001b98 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018ae:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018b0:	4028      	ands	r0, r5
 80018b2:	4303      	orrs	r3, r0
 80018b4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018b6:	6853      	ldr	r3, [r2, #4]
 80018b8:	68e0      	ldr	r0, [r4, #12]
 80018ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018be:	4303      	orrs	r3, r0
 80018c0:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80018c2:	4bb6      	ldr	r3, [pc, #728]	; (8001b9c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80018c4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80018c6:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 80018c8:	bf1c      	itt	ne
 80018ca:	6a23      	ldrne	r3, [r4, #32]
 80018cc:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80018ce:	6893      	ldr	r3, [r2, #8]
 80018d0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80018d4:	4303      	orrs	r3, r0
 80018d6:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018d8:	4bb1      	ldr	r3, [pc, #708]	; (8001ba0 <UART_SetConfig+0x308>)
 80018da:	429a      	cmp	r2, r3
 80018dc:	d119      	bne.n	8001912 <UART_SetConfig+0x7a>
 80018de:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80018e2:	4ab0      	ldr	r2, [pc, #704]	; (8001ba4 <UART_SetConfig+0x30c>)
 80018e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e8:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018ec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	f040 8138 	bne.w	8001b66 <UART_SetConfig+0x2ce>
    switch (clocksource)
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	f200 808f 	bhi.w	8001a1a <UART_SetConfig+0x182>
 80018fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001900:	00ca011a 	.word	0x00ca011a
 8001904:	008d00f9 	.word	0x008d00f9
 8001908:	008d0114 	.word	0x008d0114
 800190c:	008d008d 	.word	0x008d008d
 8001910:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001912:	4ba5      	ldr	r3, [pc, #660]	; (8001ba8 <UART_SetConfig+0x310>)
 8001914:	429a      	cmp	r2, r3
 8001916:	d107      	bne.n	8001928 <UART_SetConfig+0x90>
 8001918:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800191c:	4aa3      	ldr	r2, [pc, #652]	; (8001bac <UART_SetConfig+0x314>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	e7e1      	b.n	80018ec <UART_SetConfig+0x54>
 8001928:	4ba1      	ldr	r3, [pc, #644]	; (8001bb0 <UART_SetConfig+0x318>)
 800192a:	429a      	cmp	r2, r3
 800192c:	d123      	bne.n	8001976 <UART_SetConfig+0xde>
 800192e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001936:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800193a:	2b10      	cmp	r3, #16
 800193c:	f000 80f1 	beq.w	8001b22 <UART_SetConfig+0x28a>
 8001940:	d80b      	bhi.n	800195a <UART_SetConfig+0xc2>
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80f3 	beq.w	8001b2e <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001948:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 800194c:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001950:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001954:	f000 80f8 	beq.w	8001b48 <UART_SetConfig+0x2b0>
 8001958:	e0a8      	b.n	8001aac <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800195a:	2b20      	cmp	r3, #32
 800195c:	f000 80c6 	beq.w	8001aec <UART_SetConfig+0x254>
 8001960:	2b30      	cmp	r3, #48	; 0x30
 8001962:	d1f1      	bne.n	8001948 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001964:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001968:	f040 80b8 	bne.w	8001adc <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800196c:	6860      	ldr	r0, [r4, #4]
 800196e:	0843      	lsrs	r3, r0, #1
 8001970:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001974:	e0c3      	b.n	8001afe <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001976:	4b8f      	ldr	r3, [pc, #572]	; (8001bb4 <UART_SetConfig+0x31c>)
 8001978:	429a      	cmp	r2, r3
 800197a:	d11e      	bne.n	80019ba <UART_SetConfig+0x122>
 800197c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001984:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001988:	2b40      	cmp	r3, #64	; 0x40
 800198a:	f000 80bb 	beq.w	8001b04 <UART_SetConfig+0x26c>
 800198e:	d80a      	bhi.n	80019a6 <UART_SetConfig+0x10e>
 8001990:	b97b      	cbnz	r3, 80019b2 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001992:	4b82      	ldr	r3, [pc, #520]	; (8001b9c <UART_SetConfig+0x304>)
 8001994:	429a      	cmp	r2, r3
 8001996:	f040 80ca 	bne.w	8001b2e <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800199a:	f7ff fb63 	bl	8001064 <HAL_RCC_GetPCLK1Freq>
        break;
 800199e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80019a0:	bbb0      	cbnz	r0, 8001a10 <UART_SetConfig+0x178>
 80019a2:	4602      	mov	r2, r0
 80019a4:	e03a      	b.n	8001a1c <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019a6:	2b80      	cmp	r3, #128	; 0x80
 80019a8:	f000 809d 	beq.w	8001ae6 <UART_SetConfig+0x24e>
 80019ac:	2bc0      	cmp	r3, #192	; 0xc0
 80019ae:	f000 80b0 	beq.w	8001b12 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80019b2:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <UART_SetConfig+0x304>)
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1c7      	bne.n	8001948 <UART_SetConfig+0xb0>
 80019b8:	e02f      	b.n	8001a1a <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <UART_SetConfig+0x320>)
 80019bc:	429a      	cmp	r2, r3
 80019be:	d111      	bne.n	80019e4 <UART_SetConfig+0x14c>
 80019c0:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80019c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d0:	f000 8098 	beq.w	8001b04 <UART_SetConfig+0x26c>
 80019d4:	d9dc      	bls.n	8001990 <UART_SetConfig+0xf8>
 80019d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019da:	f000 8084 	beq.w	8001ae6 <UART_SetConfig+0x24e>
 80019de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019e2:	e7e4      	b.n	80019ae <UART_SetConfig+0x116>
 80019e4:	4b6d      	ldr	r3, [pc, #436]	; (8001b9c <UART_SetConfig+0x304>)
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d1ae      	bne.n	8001948 <UART_SetConfig+0xb0>
 80019ea:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fa:	f000 8083 	beq.w	8001b04 <UART_SetConfig+0x26c>
 80019fe:	d9c7      	bls.n	8001990 <UART_SetConfig+0xf8>
 8001a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a04:	d06f      	beq.n	8001ae6 <UART_SetConfig+0x24e>
 8001a06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001a0a:	e7d0      	b.n	80019ae <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001a0c:	486b      	ldr	r0, [pc, #428]	; (8001bbc <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8001a0e:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001a10:	6862      	ldr	r2, [r4, #4]
 8001a12:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001a16:	4281      	cmp	r1, r0
 8001a18:	d905      	bls.n	8001a26 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8001a1a:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001a20:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001a22:	4610      	mov	r0, r2
 8001a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001a26:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001a2a:	d8f6      	bhi.n	8001a1a <UART_SetConfig+0x182>
        switch (clocksource)
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d82e      	bhi.n	8001a8e <UART_SetConfig+0x1f6>
 8001a30:	e8df f003 	tbb	[pc, r3]
 8001a34:	2d1c2d05 	.word	0x2d1c2d05
 8001a38:	2d2d2d24 	.word	0x2d2d2d24
 8001a3c:	27          	.byte	0x27
 8001a3d:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a3e:	f7ff fb11 	bl	8001064 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a42:	6862      	ldr	r2, [r4, #4]
 8001a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a48:	0856      	lsrs	r6, r2, #1
 8001a4a:	2700      	movs	r7, #0
 8001a4c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001a50:	2300      	movs	r3, #0
 8001a52:	4630      	mov	r0, r6
 8001a54:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a56:	f7fe fbb7 	bl	80001c8 <__aeabi_uldivmod>
            break;
 8001a5a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001a5c:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <UART_SetConfig+0x328>)
 8001a5e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001a62:	4299      	cmp	r1, r3
 8001a64:	d8d9      	bhi.n	8001a1a <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	60d8      	str	r0, [r3, #12]
 8001a6a:	e7d7      	b.n	8001a1c <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001a6c:	4855      	ldr	r0, [pc, #340]	; (8001bc4 <UART_SetConfig+0x32c>)
 8001a6e:	0855      	lsrs	r5, r2, #1
 8001a70:	2300      	movs	r3, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a76:	f141 0100 	adc.w	r1, r1, #0
 8001a7a:	e7ec      	b.n	8001a56 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a7c:	f7fe ffe6 	bl	8000a4c <HAL_RCC_GetSysClockFreq>
 8001a80:	e7df      	b.n	8001a42 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a82:	0850      	lsrs	r0, r2, #1
 8001a84:	2100      	movs	r1, #0
 8001a86:	2300      	movs	r3, #0
 8001a88:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001a8c:	e7f3      	b.n	8001a76 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8001a8e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001a90:	2000      	movs	r0, #0
 8001a92:	e7e3      	b.n	8001a5c <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a94:	f7ff faf8 	bl	8001088 <HAL_RCC_GetPCLK2Freq>
 8001a98:	e04e      	b.n	8001b38 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a9a:	f7ff fae3 	bl	8001064 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a9e:	6862      	ldr	r2, [r4, #4]
 8001aa0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001aa8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001aaa:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001aac:	f1a3 0010 	sub.w	r0, r3, #16
 8001ab0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001ab4:	4288      	cmp	r0, r1
 8001ab6:	d8b0      	bhi.n	8001a1a <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001ab8:	6821      	ldr	r1, [r4, #0]
 8001aba:	60cb      	str	r3, [r1, #12]
 8001abc:	e7ae      	b.n	8001a1c <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001abe:	f7ff fae3 	bl	8001088 <HAL_RCC_GetPCLK2Freq>
 8001ac2:	e7ec      	b.n	8001a9e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ac4:	6860      	ldr	r0, [r4, #4]
 8001ac6:	0843      	lsrs	r3, r0, #1
 8001ac8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001acc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ad0:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ad4:	e7e8      	b.n	8001aa8 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ad6:	f7fe ffb9 	bl	8000a4c <HAL_RCC_GetSysClockFreq>
 8001ada:	e7e0      	b.n	8001a9e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001adc:	6860      	ldr	r0, [r4, #4]
 8001ade:	0843      	lsrs	r3, r0, #1
 8001ae0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ae4:	e7f4      	b.n	8001ad0 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <UART_SetConfig+0x304>)
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d08f      	beq.n	8001a0c <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001af0:	d1e8      	bne.n	8001ac4 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001af2:	6860      	ldr	r0, [r4, #4]
 8001af4:	0843      	lsrs	r3, r0, #1
 8001af6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001afa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001afe:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b02:	e01f      	b.n	8001b44 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <UART_SetConfig+0x304>)
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d10b      	bne.n	8001b22 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001b0a:	f7fe ff9f 	bl	8000a4c <HAL_RCC_GetSysClockFreq>
        break;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e746      	b.n	80019a0 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <UART_SetConfig+0x304>)
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f47f af25 	bne.w	8001964 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001b1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b1e:	2308      	movs	r3, #8
 8001b20:	e776      	b.n	8001a10 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b22:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001b26:	d1d6      	bne.n	8001ad6 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b28:	f7fe ff90 	bl	8000a4c <HAL_RCC_GetSysClockFreq>
 8001b2c:	e004      	b.n	8001b38 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b2e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001b32:	d1b2      	bne.n	8001a9a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001b34:	f7ff fa96 	bl	8001064 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b38:	6861      	ldr	r1, [r4, #4]
 8001b3a:	084a      	lsrs	r2, r1, #1
 8001b3c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001b40:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b44:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b46:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b48:	f1a3 0010 	sub.w	r0, r3, #16
 8001b4c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001b50:	4288      	cmp	r0, r1
 8001b52:	f63f af62 	bhi.w	8001a1a <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8001b56:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001b5a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b5c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001b60:	430b      	orrs	r3, r1
 8001b62:	60c3      	str	r3, [r0, #12]
 8001b64:	e75a      	b.n	8001a1c <UART_SetConfig+0x184>
    switch (clocksource)
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	f63f af57 	bhi.w	8001a1a <UART_SetConfig+0x182>
 8001b6c:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <UART_SetConfig+0x2dc>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001a9b 	.word	0x08001a9b
 8001b78:	08001abf 	.word	0x08001abf
 8001b7c:	08001ac5 	.word	0x08001ac5
 8001b80:	08001a1b 	.word	0x08001a1b
 8001b84:	08001ad7 	.word	0x08001ad7
 8001b88:	08001a1b 	.word	0x08001a1b
 8001b8c:	08001a1b 	.word	0x08001a1b
 8001b90:	08001a1b 	.word	0x08001a1b
 8001b94:	08001add 	.word	0x08001add
 8001b98:	efff69f3 	.word	0xefff69f3
 8001b9c:	40008000 	.word	0x40008000
 8001ba0:	40013800 	.word	0x40013800
 8001ba4:	080023b8 	.word	0x080023b8
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	080023bc 	.word	0x080023bc
 8001bb0:	40004800 	.word	0x40004800
 8001bb4:	40004c00 	.word	0x40004c00
 8001bb8:	40005000 	.word	0x40005000
 8001bbc:	00f42400 	.word	0x00f42400
 8001bc0:	000ffcff 	.word	0x000ffcff
 8001bc4:	f4240000 	.word	0xf4240000

08001bc8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bca:	07da      	lsls	r2, r3, #31
{
 8001bcc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bce:	d506      	bpl.n	8001bde <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001bd0:	6801      	ldr	r1, [r0, #0]
 8001bd2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001bd4:	684a      	ldr	r2, [r1, #4]
 8001bd6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001bda:	4322      	orrs	r2, r4
 8001bdc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001bde:	079c      	lsls	r4, r3, #30
 8001be0:	d506      	bpl.n	8001bf0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001be2:	6801      	ldr	r1, [r0, #0]
 8001be4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001be6:	684a      	ldr	r2, [r1, #4]
 8001be8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bec:	4322      	orrs	r2, r4
 8001bee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001bf0:	0759      	lsls	r1, r3, #29
 8001bf2:	d506      	bpl.n	8001c02 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001bf4:	6801      	ldr	r1, [r0, #0]
 8001bf6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001bf8:	684a      	ldr	r2, [r1, #4]
 8001bfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bfe:	4322      	orrs	r2, r4
 8001c00:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c02:	071a      	lsls	r2, r3, #28
 8001c04:	d506      	bpl.n	8001c14 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c06:	6801      	ldr	r1, [r0, #0]
 8001c08:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001c0a:	684a      	ldr	r2, [r1, #4]
 8001c0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c10:	4322      	orrs	r2, r4
 8001c12:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c14:	06dc      	lsls	r4, r3, #27
 8001c16:	d506      	bpl.n	8001c26 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c18:	6801      	ldr	r1, [r0, #0]
 8001c1a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001c1c:	688a      	ldr	r2, [r1, #8]
 8001c1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c22:	4322      	orrs	r2, r4
 8001c24:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c26:	0699      	lsls	r1, r3, #26
 8001c28:	d506      	bpl.n	8001c38 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c2a:	6801      	ldr	r1, [r0, #0]
 8001c2c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001c2e:	688a      	ldr	r2, [r1, #8]
 8001c30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c34:	4322      	orrs	r2, r4
 8001c36:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c38:	065a      	lsls	r2, r3, #25
 8001c3a:	d50f      	bpl.n	8001c5c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c3c:	6801      	ldr	r1, [r0, #0]
 8001c3e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c40:	684a      	ldr	r2, [r1, #4]
 8001c42:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001c46:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c48:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c4c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c4e:	d105      	bne.n	8001c5c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c50:	684a      	ldr	r2, [r1, #4]
 8001c52:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001c54:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001c58:	4322      	orrs	r2, r4
 8001c5a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	d506      	bpl.n	8001c6e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c60:	6802      	ldr	r2, [r0, #0]
 8001c62:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c64:	6853      	ldr	r3, [r2, #4]
 8001c66:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	6053      	str	r3, [r2, #4]
 8001c6e:	bd10      	pop	{r4, pc}

08001c70 <UART_WaitOnFlagUntilTimeout>:
{
 8001c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c74:	9d06      	ldr	r5, [sp, #24]
 8001c76:	4604      	mov	r4, r0
 8001c78:	460f      	mov	r7, r1
 8001c7a:	4616      	mov	r6, r2
 8001c7c:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c7e:	6821      	ldr	r1, [r4, #0]
 8001c80:	69ca      	ldr	r2, [r1, #28]
 8001c82:	ea37 0302 	bics.w	r3, r7, r2
 8001c86:	bf0c      	ite	eq
 8001c88:	2201      	moveq	r2, #1
 8001c8a:	2200      	movne	r2, #0
 8001c8c:	42b2      	cmp	r2, r6
 8001c8e:	d002      	beq.n	8001c96 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001c90:	2000      	movs	r0, #0
}
 8001c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001c96:	1c6b      	adds	r3, r5, #1
 8001c98:	d0f2      	beq.n	8001c80 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c9a:	b99d      	cbnz	r5, 8001cc4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ca4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001cae:	2320      	movs	r3, #32
 8001cb0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001cb4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cc4:	f7fe fc3e 	bl	8000544 <HAL_GetTick>
 8001cc8:	eba0 0008 	sub.w	r0, r0, r8
 8001ccc:	4285      	cmp	r5, r0
 8001cce:	d2d6      	bcs.n	8001c7e <UART_WaitOnFlagUntilTimeout+0xe>
 8001cd0:	e7e4      	b.n	8001c9c <UART_WaitOnFlagUntilTimeout+0x2c>

08001cd2 <UART_CheckIdleState>:
{
 8001cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cd4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd6:	2600      	movs	r6, #0
 8001cd8:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001cda:	f7fe fc33 	bl	8000544 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001ce4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ce6:	d417      	bmi.n	8001d18 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	075b      	lsls	r3, r3, #29
 8001cee:	d50a      	bpl.n	8001d06 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	462b      	mov	r3, r5
 8001cfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f7ff ffb6 	bl	8001c70 <UART_WaitOnFlagUntilTimeout>
 8001d04:	b9a0      	cbnz	r0, 8001d30 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8001d06:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001d08:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001d0a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001d0e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001d12:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001d16:	e00c      	b.n	8001d32 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	4632      	mov	r2, r6
 8001d20:	4603      	mov	r3, r0
 8001d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff ffa2 	bl	8001c70 <UART_WaitOnFlagUntilTimeout>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d0db      	beq.n	8001ce8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001d30:	2003      	movs	r0, #3
}
 8001d32:	b002      	add	sp, #8
 8001d34:	bd70      	pop	{r4, r5, r6, pc}

08001d36 <HAL_UART_Init>:
{
 8001d36:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001d38:	4604      	mov	r4, r0
 8001d3a:	b360      	cbz	r0, 8001d96 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d3c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001d40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d44:	b91b      	cbnz	r3, 8001d4e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001d46:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001d4a:	f000 fa99 	bl	8002280 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001d4e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d50:	2324      	movs	r3, #36	; 0x24
 8001d52:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001d56:	6813      	ldr	r3, [r2, #0]
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f7ff fd9a 	bl	8001898 <UART_SetConfig>
 8001d64:	2801      	cmp	r0, #1
 8001d66:	d016      	beq.n	8001d96 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d6a:	b113      	cbz	r3, 8001d72 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff ff2b 	bl	8001bc8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d82:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001d8a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001d92:	f7ff bf9e 	b.w	8001cd2 <UART_CheckIdleState>
}
 8001d96:	2001      	movs	r0, #1
 8001d98:	bd10      	pop	{r4, pc}

08001d9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001d9a:	4770      	bx	lr

08001d9c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	2214      	movs	r2, #20
{
 8001da2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	eb0d 0002 	add.w	r0, sp, r2
 8001da8:	2100      	movs	r1, #0
 8001daa:	f000 faf1 	bl	8002390 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001db0:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001e98 <MX_GPIO_Init+0xfc>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db4:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001db6:	4e36      	ldr	r6, [pc, #216]	; (8001e90 <MX_GPIO_Init+0xf4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db8:	f042 0204 	orr.w	r2, r2, #4
 8001dbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dc0:	f002 0204 	and.w	r2, r2, #4
 8001dc4:	9200      	str	r2, [sp, #0]
 8001dc6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dd2:	f002 0201 	and.w	r2, r2, #1
 8001dd6:	9201      	str	r2, [sp, #4]
 8001dd8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ddc:	f042 0202 	orr.w	r2, r2, #2
 8001de0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001de4:	f002 0202 	and.w	r2, r2, #2
 8001de8:	9202      	str	r2, [sp, #8]
 8001dea:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dee:	f042 0210 	orr.w	r2, r2, #16
 8001df2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001df6:	f002 0210 	and.w	r2, r2, #16
 8001dfa:	9203      	str	r2, [sp, #12]
 8001dfc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e00:	f042 0208 	orr.w	r2, r2, #8
 8001e04:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e0e:	4640      	mov	r0, r8
 8001e10:	2200      	movs	r2, #0
 8001e12:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e14:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e16:	f7fe fd05 	bl	8000824 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e22:	f7fe fcff 	bl	8000824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = But_Enter_Pin|But_Up_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = But_Enter_Pin|But_Up_Pin;
 8001e28:	2509      	movs	r5, #9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <MX_GPIO_Init+0xf8>)
 8001e2c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	a905      	add	r1, sp, #20
 8001e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e34:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = But_Enter_Pin|But_Up_Pin;
 8001e36:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f7fe fc17 	bl	800066c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e3e:	2304      	movs	r3, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e40:	a905      	add	r1, sp, #20
 8001e42:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e44:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e46:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f7fe fc0e 	bl	800066c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001e50:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001e54:	a905      	add	r1, sp, #20
 8001e56:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD1_Pin;
 8001e58:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f7fe fc04 	bl	800066c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e64:	4622      	mov	r2, r4
 8001e66:	4621      	mov	r1, r4
 8001e68:	2006      	movs	r0, #6
 8001e6a:	f7fe fb83 	bl	8000574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e6e:	2006      	movs	r0, #6
 8001e70:	f7fe fbb4 	bl	80005dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001e74:	4622      	mov	r2, r4
 8001e76:	4621      	mov	r1, r4
 8001e78:	4628      	mov	r0, r5
 8001e7a:	f7fe fb7b 	bl	8000574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e7e:	4628      	mov	r0, r5
 8001e80:	f7fe fbac 	bl	80005dc <HAL_NVIC_EnableIRQ>

}
 8001e84:	b00a      	add	sp, #40	; 0x28
 8001e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	48001000 	.word	0x48001000
 8001e94:	10110000 	.word	0x10110000
 8001e98:	48000400 	.word	0x48000400

08001e9c <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	 if(GPIO_Pin == But_Enter_Pin)
 8001e9c:	2801      	cmp	r0, #1
 8001e9e:	d104      	bne.n	8001eaa <HAL_GPIO_EXTI_Callback+0xe>
		 HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea4:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001ea6:	f7fe bcc2 	b.w	800082e <HAL_GPIO_TogglePin>
		 //FlagEnter = 1;

	 if(GPIO_Pin == But_Up_Pin)
 8001eaa:	2808      	cmp	r0, #8
		 FlagUp = 1;
 8001eac:	bf02      	ittt	eq
 8001eae:	4b03      	ldreq	r3, [pc, #12]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x20>)
 8001eb0:	2201      	moveq	r2, #1
 8001eb2:	701a      	strbeq	r2, [r3, #0]
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	48001000 	.word	0x48001000
 8001ebc:	20000021 	.word	0x20000021

08001ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec0:	b530      	push	{r4, r5, lr}
 8001ec2:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec4:	2244      	movs	r2, #68	; 0x44
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	a805      	add	r0, sp, #20
 8001eca:	f000 fa61 	bl	8002390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ece:	2214      	movs	r2, #20
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4668      	mov	r0, sp
 8001ed4:	f000 fa5c 	bl	8002390 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed8:	2288      	movs	r2, #136	; 0x88
 8001eda:	2100      	movs	r1, #0
 8001edc:	a816      	add	r0, sp, #88	; 0x58
 8001ede:	f000 fa57 	bl	8002390 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001ee2:	2310      	movs	r3, #16
 8001ee4:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ee6:	2501      	movs	r5, #1
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001ee8:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eea:	a805      	add	r0, sp, #20
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001eec:	2400      	movs	r4, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001eee:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ef0:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef2:	f7fe fdff 	bl	8000af4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ef6:	4629      	mov	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ef8:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001efa:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001efc:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f00:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f02:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f04:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f06:	f7ff f81b 	bl	8000f40 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f0a:	2302      	movs	r3, #2
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f0c:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f0e:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f10:	9425      	str	r4, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f12:	f7ff f9d7 	bl	80012c4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f1a:	f7fe fca1 	bl	8000860 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8001f1e:	b039      	add	sp, #228	; 0xe4
 8001f20:	bd30      	pop	{r4, r5, pc}
	...

08001f24 <main>:
{
 8001f24:	b508      	push	{r3, lr}
  HAL_Init();
 8001f26:	f7fe faef 	bl	8000508 <HAL_Init>
  SystemClock_Config();
 8001f2a:	f7ff ffc9 	bl	8001ec0 <SystemClock_Config>
  MX_GPIO_Init();
 8001f2e:	f7ff ff35 	bl	8001d9c <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8001f32:	f000 f82d 	bl	8001f90 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8001f36:	f000 f87b 	bl	8002030 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001f3a:	f000 f89f 	bl	800207c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001f3e:	f000 f981 	bl	8002244 <MX_USART2_UART_Init>
  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001f42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <main+0x58>)
	  if (FlagEnter == 1)
 8001f48:	4c0d      	ldr	r4, [pc, #52]	; (8001f80 <main+0x5c>)
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001f4a:	4e0c      	ldr	r6, [pc, #48]	; (8001f7c <main+0x58>)
  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001f4c:	f7fe fc6f 	bl	800082e <HAL_GPIO_TogglePin>
 8001f50:	4625      	mov	r5, r4
	  if (FlagEnter == 1)
 8001f52:	7823      	ldrb	r3, [r4, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d106      	bne.n	8001f66 <main+0x42>
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f5c:	4630      	mov	r0, r6
 8001f5e:	f7fe fc66 	bl	800082e <HAL_GPIO_TogglePin>
		  FlagEnter = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	7023      	strb	r3, [r4, #0]
	  if (FlagUp == 1)
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <main+0x60>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d1f1      	bne.n	8001f52 <main+0x2e>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001f6e:	2104      	movs	r1, #4
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <main+0x64>)
 8001f72:	f7fe fc5c 	bl	800082e <HAL_GPIO_TogglePin>
		  FlagEnter = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	702b      	strb	r3, [r5, #0]
 8001f7a:	e7ea      	b.n	8001f52 <main+0x2e>
 8001f7c:	48001000 	.word	0x48001000
 8001f80:	20000020 	.word	0x20000020
 8001f84:	20000021 	.word	0x20000021
 8001f88:	48000400 	.word	0x48000400

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	4770      	bx	lr
	...

08001f90 <MX_QUADSPI_Init>:

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{

  hqspi.Instance = QUADSPI;
 8001f90:	480a      	ldr	r0, [pc, #40]	; (8001fbc <MX_QUADSPI_Init+0x2c>)
  hqspi.Init.ClockPrescaler = 255;
 8001f92:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <MX_QUADSPI_Init+0x30>)
{
 8001f94:	b508      	push	{r3, lr}
  hqspi.Init.ClockPrescaler = 255;
 8001f96:	23ff      	movs	r3, #255	; 0xff
 8001f98:	e880 000c 	stmia.w	r0, {r2, r3}
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001f9c:	2300      	movs	r3, #0
  hqspi.Init.FifoThreshold = 1;
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001fa2:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8001fa4:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001fa6:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001fa8:	6183      	str	r3, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001faa:	f7fe fcb5 	bl	8000918 <HAL_QSPI_Init>
 8001fae:	b118      	cbz	r0, 8001fb8 <MX_QUADSPI_Init+0x28>
  {
    Error_Handler();
  }

}
 8001fb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001fb4:	f7ff bfea 	b.w	8001f8c <Error_Handler>
 8001fb8:	bd08      	pop	{r3, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000028 	.word	0x20000028
 8001fc0:	a0001000 	.word	0xa0001000

08001fc4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001fc4:	b510      	push	{r4, lr}
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fca:	2214      	movs	r2, #20
 8001fcc:	2100      	movs	r1, #0
 8001fce:	a803      	add	r0, sp, #12
 8001fd0:	f000 f9de 	bl	8002390 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_QSPI_MspInit+0x64>)
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d122      	bne.n	8002022 <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001fdc:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8001fe0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe4:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001fe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe8:	4810      	ldr	r0, [pc, #64]	; (800202c <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fee:	651a      	str	r2, [r3, #80]	; 0x50
 8001ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001ff6:	9201      	str	r2, [sp, #4]
 8001ff8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ffc:	f042 0210 	orr.w	r2, r2, #16
 8002000:	64da      	str	r2, [r3, #76]	; 0x4c
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 800200c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002010:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800201a:	230a      	movs	r3, #10
 800201c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800201e:	f7fe fb25 	bl	800066c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002022:	b008      	add	sp, #32
 8002024:	bd10      	pop	{r4, pc}
 8002026:	bf00      	nop
 8002028:	a0001000 	.word	0xa0001000
 800202c:	48001000 	.word	0x48001000

08002030 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8002030:	4810      	ldr	r0, [pc, #64]	; (8002074 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002032:	4911      	ldr	r1, [pc, #68]	; (8002078 <MX_SPI1_Init+0x48>)
{
 8002034:	b508      	push	{r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002036:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800203a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800203e:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002042:	60c2      	str	r2, [r0, #12]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002044:	2300      	movs	r3, #0
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002046:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800204a:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800204c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800204e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002050:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002052:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002054:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002056:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002058:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800205a:	2207      	movs	r2, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800205c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800205e:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 7;
 8002060:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002062:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002064:	f7ff fb16 	bl	8001694 <HAL_SPI_Init>
 8002068:	b118      	cbz	r0, 8002072 <MX_SPI1_Init+0x42>
  {
    Error_Handler();
  }

}
 800206a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800206e:	f7ff bf8d 	b.w	8001f8c <Error_Handler>
 8002072:	bd08      	pop	{r3, pc}
 8002074:	200000d0 	.word	0x200000d0
 8002078:	40013000 	.word	0x40013000

0800207c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 800207c:	480e      	ldr	r0, [pc, #56]	; (80020b8 <MX_SPI2_Init+0x3c>)
  hspi2.Init.Mode = SPI_MODE_SLAVE;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800207e:	f44f 7240 	mov.w	r2, #768	; 0x300
{
 8002082:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <MX_SPI2_Init+0x40>)
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002086:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002088:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Instance = SPI2;
 800208c:	6003      	str	r3, [r0, #0]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800208e:	6182      	str	r2, [r0, #24]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002090:	2300      	movs	r3, #0
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8002092:	2207      	movs	r2, #7
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002094:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002096:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002098:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800209a:	6143      	str	r3, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800209c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800209e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80020a2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020a4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80020a6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020a8:	f7ff faf4 	bl	8001694 <HAL_SPI_Init>
 80020ac:	b118      	cbz	r0, 80020b6 <MX_SPI2_Init+0x3a>
  {
    Error_Handler();
  }

}
 80020ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80020b2:	f7ff bf6b 	b.w	8001f8c <Error_Handler>
 80020b6:	bd08      	pop	{r3, pc}
 80020b8:	2000006c 	.word	0x2000006c
 80020bc:	40003800 	.word	0x40003800

080020c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020c0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c2:	2214      	movs	r2, #20
{
 80020c4:	b08a      	sub	sp, #40	; 0x28
 80020c6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	2100      	movs	r1, #0
 80020ca:	eb0d 0002 	add.w	r0, sp, r2
 80020ce:	f000 f95f 	bl	8002390 <memset>
  if(spiHandle->Instance==SPI1)
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	4a2d      	ldr	r2, [pc, #180]	; (800218c <HAL_SPI_MspInit+0xcc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d121      	bne.n	800211e <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020da:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_SPI_MspInit+0xd0>)
 80020dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020e2:	661a      	str	r2, [r3, #96]	; 0x60
 80020e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80020ea:	9200      	str	r2, [sp, #0]
 80020ec:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	9b01      	ldr	r3, [sp, #4]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002100:	23e0      	movs	r3, #224	; 0xe0
 8002102:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800210c:	2305      	movs	r3, #5
 800210e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	a905      	add	r1, sp, #20
 8002112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f7fe faa9 	bl	800066c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800211a:	b00a      	add	sp, #40	; 0x28
 800211c:	bd70      	pop	{r4, r5, r6, pc}
  else if(spiHandle->Instance==SPI2)
 800211e:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <HAL_SPI_MspInit+0xd4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d1fa      	bne.n	800211a <HAL_SPI_MspInit+0x5a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_SPI_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002126:	481c      	ldr	r0, [pc, #112]	; (8002198 <HAL_SPI_MspInit+0xd8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002128:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800212a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800212e:	659a      	str	r2, [r3, #88]	; 0x58
 8002130:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002132:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002136:	9202      	str	r2, [sp, #8]
 8002138:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800213c:	f042 0204 	orr.w	r2, r2, #4
 8002140:	64da      	str	r2, [r3, #76]	; 0x4c
 8002142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002144:	f002 0204 	and.w	r2, r2, #4
 8002148:	9203      	str	r2, [sp, #12]
 800214a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800214e:	f042 0202 	orr.w	r2, r2, #2
 8002152:	64da      	str	r2, [r3, #76]	; 0x4c
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	9304      	str	r3, [sp, #16]
 800215c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002160:	230c      	movs	r3, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002162:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002164:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002166:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002168:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800216e:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002170:	f7fe fa7c 	bl	800066c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002178:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002182:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	a905      	add	r1, sp, #20
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <HAL_SPI_MspInit+0xdc>)
 8002188:	e7c5      	b.n	8002116 <HAL_SPI_MspInit+0x56>
 800218a:	bf00      	nop
 800218c:	40013000 	.word	0x40013000
 8002190:	40021000 	.word	0x40021000
 8002194:	40003800 	.word	0x40003800
 8002198:	48000800 	.word	0x48000800
 800219c:	48000400 	.word	0x48000400

080021a0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_MspInit+0x2c>)
 80021a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	661a      	str	r2, [r3, #96]	; 0x60
 80021aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80021ac:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	f002 0201 	and.w	r2, r2, #1
 80021b2:	9200      	str	r2, [sp, #0]
 80021b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021bc:	659a      	str	r2, [r3, #88]	; 0x58
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c8:	b002      	add	sp, #8
 80021ca:	4770      	bx	lr
 80021cc:	40021000 	.word	0x40021000

080021d0 <NMI_Handler>:
 80021d0:	4770      	bx	lr

080021d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	e7fe      	b.n	80021d4 <MemManage_Handler>

080021d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d6:	e7fe      	b.n	80021d6 <BusFault_Handler>

080021d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d8:	e7fe      	b.n	80021d8 <UsageFault_Handler>

080021da <SVC_Handler>:
 80021da:	4770      	bx	lr

080021dc <DebugMon_Handler>:
 80021dc:	4770      	bx	lr

080021de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021de:	4770      	bx	lr

080021e0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e0:	f7fe b9a8 	b.w	8000534 <HAL_IncTick>

080021e4 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7fe bb27 	b.w	8000838 <HAL_GPIO_EXTI_IRQHandler>

080021ea <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80021ea:	2008      	movs	r0, #8
 80021ec:	f7fe bb24 	b.w	8000838 <HAL_GPIO_EXTI_IRQHandler>

080021f0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021f0:	4801      	ldr	r0, [pc, #4]	; (80021f8 <USART2_IRQHandler+0x8>)
 80021f2:	f7ff bab1 	b.w	8001758 <HAL_UART_IRQHandler>
 80021f6:	bf00      	nop
 80021f8:	20000134 	.word	0x20000134

080021fc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021fc:	490f      	ldr	r1, [pc, #60]	; (800223c <SystemInit+0x40>)
 80021fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002202:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <SystemInit+0x44>)
 800220c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800220e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002216:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800221e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002222:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002224:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002228:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002230:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002232:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002234:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002238:	608b      	str	r3, [r1, #8]
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00
 8002240:	40021000 	.word	0x40021000

08002244 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002244:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8002246:	480c      	ldr	r0, [pc, #48]	; (8002278 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <MX_USART2_UART_Init+0x38>)
 800224a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800224e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002252:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002254:	2300      	movs	r3, #0
 8002256:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002258:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800225a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800225c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002260:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002262:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002264:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002266:	f7ff fd66 	bl	8001d36 <HAL_UART_Init>
 800226a:	b118      	cbz	r0, 8002274 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 800226c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002270:	f7ff be8c 	b.w	8001f8c <Error_Handler>
 8002274:	bd08      	pop	{r3, pc}
 8002276:	bf00      	nop
 8002278:	20000134 	.word	0x20000134
 800227c:	40004400 	.word	0x40004400

08002280 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002280:	b510      	push	{r4, lr}
 8002282:	4604      	mov	r4, r0
 8002284:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002286:	2214      	movs	r2, #20
 8002288:	2100      	movs	r1, #0
 800228a:	a803      	add	r0, sp, #12
 800228c:	f000 f880 	bl	8002390 <memset>
  if(uartHandle->Instance==USART2)
 8002290:	6822      	ldr	r2, [r4, #0]
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_UART_MspInit+0x6c>)
 8002294:	429a      	cmp	r2, r3
 8002296:	d127      	bne.n	80022e8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002298:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800229c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800229e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a0:	4813      	ldr	r0, [pc, #76]	; (80022f0 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022a6:	659a      	str	r2, [r3, #88]	; 0x58
 80022a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022aa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80022ae:	9201      	str	r2, [sp, #4]
 80022b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022b4:	f042 0208 	orr.w	r2, r2, #8
 80022b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80022ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	9302      	str	r3, [sp, #8]
 80022c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022c4:	2360      	movs	r3, #96	; 0x60
 80022c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022d0:	2307      	movs	r3, #7
 80022d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d4:	f7fe f9ca 	bl	800066c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2026      	movs	r0, #38	; 0x26
 80022dc:	4611      	mov	r1, r2
 80022de:	f7fe f949 	bl	8000574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022e2:	2026      	movs	r0, #38	; 0x26
 80022e4:	f7fe f97a 	bl	80005dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022e8:	b008      	add	sp, #32
 80022ea:	bd10      	pop	{r4, pc}
 80022ec:	40004400 	.word	0x40004400
 80022f0:	48000c00 	.word	0x48000c00

080022f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800232c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022fa:	e003      	b.n	8002304 <LoopCopyDataInit>

080022fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002300:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002302:	3104      	adds	r1, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002304:	480b      	ldr	r0, [pc, #44]	; (8002334 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002308:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800230a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800230c:	d3f6      	bcc.n	80022fc <CopyDataInit>
	ldr	r2, =_sbss
 800230e:	4a0b      	ldr	r2, [pc, #44]	; (800233c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002310:	e002      	b.n	8002318 <LoopFillZerobss>

08002312 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002312:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002314:	f842 3b04 	str.w	r3, [r2], #4

08002318 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <LoopForever+0x16>)
	cmp	r2, r3
 800231a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800231c:	d3f9      	bcc.n	8002312 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800231e:	f7ff ff6d 	bl	80021fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002322:	f000 f811 	bl	8002348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002326:	f7ff fdfd 	bl	8001f24 <main>

0800232a <LoopForever>:

LoopForever:
    b LoopForever
 800232a:	e7fe      	b.n	800232a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800232c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002330:	08002424 	.word	0x08002424
	ldr	r0, =_sdata
 8002334:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002338:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 800233c:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8002340:	200001ac 	.word	0x200001ac

08002344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002344:	e7fe      	b.n	8002344 <ADC1_2_IRQHandler>
	...

08002348 <__libc_init_array>:
 8002348:	b570      	push	{r4, r5, r6, lr}
 800234a:	4e0d      	ldr	r6, [pc, #52]	; (8002380 <__libc_init_array+0x38>)
 800234c:	4c0d      	ldr	r4, [pc, #52]	; (8002384 <__libc_init_array+0x3c>)
 800234e:	1ba4      	subs	r4, r4, r6
 8002350:	10a4      	asrs	r4, r4, #2
 8002352:	2500      	movs	r5, #0
 8002354:	42a5      	cmp	r5, r4
 8002356:	d109      	bne.n	800236c <__libc_init_array+0x24>
 8002358:	4e0b      	ldr	r6, [pc, #44]	; (8002388 <__libc_init_array+0x40>)
 800235a:	4c0c      	ldr	r4, [pc, #48]	; (800238c <__libc_init_array+0x44>)
 800235c:	f000 f820 	bl	80023a0 <_init>
 8002360:	1ba4      	subs	r4, r4, r6
 8002362:	10a4      	asrs	r4, r4, #2
 8002364:	2500      	movs	r5, #0
 8002366:	42a5      	cmp	r5, r4
 8002368:	d105      	bne.n	8002376 <__libc_init_array+0x2e>
 800236a:	bd70      	pop	{r4, r5, r6, pc}
 800236c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002370:	4798      	blx	r3
 8002372:	3501      	adds	r5, #1
 8002374:	e7ee      	b.n	8002354 <__libc_init_array+0xc>
 8002376:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800237a:	4798      	blx	r3
 800237c:	3501      	adds	r5, #1
 800237e:	e7f2      	b.n	8002366 <__libc_init_array+0x1e>
 8002380:	0800241c 	.word	0x0800241c
 8002384:	0800241c 	.word	0x0800241c
 8002388:	0800241c 	.word	0x0800241c
 800238c:	08002420 	.word	0x08002420

08002390 <memset>:
 8002390:	4402      	add	r2, r0
 8002392:	4603      	mov	r3, r0
 8002394:	4293      	cmp	r3, r2
 8002396:	d100      	bne.n	800239a <memset+0xa>
 8002398:	4770      	bx	lr
 800239a:	f803 1b01 	strb.w	r1, [r3], #1
 800239e:	e7f9      	b.n	8002394 <memset+0x4>

080023a0 <_init>:
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	bf00      	nop
 80023a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a6:	bc08      	pop	{r3}
 80023a8:	469e      	mov	lr, r3
 80023aa:	4770      	bx	lr

080023ac <_fini>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	bf00      	nop
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr
